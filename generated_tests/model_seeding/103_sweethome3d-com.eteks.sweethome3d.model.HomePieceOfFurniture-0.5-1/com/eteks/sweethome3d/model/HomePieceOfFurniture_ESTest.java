/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:12:21 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2Hp]~$");
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.14896F, 0.07334131F, 0.07334131F, 42);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.14896F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomRightPointAt(0.07334131F, 0, (-2892.7751F));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("Super class isn't cloneable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.Super class isn't cloneable
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, 0.0F, (-1424));
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(389.26874F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals(object0);
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 389.26874F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setY(0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTexturable();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, (-1.5206703F), 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 390.0F, 390.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0M_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getValueAddedTax();
      Float float0 = new Float((-1510.0));
      float0.floatValue();
      homeLight0.setShininess((Float) (-1510.0F));
      homeLight0.getNameYOffset();
      homeLight0.getHeight();
      Integer integer0 = new Integer((-2200));
      Object object0 = new Object();
      integer0.equals(object0);
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setX(0);
      homeLight0.setY(0L);
      homeLight0.isTexturable();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setWidth(6.073281F);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset(585.0F);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getAngle();
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, (-16.825413F), (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-16.825413F), (-16.825413F), 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0, (-16.825413F), 3.4028235E38F);
      homeLight0.setVisible(true);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3329.42F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.setHeight(0.0F);
      Level level0 = new Level((String) null, 0.0F, (-1.0F), 0);
      homeLight0.isAtLevel(level0);
      homeLight0.isAtLevel(level0);
      homeLight0.getTexture();
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1420));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      Float float0 = new Float((-266.0F));
      homeLight0.isTopLeftPointAt(0.0F, 0.3926991F, (-266.0F));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "Super clFss isn't cldneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setColor((Integer) null);
      homeLight1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 1639, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(1639);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 1639, 1639, 1639, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      Integer integer0 = new Integer(1639);
      homeLight1.setColor(integer0);
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.isVisible();
      homeLight1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", homeLight0.getName());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, 0, 0);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", homeLight0.getName());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(boolean0);
      
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("v5^j]^,gbKx7zO", "v5^j]^,gbKx7zO", (-1), "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-1), (-1), 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setModelMirrored(true);
      homeLight0.move((-1), (-2892.7751F));
      Float float0 = Float.valueOf(0.0F);
      homeLight0.setShininess(float0);
      homeLight0.setNameAngle(1.380762F);
      homeLight0.setMovable(true);
      homeLight0.getShininess();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.getPrecision();
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1424));
      HomePieceOfFurniture.Property.values();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      mathContext0.equals(homePieceOfFurniture0);
      homeLight0.setNameVisible(true);
      homeLight0.setElevation((-907.8F));
      homeLight0.setNameYOffset((-1856.0F));
      homePieceOfFurniture0.isDoorOrWindow();
      homePieceOfFurniture0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation(390.0F);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.setNameVisible(false);
      homeLight2.getGroundElevation();
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("v5^j]^,gbKx7zO", "v5^j]^,gbKx7zO", (-1), "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-1), (-1), 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      MathContext mathContext1 = MathContext.DECIMAL64;
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      CatalogLight catalogLight1 = new CatalogLight("", "", "Mac OS X", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 4.2034955F, 4.2034955F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, true, bigDecimal1, bigDecimal0);
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset(2001.35F);
      homeLight1.isNameCenterPointAt(0.0F, (-500.741F), 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, (-1.0F), true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setAngle((-1.0F));
      homeLight0.isPointAt(2641.3687F, 0, 3098.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.move((-1.0F), 0.0F);
      homeLight2.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("8H]C", "8H]C", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      LightSource lightSource0 = new LightSource(389.6968F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "4`73LQr*@^h@yh6!aO", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 5.646445F, (-1040.4769F), 3488.535F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      bigDecimal0.intValueExact();
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(389.6968F);
      homeLight0.getNameStyle();
      Float float0 = new Float((-1230.7029));
      float0.equals("U%@W(F[5");
      homeLight0.setShininess(float0);
      homeLight0.getElevation();
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      Integer integer0 = new Integer(0);
      homeLight1.setColor(integer0);
      homeLight1.setColor(integer0);
      homeLight1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer integer0 = Integer.valueOf(7);
      homeLight0.setColor(integer0);
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.getNameStyle();
      homeLight0.isNameCenterPointAt((-3141.813F), 0, (-466.32095F));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HomePieceOfFurniture.Property.values();
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1420));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameVisible(false);
      homeLight1.isPointAt(0.0F, (-4181.984F), 651.3716F);
      homeLight1.setDescription("1.5.0_16");
      HomePieceOfFurniture.Property.values();
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 10.014111F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.44251096F);
      homeLight0.isBottomRightPointAt((-1437.0544F), 0.3926991F, 4026.2F);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setY(0L);
      homeLight0.isTexturable();
      homeLight0.getPriceValueAddedTaxIncluded();
      // Undeclared exception!
      try { 
        homeLight0.setWidth(6.073281F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, (-2582.2F), (-1424));
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals("Super class isn't cloneable");
      LightSource[] lightSourceArray0 = new LightSource[1];
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "Super class isn't cloneable", (String) null, uRLContent0, uRLContent0, uRLContent0, 3941.4675F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", false, true, false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setAngle((-1424));
      homeLight0.setNameAngle(4.43375F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("temp", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0);
      homeLight0.setHeight(0.07334131F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle(0.110011965F);
      homeLight0.setX((-990.0F));
      homeLight0.isTexturable();
      homeLight1.isDoorOrWindow();
      homeLight1.setNameYOffset(33);
      homeLight1.isNameCenterPointAt(1030.541F, 0.0F, 1084.2F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level((String) null, 0, 0, 0);
      homeLight0.setName("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1635.9F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1420));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      Float float0 = new Float((-266.0F));
      homeLight0.isTopLeftPointAt(0.0F, 0.3926991F, (-266.0F));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0, (-976.7625F), 0);
      homeLight0.setDescription("Super class isn't cloneable");
      homeLight0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0M_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getValueAddedTax();
      Float float0 = new Float((-1510.0));
      float0.floatValue();
      homeLight0.setShininess((Float) (-1510.0F));
      homeLight0.getX();
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.containsPoint(0, 0.0F, 2972.5186F);
      homeLight0.isPointAt(0, 3697.0F, 0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setDescription("~Su");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 390.0F, 390.0F, 0.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isTopRightPointAt(0, 0.0F, 0);
      HomePieceOfFurniture.Property.values();
      homeLight0.setNameVisible(false);
      homeLight0.setElevation((-1047.307F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 84, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 84, 84, 84, 84, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(84, 84, (-1883.1F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.isBottomRightPointAt(0.0F, 2.0F, 2216.1907F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.5664532F);
      homeLight0.getPriceValueAddedTaxIncluded();
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setModelMirrored(true);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setWidth(0);
      Float float0 = new Float(328.21948F);
      float0.floatValue();
      homeLight0.setShininess((Float) 328.21948F);
      homeLight0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 390.0F, 390.0F, 0.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isTopRightPointAt(0, 0.0F, 0);
      Integer integer0 = new Integer(20);
      homeLight0.setColor(integer0);
      homeLight0.setDescription((String) null);
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.setHeight(0.0F);
      Level level0 = new Level((String) null, 0.0F, (-1.0F), 0);
      homeLight0.isAtLevel(level0);
      homeLight0.isAtLevel(level0);
      homeLight0.getDepth();
      homeLight0.isBottomRightPointAt(2.0F, 0.0F, 3461.3855F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("Super class isn't cloneable");
      homeLight0.getModel();
      homeLight0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.setHeight(0.0F);
      homeLight0.isTexturable();
      homeLight0.containsPoint(514.76F, 1.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getPlanIcon();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("L#-@*hDo", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.clone();
      Integer integer0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.floatValue();
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.5664532F);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setY(0L);
      homeLight0.isTexturable();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setWidth(6.073281F);
      HomePieceOfFurniture.Property.values();
      homeLight0.intersectsRectangle(1345.519F, (-247.7679F), 1.380762F, 97.155F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.5664532F);
      homeLight0.setX(0.5664532F);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, false, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 84, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 84, 84, 84, 84, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-680.71F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getTexture();
      homeLight1.setDescription("");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.isDoorOrWindow();
      homeLight0.isTopLeftPointAt((-1604.4777F), 33.0F, 2818.374F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "C=Xrh,vZc0\t", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isTopRightPointAt(0, 0.0F, 0);
      HomePieceOfFurniture.Property.values();
      homeLight0.setNameVisible(true);
      homeLight0.setElevation(0);
      homeLight0.getGroundElevation();
      String string0 = "zh>{< eFhlbj";
      String string1 = "3t";
      Content content0 = null;
      boolean boolean0 = false;
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = (-699.11F);
      floatArray2[7] = 0.0F;
      floatArray0[1] = floatArray2;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zh>{< eFhlbj", "3t", "zh>{< eFhlbj", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, false, floatArray0, "zh>{< eFhlbj", true, bigDecimal1, bigDecimal2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.move(0, (-2892.7751F));
      homeLight0.setDepth(0.0F);
      homeLight0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      homeLight0.setModelMirrored(false);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setWidth(0.3926991F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("riw}Afk I_a#3^#", propertyChangeListener0);
      homeLight1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight1.isNameCenterPointAt(0, (-976.7625F), 0);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(8L, mathContext0);
      mathContext0.getPrecision();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-0.3826592F), (-0.3826592F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight1.isBottomRightPointAt(0.0F, 390.0F, (-134.0251F));
      homeLight0.getTexture();
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(2.2830648F);
      homeLight1.isTexturable();
      homeLight1.isBottomLeftPointAt(0.0F, (-274.71F), 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 389.26874F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle((-2821.36F));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5U0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setX(0);
      homeLight0.isTexturable();
      homeLight0.setWidth(6.073281F);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset(585.0F);
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(0);
      HomeLight homeLight1 = homeLight0.clone();
      Integer integer0 = new Integer(0);
      homeLight1.setColor(integer0);
      homeLight1.setColor(integer0);
      homeLight1.getColor();
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0);
      homeLight0.isPointAt(0, 0.0F, 0);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((-1L), mathContext0);
      CatalogLight catalogLight0 = new CatalogLight(">j|oj:", "Super class isn't cloneable", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44F, (-1437.0544F), 0.0F, (-0.3826592F), false, lightSourceArray0, (float[][]) null, "ce'nbCR,", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      mathContext0.toString();
      homeLight1.setAngle((-1L));
      homeLight1.isBottomRightPointAt(717.9F, 390.0F, 0.3926991F);
      homeLight2.isDeformable();
      Float.floatToIntBits(2107.0F);
      homeLight3.setShininess((Float) 2107.0F);
      homeLight2.setVisible(true);
      homeLight3.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-1011.5011F));
      homeLight1.setHeight(0.07334131F);
      Level level0 = new Level("Super class isn't cloneable", 1296.8927F, 0, 1296.8927F);
      homeLight1.isAtLevel(level0);
      homeLight1.isAtLevel(level0);
      homeLight1.getDepth();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomePieceOfFurniture.Property.values();
      homeLight1.isBottomLeftPointAt(390.0F, 0, 390.0F);
      homeLight2.isBottomRightPointAt(3.4028235E38F, 102.66231F, 1314.8828F);
      homeLight0.setHeight(0.07334131F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameVisible(true);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight1.setAngle((-1437.0544F));
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isTexturable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight2.isTexturable();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      Float float0 = homeLight2.getShininess();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(float0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight1.setName("");
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isTexturable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      MathContext mathContext1 = MathContext.DECIMAL128;
      mathContext1.toString();
      homeLight2.isPointAt(0.44251096F, 97.155F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDepth(0.0F);
      homeLight1.isNameCenterPointAt((-1.0F), 905.9107F, 905.9107F);
      homeLight0.setDescription("Super class isn't cloneable");
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0.0F);
      TextStyle textStyle0 = new TextStyle(0);
      homeLight0.isNameCenterPointAt(0.0F, 2.0F, 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", 0, "bcOh1uwd.[2krOE57V", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, false, lightSourceArray0, (float[][]) null, "bcOh1uwd.[2krOE57V", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(0, (-2010.2167F), (-2010.2167F));
      CatalogTexture catalogTexture0 = new CatalogTexture("bcOh1uwd.[2krOE57V", "D%)D%u!06h~JO", uRLContent0, 0.0F, 0.0F, "bcOh1uwd.[2krOE57V", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight0.getNameStyle();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(2.2830648F);
      homeLight1.isTexturable();
      homeLight1.containsPoint(0L, 1503.5F, 0);
      homeLight1.getCurrency();
      homeLight1.setNameYOffset(0.0F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 1639, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(1639);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 1639, 1639, 1639, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer integer0 = new Integer(1639);
      homeLight0.setColor(integer0);
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.setColor(integer0);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.56\"[;.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0.0F);
      homeLight0.setVisible(false);
      homeLight1.isBottomRightPointAt(0.0F, 0.0F, 0.07334131F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 84, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 84, 84, 84, 84, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      Integer integer0 = new Integer(1491611920);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer integer1 = new Integer(84);
      homeLight0.setVisible(true);
      homeLight0.setColor(integer1);
      homeLight0.isBottomRightPointAt((-875.48566F), 1.380762F, (-295.7126F));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight1 = new CatalogLight("ce'nbCR,", "1.5.0_16", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, 3351.424F, 3725.4834F, true, lightSourceArray0, (float[][]) null, "", true, false, false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      homeLight0.setAngle(3725.4834F);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset(0.0F);
      HomePieceOfFurniture.Property.values();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt((-1.0F), 0, 0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(2156.2F, 0, 617.7349F);
      Integer integer0 = new Integer(0);
      homeLight1.setColor(integer0);
      homeLight1.setColor(integer0);
      homeLight1.getPoints();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss is't cldneable", "Super clFss is't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss is't cldneable", "Super clFss is't cldneable", "Super clFss is't cldneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss is't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1347.0F, 905.9107F, 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5U0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setX(0);
      homeLight0.isTexturable();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setWidth(6.073281F);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset(585.0F);
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "Super clFss isn't cldneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setModelMirrored(true);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.setWidth((-254.705F));
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      HomePieceOfFurniture.Property.values();
      homeLight0.getWidth();
      homeLight0.getDepth();
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 15, 2.0830007F, 629.3514F, (-2893.2751F), true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.toString();
      homeLight0.setAngle(629.3514F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LEVEL");
      homeLight0.isBottomRightPointAt(15, (-2893.2751F), (-4026.2F));
      float float0 = new Float(2.0830007F);
      Integer integer0 = new Integer(15);
      homeLight0.setColor(integer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      homeLight0.getShininess();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, 0.44251096F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight1 = new CatalogLight("ce'nbCR,", "1.5.0_16", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, 3351.424F, 3725.4834F, true, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      homeLight0.setAngle(3725.4834F);
      homeLight0.setNameYOffset(0.0F);
      homeLight0.isTopLeftPointAt(1.0F, 1170.0F, 3351.424F);
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 10.014111F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.toString();
      homeLight0.setAngle(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "precision=16 roundingMode=HALF_EVEN");
      homeLight0.isBottomRightPointAt(0.44251096F, 0.44251096F, (-1437.0544F));
      homeLight0.getGroundElevation();
      Integer integer0 = new Integer(0);
      homeLight0.setColor(integer0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("1.5.0_16");
      catalogLight0.setCategory(furnitureCategory0);
      homeLight0.isBottomRightPointAt(0.14358538F, 1.380762F, 10.014111F);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0);
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      homeLight0.getWidth();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homeLight0.setNameStyle(textStyle0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0, 0.0F, 3.4028235E38F);
      homeLight0.setDepth((-1424));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0.0F, (-1432.0153F), true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.setHeight((-1432.0153F));
      mathContext0.toString();
      Level level0 = new Level((String) null, (-1432.0153F), (-1.0F), 0);
      homeLight0.isAtLevel(level0);
      homeLight0.isAtLevel(level0);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.containsPoint(0, 0, 0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$1700((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "2Hp]~$";
      stringArray0[2] = null;
      stringArray0[3] = "2Hp]~$";
      stringArray0[4] = null;
      stringArray0[5] = "";
      Long long0 = Long.valueOf(1L);
      Float.floatToIntBits((-371.26978F));
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(1882.7869F);
      Float.floatToIntBits(0.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("cP@_", (String) null, "Super class isn't cloneable", "", stringArray0, long0, (Float) 0.0F, uRLContent0, uRLContent0, uRLContent0, 0.0F, 0, 0.0F, 0, true, 1501.11F, 1.0F, (Sash[]) null, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0, "2Hp]~$");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 24.04814F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 24.04814F, 24.04814F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0M_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(24.04814F);
      homeLight0.move(390.0F, 0.0F);
      homeLight0.setNameAngle(77.3169F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 46.624138F, false, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setNameVisible(true);
      homeLight0.setNameAngle(46.624138F);
      TextStyle textStyle0 = new TextStyle(0);
      homeLight0.setName("Super class isn't cloneable");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.isPointAt((-64.8F), 5.1985836F, 0L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Random.setNextRandom(575);
      HomePieceOfFurniture.Property.values();
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$400((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 0, 0, (-1437.0544F), 0, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight1.isBottomRightPointAt(0, 0.0F, (-1437.0544F));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      mathContext0.getPrecision();
      HomeLight homeLight1 = homeLight0.clone();
      mathContext0.getPrecision();
      homeLight1.setAngle(2.2830648F);
      homeLight1.isTexturable();
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0, 0.0F, 3.4028235E38F);
      homeLight0.getModel();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 27, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[13];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 27, 27, 0.3926991F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.5F);
      homeLight0.setModelMirrored(true);
      homeLight0.move(27, 0.3926991F);
      homeLight0.setAngle(0.5F);
      homeLight0.setWidth(390.0F);
      homeLight0.getDescription();
      homeLight0.getIcon();
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "2Hp]~$", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(348.7899F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 348.7899F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "Supe class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture.Property.values();
      homeLight0.getWidth();
      homeLight0.getDepth();
      Level level0 = new Level("2Hp]~$", 0.07334131F, 348.7899F, 0);
      homeLight0.setLevel(level0);
      Integer integer0 = new Integer(662);
      homeLight0.setColor(integer0);
      homeLight0.setDescription("Supe class isn't cloneable");
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1454));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-1454));
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5;G.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.setShininess((Float) null);
      homeLight0.isBottomRightPointAt(1988.94F, 0L, 0.0F);
      homeLight0.getGroundElevation();
      Level level0 = new Level("Super class isn't cloneable", (-1454), 1725.65F, 0.0F);
      homeLight0.isAtLevel(level0);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getPlanIcon();
      homeLight0.setNameAngle(1544.784F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1424));
      homeLight0.setDepth(0.0F);
      homeLight0.setNameXOffset(0.44251096F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 390.0F, 390.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "C=Xrh,vZc0\t", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isTopRightPointAt(0, 0.0F, 0);
      HomePieceOfFurniture.Property.values();
      homeLight0.setNameVisible(true);
      homeLight0.setElevation(0);
      homeLight0.getGroundElevation();
      homeLight0.isNameVisible();
      homeLight0.setNameAngle((-1424));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-1437.0544F));
      homeLight2.setX(0);
      homeLight2.isBottomLeftPointAt(0.0F, 0.5F, (-1.0F));
      homeLight2.setPower((-1712.5F));
      homeLight2.isTexturable();
      homeLight2.isDoorOrWindow();
      mathContext0.toString();
      homeLight2.isPointAt(68.17533F, 68.17533F, (-790.7F));
      homeLight1.isTopLeftPointAt(390.0F, 0.44251096F, (-2559.8F));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, 33);
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.toString();
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      homeLight0.setDescription("+%GyP'8:xzGRUbJdd");
      homeLight0.setElevation(1.380762F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 389.26874F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setDepth(2784.2F);
      homeLight0.getModelRotation();
      homeLight0.setY(2.0F);
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      CatalogLight catalogLight1 = new CatalogLight("com.eteks.sweethome3d.tools.TemporaryURLContent", "Super clFss isn't cldneable", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, (-428.76562F), (-428.76562F), (-428.76562F), false, lightSourceArray0, "Super clFss isn't cldneable", (float[][]) null, "com.eteks.sweethome3d.tools.TemporaryURLContent", false, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomeLight$Property");
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 84, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 84, 84, 84, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth((-754.0927F));
      homeLight0.isBottomRightPointAt(84, 84, (-1883.1F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(353.56F, (-2.4918094F), 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("", "\"SY%IDqtt()H", "com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRLContent0, uRLContent0, uRLContent0, (-1.0F), (-1.0F), 1678.5948F, 1257.44F, false, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setDescription("Super class isn't cloneable");
      homeLight0.getWidth();
      TextStyle textStyle0 = new TextStyle((-1424), false, true);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setNameStyle(textStyle0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      Object object0 = new Object();
      mathContext0.equals("Super class isn't cloneable");
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("2Hp]~$", "{$c-fJ1T*", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 1364.4F, 0.0F, 3329.42F, 2097.2034F, true, lightSourceArray0, (float[][]) null, "{$c-fJ1T*", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(2051.0F);
      homeLight0.setY(2803.9048F);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(445.151F, (-1.0F), 2803.9048F, (-1.0F), 636.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(2803.9048F, (-334.01F), 3677.34F, 3.4028235E38F, 1555.57F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(3329.42F, 0.0F, 5220.74F, 2119.9739F, 2097.2034F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-189.064F), 3677.34F, 2803.9048F, 2728.728F, 0.0F);
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", "{$c-fJ1T*", "Super class isn't cloneable", uRLContent0, uRLContent0, (-3124.3945F), 1414.0841F, 1555.57F, 1696.06F, true, 1414.0841F, (-1.0F), sashArray0, (float[][]) null, "{$c-fJ1T*", true, bigDecimal0, bigDecimal0);
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      homeLight0.isPointAt(585.0F, 0.0F, 0.0F);
      homeLight0.setWidth(1364.4F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-568L), mathContext0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0F);
      float0.floatValue();
      LightSource lightSource0 = new LightSource((-1439.6082F), 462.432F, 2825.01F, 0, (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("", "1.5.0_16", "", (Content) null, (Content) null, (Content) null, 0, (-1439.6082F), (-568L), 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-568L));
      homeLight0.isPointAt(0.0F, (-94.45475F), (-94.45475F));
      homeLight0.getIcon();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(8L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-0.3826592F), (-0.3826592F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(2627.4F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.isNameCenterPointAt((-4619.5303F), (-4619.5303F), 2627.4F);
      homeLight0.getX();
      homeLight1.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      Float float0 = new Float(376.9983F);
      homeLight1.setShininess(float0);
      homeLight0.setName("MODEL_MIRRORED");
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setMovable(false);
      homeLight0.setModelMirrored(true);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.setWidth(0);
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.14896F, 0.07334131F, 0.07334131F, 42);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 390.14896F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      TemporaryURLContent temporaryURLContent1 = new TemporaryURLContent((URL) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent1, temporaryURLContent1, (-2203.3147F), 164.28F, 926.0F, false, false);
      LightSource[] lightSourceArray1 = new LightSource[0];
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight1 = new CatalogLight((String) null, "e8'", "Jy2;Q]-~;F$x!", temporaryURLContent1, temporaryURLContent1, temporaryURLContent1, 2615.3071F, 926.0F, 164.28F, (-213.7404F), false, lightSourceArray1, (float[][]) null, "WNP,iL5nul5BY;#27K", true, true, false, bigDecimal1, bigDecimal1);
      catalogLight1.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogLight1);
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      MathContext mathContext0 = new MathContext(42, roundingMode0);
      mathContext0.toString();
      homeLight0.isPointAt(2664.9495F, (-790.7F), 0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isTopLeftPointAt(390.0F, (-790.7F), (-2322.4827F));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      HomePieceOfFurniture.Property.values();
      homeLight0.getWidth();
      homeLight0.getDepth();
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
      Integer integer0 = new Integer(662);
      homeLight0.setColor(integer0);
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-1011.5011F));
      homeLight1.setHeight(0.07334131F);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      homeLight1.setAngle(0);
      homeLight0.setVisible(true);
      homeLight0.isBottomRightPointAt(0.07334131F, 558.31F, 0.07334131F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "+%GyP'8:xzGRUbJdd", "2Hp]~$", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0, 0.0F, 0L, true, lightSourceArray0, (float[][]) null, "ajodj\rsR$XjOm(Q", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle((-3739.0F));
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 3329.42F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 3329.42F, 3329.42F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Object object0 = new Object();
      homeLight0.setNameVisible(false);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(3329.42F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt(0.07334131F, (-362.2F), 3329.42F);
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0L, 0.0F, 0);
      homeLight0.isBottomRightPointAt(390.0F, 3329.42F, 1.794992F);
      // Undeclared exception!
      try { 
        homeLight0.setHeight(1.794992F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(733.2148F);
      TextStyle textStyle0 = new TextStyle(2.0F);
      homeLight0.setNameAngle(2.0F);
      TextStyle textStyle1 = new TextStyle(1083.7201F);
      homeLight0.setName("+%GyP'8:xzGRUbJdd");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, (-1420), (-153.9384F), (-1420));
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(1733L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "1.5.0_16", (String) null, uRLContent0, uRLContent0, uRLContent0, (-1420), (-1318.0F), 602.891F, (-1.0F), false, lightSourceArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isPointAt(390.0F, 1.0684187F, 0.0F);
      homeLight0.setDescription((String) null);
      HomePieceOfFurniture.Property.values();
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setY(0.0F);
      bigDecimal0.unscaledValue();
      homeLight0.isBottomLeftPointAt(0.0F, 0L, 720.765F);
      mathContext0.equals(lightSource0);
      homeLight0.isPointAt(1.5746664F, 3390.1543F, 1.5746664F);
      System.setCurrentTimeMillis(0);
      Float float0 = new Float(2237.5793F);
      Float.isFinite(2418.4683F);
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setHeight(0.0F);
      Level level0 = new Level("D{C/U#?v{*", 0.0F, 33, (-1.0F));
      homeLight0.isAtLevel(level0);
      homeLight0.isAtLevel(level0);
      homeLight0.getDepth();
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.isBottomRightPointAt((-180.7F), 1.0F, 4039.36F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.getElevation();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      float float0 = 3697.0F;
      // Undeclared exception!
      try { 
        homeLight0.setDepth(3697.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GbP'8:xzGRUuJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 802);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(1.4763829F, (-907.8F), 2805.1035F, (-1438.9154F), 194.31F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-544.6776F), (-1.0F), (-1.0F), 2.0F, 0);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(6.073281F, 6.073281F, 2.0F, 374.76212F, 0.44251096F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(2805.1035F, (-492.4F), 5.2831855F, 1836.2833F, (-2892.7751F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-571.2539F), 5.2831855F, (-1.0F), 1.4763829F, 1.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0, (-1643.9601F), (-1378.5662F), (-1378.5662F), 4.2034955F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-937.5F), 0, (-1378.5662F), 1.0F, (-2125.5312F));
      sashArray0[6] = sash6;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("1.5.0_16", " doesn't contain piece ", "com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRLContent0, uRLContent0, uRLContent0, (-544.6776F), 802, 2672L, 6.073281F, true, 4.2034955F, 6.073281F, sashArray0, (float[][]) null, "4<}", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset((-1.0F));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3329.42F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("DOOR_OR_WINDOW");
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.setHeight(0.0F);
      Level level0 = new Level((String) null, 0.0F, (-1.0F), 0);
      homeLight0.isAtLevel(level0);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt((-976.7625F), 3.4028235E38F, 3.4028235E38F);
      homeLight0.setDescription("Super class isn't cloneable");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2p]~$", "2p]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      CatalogLight catalogLight1 = new CatalogLight("Super class isn't cloneable", "5N", "0O}>zb=-", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0L, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal1, bigDecimal1);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotNull(catalogLight1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals("0O}>zb=-", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals("0O}>zb=-", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      
      boolean boolean0 = homeLight0.isPointAt(514.76F, 1149.5988F, 1149.5988F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals("0O}>zb=-", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      
      homeLight0.setDescription((String) null);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      float float0 = homeLight0.getWidth();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      
      BigDecimal bigDecimal2 = homeLight0.getPrice();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2p]~$", uRL0.getProtocol());
      assertEquals("2p]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2p]~$", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals("0O}>zb=-", catalogLight1.getDescription());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getColor());
      assertEquals("Super class isn't cloneable", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("5N", catalogLight1.getName());
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("5N", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(catalogLight1, catalogLight0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setModelMirrored(true);
      homeLight0.move(0, (-2892.7751F));
      homeLight0.setNameAngle(1.380762F);
      homeLight0.setMovable(true);
      homeLight0.getShininess();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(2641.3687F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(353.56F, (-2.4918094F), 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "4`73LQr*@^h@yh6!aO", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 49.417442F, (-1040.4769F), 3488.535F, (-2.4918094F), true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setModelMirrored(false);
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(353.56F);
      homeLight0.setDepth((-1040.4769F));
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
      homeLight0.getElevation();
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", 0, "bcOh1uwd.[2krOE57V", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 1.0F, 0, 1.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.TexturesCategory", true, true, true, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer.valueOf((-2841));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1420));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1420));
      HomePieceOfFurniture.Property.values();
      homeLight0.isMovable();
      homeLight0.isDeformable();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture.Property.values();
      bigDecimal0.movePointRight(0);
      homeLight0.getWidth();
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
      Integer integer0 = new Integer(662);
      homeLight0.setColor(integer0);
      homeLight0.setDescription("Supe class isn't cloneable");
      homeLight0.getY();
      homeLight0.getDescription();
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, (-0.029330455F), (-0.029330455F), 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-0.029330455F), (-0.029330455F), 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0);
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      homeLight0.setPower(113.0F);
      homeLight0.getWidth();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homeLight0.setNameStyle(textStyle0);
      homeLight0.setNameStyle(textStyle0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.com.eteks.sweethome3d.model.HomePieceOfFurniture$5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(0, 3697.0F, 0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getPoints();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomePieceOfFurniture.Property.values();
      homeLight1.getWidth();
      homeLight0.getDepth();
      homeLight1.getLevel();
      homeLight0.setLevel((Level) null);
      Integer integer0 = new Integer(662);
      Integer integer1 = Integer.valueOf(19);
      homeLight1.setColor(integer1);
      homeLight0.setDescription("");
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 390.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.toString();
      homeLight0.setAngle(0.0F);
      homeLight0.isPointAt(0, 0.0F, 390.0F);
      homeLight0.getNameStyle();
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1420), mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1420));
      HomePieceOfFurniture.Property.values();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.6237704F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-1437.0544F));
      homeLight2.setX(0);
      homeLight2.isBottomLeftPointAt(0.6237704F, 0.5F, (-1.0F));
      homeLight2.setPower((-1712.5F));
      homeLight2.isTexturable();
      mathContext0.toString();
      homeLight2.isPointAt(68.17533F, 68.17533F, 0.5F);
      homeLight1.isTopLeftPointAt(390.0F, 0.44251096F, (-2559.8F));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0.0F, 1911.0F, 0.0F, (-1519));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LightSource[] lightSourceArray0 = new LightSource[1];
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "1.5.0_16", "com.eteks.sweethome3d.model.HomePieceOfFurniture", uRLContent0, uRLContent0, uRLContent0, 1.0F, 0.0F, (-1.0F), 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.move(0.0F, 0.0F);
      homeLight0.setNameAngle((-1.0F));
      homeLight0.setMovable(false);
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1420));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1420));
      HomePieceOfFurniture.Property.values();
      homeLight0.isTopLeftPointAt(5.8376966F, 390.0F, (-1.0F));
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
      homeLight0.setDescription("yff?*tH9z2. -T5^D");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 3329.42F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 3329.42F, 3329.42F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Object object0 = new Object();
      homeLight0.setNameVisible(false);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt(0.07334131F, (-362.2F), 0.0F);
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0L, 0.0F, 0);
      homeLight0.isBottomRightPointAt(390.0F, 3329.42F, 1.794992F);
      // Undeclared exception!
      try { 
        homeLight0.setHeight(1.794992F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 24, "4 h>`\"e", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 24, 24, 24, 24, true, lightSourceArray0, (float[][]) null, "4 h>`\"e", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(1.0F);
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.isPointAt(24, 3697.0F, 24);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getTexture();
      homeLight1.getTexture();
      homeLight1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(0);
      homeLight0.setX(1.0F);
      Level level0 = new Level("", 0, 0, 0);
      level0.setName("XwSvN|3&LR0np(");
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      boolean boolean0 = false;
      CatalogLight catalogLight0 = new CatalogLight("V3MJK", "", "/0<.x I7J!JH0-lB", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "V3MJK", false, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-1437.0544F));
      homeLight2.isTexturable();
      // Undeclared exception!
      try { 
        homeLight1.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]#1)", "2Hp]#1)", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.56\"[;.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isBottomLeftPointAt(0.0F, 3329.42F, 0);
      homeLight0.isBottomRightPointAt(3.4028235E38F, 559.07275F, 4.4939675F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt(0, (-1562.26F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0.0F);
      homeLight0.intersectsRectangle(0.0F, 0, 0, 0);
      TextStyle textStyle0 = new TextStyle(0);
      homeLight0.setName("Super class isn't cloneable");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3329.42F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.getHeight();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((-3L), mathContext0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "+%GyP'8:xzGRUbJdd", "2Hp]~$", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0, 0.0F, (-3L), true, lightSourceArray0, (float[][]) null, "ajodj\rsR$XjOm(Q", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle((-3739.0F));
      homeLight0.isTexturable();
      homeLight0.isBackFaceShown();
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "com.eteks.sweethome3d.model.FurnitureCategory", uRLContent0, uRLContent1, uRLContent0, 1510.0F, 0, 1.0F, (-4177.371F), true, lightSourceArray0, (float[][]) null, "Q<Y6{} 6q<X`Q[4s0", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setNameVisible(false);
      homeLight0.setAngle(1.0F);
      homeLight1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      HomePieceOfFurniture.Property.values();
      float float0 = homeLight0.getY();
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, float0, 0.01F);
      
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 390.0F, 390.0F, 390.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(0, 0.0F, 0);
      HomePieceOfFurniture.Property.values();
      homeLight0.setNameVisible(true);
      homeLight0.setElevation(0);
      homeLight0.getGroundElevation();
      homeLight0.isTopRightPointAt(0.0F, 0.0F, 0);
      homeLight0.getNameAngle();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt((-907.8F), 0, (-1424));
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", 0, "bcOh1uwd.[2krOE57V", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", "bcOh1uwd.[2krOE57V", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "bcOh1uwd.[2krOE57V", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      TextStyle textStyle0 = new TextStyle((-2008.7078F));
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(true);
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(true);
      homeLight1.setNameStyle(textStyle2);
      homeLight1.isNameCenterPointAt(0, (-2008.7078F), (-2008.7078F));
      homeLight0.setDescription("bcOh1uwd.[2krOE57V");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1420), mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.setAngle((-1.0F));
      homeLight0.isTopRightPointAt(3.7732801F, 0.3926991F, 0.3926991F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "4`73LQr*@^h@yh6!aO", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, (-1.0F), (-1040.4769F), 3488.535F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(390.0F);
      homeLight0.getNameStyle();
      homeLight0.isDeformable();
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("(7[]VF&<=bg", "vO4C", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(193.205F);
      homeLight0.setVisible(false);
      homeLight1.setWidth(13.001704F);
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      mathContext0.equals(object0);
      URLContent uRLContent0 = new URLContent(uRL0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, (String) null, uRLContent0, temporaryURLContent0, uRLContent0, 0.22125548F, 3.2975302F, (-1424), 3.2975302F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.22125548F);
      homeLight0.setAngle(390.0F);
      homeLight0.setNameAngle((-1194.3055F));
      TextStyle textStyle0 = new TextStyle(0);
      homeLight0.clone();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf(" doesn't contain texture ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty. doesn't contain texture 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("CJ7Nl%6C6y\"K", "+%GyP'8:xzGRUbJdd", "CJ7Nl%6C6y\"K", uRLContent0, uRLContent0, uRLContent0, (-1.0F), 2.6418407F, 2.6418407F, (-1.0F), false, lightSourceArray0, "{,@HBg)*c!Cyo5Q|tC", (float[][]) null, "CJ7Nl%6C6y\"K", false, false, false, bigDecimal0, bigDecimal0, "6FcU");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(1.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Super clFss isn't cldneable");
      float float0 = (-1.0F);
      homeLight1.isBottomRightPointAt((-1.0F), 74.3861F, 2.6418407F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight1.getGroundElevation();
      Integer integer0 = new Integer((-2146504923));
      Integer integer1 = Integer.valueOf(1125);
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1424));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(1877.6095F, 5220.74F, (-3739.1086F));
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.2677038F, false, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(0.2677038F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(0, 905.9107F, 905.9107F);
      homeLight0.setDescription("Super class isn't cloneable");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-1437.0544F));
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.setNameVisible(false);
      homeLight1.setElevation(0);
      float float0 = new Float(0.44251096F);
      homeLight2.isTopRightPointAt(0.5F, (-1437.0544F), 0.44251096F);
      homeLight1.getName();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf(">5xK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.>5xK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1442));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, (-3373.5662F), true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      bigDecimal0.subtract(bigDecimal1, mathContext0);
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1442));
      HomePieceOfFurniture.Property.values();
      homeLight0.getNameStyle();
      homeLight0.setDepth(3556.03F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.isTopLeftPointAt(5.4851294F, (-2004.0F), 0);
      boolean boolean0 = true;
      homeLight0.setModelMirrored(true);
      float float0 = (-2892.7751F);
      // Undeclared exception!
      try { 
        uRLContent0.getJAREntryName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Content isn't a JAR entry
         //
         verifyException("com.eteks.sweethome3d.tools.URLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(377.2569F, 0.0F, 0, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      MathContext mathContext1 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext1);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "Super class isn't cloneable", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1424), 0, 0.0F, (-1.0F), true, lightSourceArray0, (float[][]) null, (String) null, true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-862.0408F));
      homeLight0.setModelMirrored(true);
      homeLight0.move((-1.0F), (-1424));
      homeLight0.setAngle(2515.6106F);
      homeLight0.setWidth(0.5F);
      homeLight0.isVisible();
      homeLight0.isTopLeftPointAt(0.5F, (-1424), (-1.0F));
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1424), mathContext0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.ResourceURLContent", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0, (-1555.7063F), true, lightSourceArray0, (float[][]) null, (String) null, false, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(2.2830648F);
      homeLight1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(0.0F);
      TextStyle textStyle0 = new TextStyle(0);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.5664532F);
      homeLight0.setShininess((Float) null);
      homeLight0.getNameStyle();
      homeLight0.setNameStyle((TextStyle) null);
      HomePieceOfFurniture.Property.values();
      System.setCurrentTimeMillis(0);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0, (-976.7625F), 0);
      homeLight0.setDescription("Super class isn't cloneable");
      homeLight0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 3329.42F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Object object0 = new Object();
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      mathContext0.toString();
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt(0.0F, 0.0F, (-1424));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0, 3329.42F, 3.4028235E38F);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0L);
      homeLight0.setHeight((-1424));
      homeLight0.getModelRotation();
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(353.56F, (-2.4918094F), 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "4`73LQr*@^h@yh6!aO", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 49.417442F, (-1040.4769F), 3488.535F, (-2.4918094F), true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameAngle(353.56F);
      homeLight0.setDepth((-1040.4769F));
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-1.0F));
      homeLight0.setModelMirrored(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[10];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 403.2029F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Object object0 = new Object();
      homeLight0.setNameVisible(false);
      bigDecimal0.doubleValue();
      homeLight0.setAngle((-12.793552F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isTopRightPointAt(403.2029F, (-12.793552F), (-1424));
      homeLight0.getDepth();
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.isBottomRightPointAt(0.60342956F, 403.2029F, 0.60342956F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.move(0, (-2892.7751F));
      homeLight0.setNameAngle(1.380762F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = new Object();
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(0, 3697.0F, 0);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      bigDecimal0.doubleValue();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      HomePieceOfFurniture.Property.values();
      homeLight0.isBottomLeftPointAt(0, 0.0F, 3.4028235E38F);
      homeLight0.setVisible(true);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, (-2582.2F), (-1424));
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals("Super class isn't cloneable");
      LightSource[] lightSourceArray0 = new LightSource[1];
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "Super class isn't cloneable", (String) null, uRLContent0, uRLContent0, uRLContent0, 3941.4675F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", false, true, false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setAngle((-1424));
      homeLight0.setNameAngle(4.43375F);
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1424), 390.0F, (-254.083F));
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTexturable();
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeLight0.setNameXOffset(0.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNull(homeTexture0);
      
      BigDecimal bigDecimal1 = homeLight0.getPrice();
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(2.4308233F, 0.5F, 0.5664532F);
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.5664532F);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3329.42F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 3329.42F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setNameAngle(0L);
      homeLight0.getModel();
      homeLight0.intersectsRectangle(0.0F, 1.0F, 0.0F, 1475.1F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 389.26874F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.setY(0);
      homeLight0.setDepth(2803.9048F);
      homeLight0.isTopRightPointAt(0.0F, (-1893.176F), 0);
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0, (-976.8F), 0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      mathContext0.getPrecision();
      homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1424));
      HomePieceOfFurniture.Property.values();
      homeLight0.setNameVisible(true);
      homeLight0.setElevation((-907.8F));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture.Property.values();
      homeLight0.getWidth();
      homeLight0.getDepth();
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
      Integer integer0 = new Integer(662);
      homeLight0.setColor(integer0);
      homeLight0.setDescription("Supe class isn't cloneable");
      homeLight0.getDepth();
      homeLight0.getY();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
      HomePieceOfFurniture.Property.values();
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, 33);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(33, lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      homeLight0.setDescription("+%GyPC''8:xzGRUbJd");
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      float float0 = homeLight0.getWidth();
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(390.0F, float0, 0.01F);
      
      homeLight0.containsPoint(390.0F, 0, 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 33);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle(0.0F);
      homeLight0.isTexturable();
      homeLight0.containsPoint(0.0F, 0.0F, (-2093.5996F));
      homeLight1.getCurrency();
      homeLight0.setNameYOffset(0.07334131F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(2.2830648F);
      homeLight1.isTexturable();
      homeLight1.containsPoint(0L, 1503.5F, 0);
      homeLight1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      mathContext0.equals(object0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("Super class isn't cloneable", 0.0F, (-1.0F), 0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isAtLevel(level0);
      homeLight1.isBottomRightPointAt((-383.0F), 975.83527F, 641.1F);
      homeLight0.isTopLeftPointAt(0.0F, (-383.0F), (-383.0F));
      homeLight0.getPoints();
      System.setCurrentTimeMillis(324L);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-1437.0544F));
      homeLight2.isTexturable();
      homeLight2.getShininess();
      homeLight1.setName("");
      homeLight0.setShininess((Float) null);
      homeLight2.isBottomRightPointAt((-1437.0544F), 0.44251096F, (-1.0F));
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0, (-976.7625F), 0);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      double double0 = bigDecimal0.doubleValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0, double0, 0.01);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(3.4028235E38F, 2.0F, 2.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeLight0.setNameVisible(true);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setElevation(3.4028235E38F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3.4028235E38F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3.4028235E38F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(0, (-976.7625F), 0);
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      homeLight0.setDescription("Super class isn't cloneable");
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isPointAt((-428.76562F), 0, (-428.76562F));
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 18, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 18, 18, 18, 0.38584986F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.38584986F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(18.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(18.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.38584986F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(18.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(18.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(18.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.38584986F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(18.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.38584986F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(9.0F, homeLight0.getX(), 0.01F);
      assertEquals(9.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle(0.38584986F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.38584986F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(18.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(18.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(18.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.38584986F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.38584986F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(18.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.38584986F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(9.0F, homeLight0.getX(), 0.01F);
      assertEquals(9.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      
      TextStyle textStyle0 = new TextStyle(18);
      assertEquals(18.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      URLContent uRLContent1 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertNotNull(uRLContent1);
      
      float float0 = homeLight0.getNameAngle();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("Super class isn't cloneable:18", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(18, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.38584986F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(18.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(18.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(18.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.38584986F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.38584986F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(18.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.38584986F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(9.0F, homeLight0.getX(), 0.01F);
      assertEquals(9.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.38584986F, float0, 0.01F);
      assertTrue(uRLContent0.equals((Object)uRLContent1));
      assertNotSame(uRLContent0, uRLContent1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameVisible(true);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight1.setAngle((-1437.0544F));
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight2.setX(0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean0 = homeLight2.isTexturable();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean1 = homeLight2.isDoorOrWindow();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      boolean boolean2 = homeLight2.isPointAt(68.17533F, 68.17533F, (-790.7F));
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean3 = homeLight1.isTopLeftPointAt(390.0F, 0.44251096F, (-2559.8F));
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long long0 = (-1821L);
      System.setCurrentTimeMillis((-1821L));
      System.setCurrentTimeMillis((-1821L));
      String[] stringArray0 = new String[0];
      Long long1 = new Long((-1821L));
      assertEquals((-1821L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      float float0 = (-133.0F);
      Float float1 = new Float((-133.0F));
      assertEquals((-133.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigDecimal0.ulp();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.ResourceURLContent", " [}$3-m)8#cvJ", "Zk{", "", stringArray0, long1, float1, resourceURLContent0, resourceURLContent0, resourceURLContent0, 2641.3687F, (-1.0F), (-133.0F), (-1.0F), false, (LightSource[]) null, " [}$3-m)8#cvJ", (float[][]) null, "|G+};CZ", false, true, false, bigDecimal0, bigDecimal0, (String) null);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", catalogLight0.getId());
      assertEquals((-1821L), (long)catalogLight0.getCreationDate());
      assertEquals("Zk{", catalogLight0.getDescription());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-133.0F), catalogLight0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("|G+};CZ", catalogLight0.getCreator());
      assertEquals(2641.3687F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-133.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0, stringArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(catalogLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", catalogLight0.getId());
      assertEquals((-1821L), (long)catalogLight0.getCreationDate());
      assertEquals("Zk{", catalogLight0.getDescription());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-133.0F), catalogLight0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("|G+};CZ", catalogLight0.getCreator());
      assertEquals(2641.3687F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-133.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-133.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Zk{", homePieceOfFurniture0.getDescription());
      assertEquals(1320.6843F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2641.3687F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0, stringArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(homePieceOfFurniture0);
      
      float[][] floatArray0 = homePieceOfFurniture0.getPoints();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", catalogLight0.getId());
      assertEquals((-1821L), (long)catalogLight0.getCreationDate());
      assertEquals("Zk{", catalogLight0.getDescription());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-133.0F), catalogLight0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("|G+};CZ", catalogLight0.getCreator());
      assertEquals(2641.3687F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-133.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-133.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Zk{", homePieceOfFurniture0.getDescription());
      assertEquals(1320.6843F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2641.3687F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0, stringArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(floatArray0);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      boolean boolean0 = homePieceOfFurniture0.isDoorOrWindow();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", catalogLight0.getId());
      assertEquals((-1821L), (long)catalogLight0.getCreationDate());
      assertEquals("Zk{", catalogLight0.getDescription());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-133.0F), catalogLight0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("|G+};CZ", catalogLight0.getCreator());
      assertEquals(2641.3687F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-133.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-133.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Zk{", homePieceOfFurniture0.getDescription());
      assertEquals(1320.6843F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2641.3687F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      HomeTexture homeTexture0 = homePieceOfFurniture0.getTexture();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", catalogLight0.getId());
      assertEquals((-1821L), (long)catalogLight0.getCreationDate());
      assertEquals("Zk{", catalogLight0.getDescription());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-133.0F), catalogLight0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("|G+};CZ", catalogLight0.getCreator());
      assertEquals(2641.3687F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-133.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(" [}$3-m)8#cvJ", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.ResourceURLContent", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-133.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Zk{", homePieceOfFurniture0.getDescription());
      assertEquals(1320.6843F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(" [}$3-m)8#cvJ", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2641.3687F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0, stringArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY(0);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setX(0.0F);
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeTexture0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("Super class isn't cloneable");
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 18.022196F, (-1420));
      assertEquals(18.022196F, lightSource0.getZ(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1420), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1L), mathContext0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "Super class isn't cloneable", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, (-429.3588F), (-429.3588F), 2406.57F, 18.022196F, false, lightSourceArray0, (float[][]) null, "%W(}uT=1!lFqD", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.07334131F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=7 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      homeLight0.setAngle(3.4028235E38F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1.5746664F, homeLight0.getAngle(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1.5746664F, homeLight0.getAngle(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      String string1 = homeLight0.getCatalogId();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1.5746664F, homeLight0.getAngle(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals("", string1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      String string2 = homeLight0.getCurrency();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(2406.57F, catalogLight0.getHeight(), 0.01F);
      assertEquals("%W(}uT=1!lFqD", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-429.3588F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(18.022196F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-429.3588F), catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-214.6794F), homeLight0.getX(), 0.01F);
      assertEquals((-214.6794F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1.5746664F, homeLight0.getAngle(), 0.01F);
      assertEquals(18.022196F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(18.022196F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2406.57F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-429.3588F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-429.3588F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNull(string2);
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("4 h>`\"e", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals("4 h>`\"e", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("4 h>`\"e", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("4 h>`\"e", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals("4 h>`\"e", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("4 h>`\"e", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1, lightSourceArray0.length);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneabWe", "Super class isn't cloneabWe", "Super class isn't cloneabWe", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneabWe", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getId());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setShininess((Float) null);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isAtLevel((Level) null);
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneabWe", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", catalogLight0.getId());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneabWe", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyPC''8:xzGRUbJd", uRLStreamHandler0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.07334131F, 0.07334131F, 0);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.07334131F, lightSource0.getY(), 0.01F);
      assertEquals(0.07334131F, lightSource0.getZ(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Supe class isn't cloneable", "Supe class isn't cloneable", "Supe class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.07334131F, 0.07334131F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyPC''8:xzGRUbJd", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle((-1011.5011F));
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setHeight(0.07334131F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      Level level0 = new Level("Super class isn't cloneable", 1296.8927F, 0, 1296.8927F);
      assertEquals(1296.8927F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1296.8927F, level0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeLight1.isAtLevel(level0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1296.8927F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1296.8927F, level0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight1.isAtLevel(level0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1296.8927F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1296.8927F, level0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight1.getDepth();
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.07334131F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertEquals(0.036670655F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.091735825F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("Supe class isn't cloneable", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.07334131F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.07334131F, homeLight2.getDepth(), 0.01F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt(390.0F, (-180.7F), (-180.7F));
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      Float float1 = homeLight2.getShininess();
      assertEquals(0.036670655F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.091735825F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("Supe class isn't cloneable", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.07334131F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.07334131F, homeLight2.getDepth(), 0.01F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNull(float1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      Integer integer0 = homeLight2.getColor();
      assertEquals(0.036670655F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.091735825F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("Supe class isn't cloneable", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.07334131F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.07334131F, homeLight2.getDepth(), 0.01F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNull(integer0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight2.setShininess((Float) null);
      assertEquals(0.036670655F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.091735825F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("Supe class isn't cloneable", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.07334131F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.07334131F, homeLight2.getDepth(), 0.01F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.036670655F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getName());
      assertEquals("Supe class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.091735825F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.07334131F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.07334131F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight0.setLevel(level0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("+%GyPC''8:xzGRUbJd", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.07334131F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Supe class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Supe class isn't cloneable", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.07334131F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("+%GyPC''8:xzGRUbJd", catalogLight0.getCreator());
      assertEquals("Supe class isn't cloneable", catalogLight0.getDescription());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1296.8927F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Supe class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.07334131F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.036670655F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1296.8927F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1296.8927F, level0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, (-2582.2F), (-1424));
      assertEquals((-1424), lightSource0.getColor());
      assertEquals((-2582.2F), lightSource0.getZ(), 0.01F);
      assertEquals(389.26874F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals("Super class isn't cloneable");
      assertFalse(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "Super class isn't cloneable", (String) null, uRLContent0, uRLContent0, uRLContent0, 3941.4675F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", false, true, false, bigDecimal1, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeLight0.setTexture((HomeTexture) null);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeLight0.setAngle((-1424));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.2830648F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeLight0.setNameAngle(4.43375F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(4.43375F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.2830648F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      boolean boolean1 = homeLight0.intersectsRectangle(0L, 2665.095F, 3941.4675F, 2056.2378F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertEquals(3941.4675F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(4.43375F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1970.7338F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.2830648F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3941.4675F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, 0.0F, (-2892.7751F));
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneabWe", "Super class isn't cloneabWe", 0, "Super class isn't cloneabWe", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("U)2pR", "DuI0BgOVq_5", "DuI0BgOVq_5", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 2016.81F, 2.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "DuI0BgOVq_5", false, false, true, bigDecimal0, bigDecimal0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("DuI0BgOVq_5", catalogLight0.getCreator());
      assertEquals("DuI0BgOVq_5", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2016.81F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("U)2pR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DuI0BgOVq_5", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("DuI0BgOVq_5", catalogLight0.getCreator());
      assertEquals("DuI0BgOVq_5", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2016.81F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("U)2pR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DuI0BgOVq_5", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(2016.81F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("U)2pR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("DuI0BgOVq_5", homeLight0.getName());
      assertEquals(1008.405F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("DuI0BgOVq_5", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(2.0F, 1920.936F, 1.1404247E9F);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("DuI0BgOVq_5", catalogLight0.getCreator());
      assertEquals("DuI0BgOVq_5", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2016.81F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("U)2pR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DuI0BgOVq_5", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(2016.81F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("U)2pR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("DuI0BgOVq_5", homeLight0.getName());
      assertEquals(1008.405F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("DuI0BgOVq_5", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("super class isn't cloneabwe", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneabWe", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneabWe", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneabWe:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneabWe", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("DuI0BgOVq_5", catalogLight0.getCreator());
      assertEquals("DuI0BgOVq_5", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2016.81F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("U)2pR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DuI0BgOVq_5", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(2016.81F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("U)2pR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("DuI0BgOVq_5", homeLight0.getName());
      assertEquals(1008.405F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("DuI0BgOVq_5", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 3329.42F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(3329.42F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 3329.42F, 3329.42F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals(object0);
      assertFalse(boolean0);
      
      homeLight0.setNameVisible(true);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      
      double double0 = bigDecimal0.doubleValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0, double0, 0.01);
      
      homeLight0.setAngle(0.0F);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTexturable();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean3 = homeLight0.isBottomLeftPointAt(0, 3329.42F, 3.4028235E38F);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      homeLight0.setVisible(true);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean4 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0L);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, 0, 0);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      homeLight0.setName((String) null);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(6, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      homeLight0.setAngle(0.0F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, 0.0F, 390.0F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("Super class isn't cloneable", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isAtLevel(level0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight1.getDepth();
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt(0, 0, 1078.0989F);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.isNameCenterPointAt(0.0F, 0.0F, 0.0F);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle(2.2830648F);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.move(0L, 4.097873F);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setNameAngle(5220.74F);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(2.2830648F, homeLight2.getAngle(), 0.01F);
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight0.setNameVisible(false);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      homeLight0.setElevation(1.0F);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      float float0 = homeLight2.getGroundElevation();
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(2.2830648F, homeLight2.getAngle(), 0.01F);
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1629L, mathContext0);
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0M_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0M_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0M_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0M_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0M_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((short)32201, bigDecimal1.shortValue());
      assertEquals((byte) (-55), bigDecimal1.byteValue());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      Float float0 = new Float((-1510.0));
      assertEquals((-1510.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1510.0F), float1, 0.01F);
      
      homeLight0.setShininess((Float) (-1510.0F));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)93, bigDecimal0.byteValue());
      assertEquals((short)1629, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0M_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.0F), homeLight0.getShininess(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "2Hp]~$", uRLStreamHandler0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("2Hp]~$", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, 0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0, lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      
      double double0 = bigDecimal0.doubleValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0, double0, 0.01);
      
      homeLight0.setAngle(0.0F);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTexturable();
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      
      homeLight0.setWidth(2613.8596F);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(2613.8596F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(2613.8596F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean2 = homeLight0.isBottomLeftPointAt(0, 0.0F, 3.4028235E38F);
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(2613.8596F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(uRL0.getRef());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(2613.8596F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(3.4028235E38F);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3.4028235E38F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertEquals(6, lightSourceArray0.length);
      
      Level level0 = new Level("", 0, 0, 0);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3.4028235E38F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(6, lightSourceArray0.length);
      assertFalse(boolean0);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getModel();
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3.4028235E38F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(uRLContent1);
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("2Hp]~$", "2Hp]~$", "FLOOR_THICKNESS", uRLContent0, uRLContent0, uRLContent0, (-1412.05F), (-1.0F), (-1841.0999F), (-1412.05F), true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, false, false, (BigDecimal) null, (BigDecimal) null);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1412.05F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1841.0999F), homeLight1.getHeight(), 0.01F);
      assertEquals((-706.025F), homeLight1.getX(), 0.01F);
      assertEquals((-0.5F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("2Hp]~$", homeLight1.getCatalogId());
      assertEquals("FLOOR_THICKNESS", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-1412.05F), homeLight1.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("2Hp]~$", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      homeLight1.setY((-2268.78F));
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1412.05F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1841.0999F), homeLight1.getHeight(), 0.01F);
      assertEquals((-706.025F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("2Hp]~$", homeLight1.getCatalogId());
      assertEquals("FLOOR_THICKNESS", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2268.78F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-1412.05F), homeLight1.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("2Hp]~$", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setModelMirrored(false);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setAngle(0.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1412.05F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1841.0999F), homeLight1.getHeight(), 0.01F);
      assertEquals((-706.025F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("2Hp]~$", homeLight1.getCatalogId());
      assertEquals("FLOOR_THICKNESS", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2268.78F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-1412.05F), homeLight1.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("2Hp]~$", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1412.05F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-0.5F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-706.025F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals("2Hp]~$", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-1.0F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", homeLight2.getName());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight2.getElevation(), 0.01F);
      assertEquals((-1841.0999F), homeLight2.getHeight(), 0.01F);
      assertEquals((-1412.05F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1412.05F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals((-1412.05F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("FLOOR_THICKNESS", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1841.0999F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("2Hp]~$", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("2Hp]~$", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1841.0999F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("2Hp]~$", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals("2Hp]~$", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1412.05F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("FLOOR_THICKNESS", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-706.025F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      int int0 = bigDecimal0.intValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle(2.2830648F);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDepth(2.2830648F);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(2.2830648F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      URL uRL1 = MockURL.getFileExample();
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, " doesn't contain piece ", uRLStreamHandler1);
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL2, false);
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("srkqU-P]'xP\"jHCJ", resourceURLContent0, 2411.121F, 2411.121F, false);
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertEquals("srkqU-P]'xP\"jHCJ", string0);
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotNull(string0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)catalogTexture0.getImage();
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotNull(resourceURLContent1);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      
      float float0 = catalogTexture0.getWidth();
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertEquals(2411.121F, float0, 0.01F);
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      
      float float1 = catalogTexture0.getHeight();
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertEquals(2411.121F, float1, 0.01F);
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertEquals(float1, float0, 0.01F);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(2411.121F, homeTexture0.getWidth(), 0.01F);
      assertEquals(2411.121F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("srkqU-P]'xP\"jHCJ", homeTexture0.getName());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotNull(homeTexture0);
      
      homeLight0.setTexture(homeTexture0);
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.toString());
      assertEquals("some", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals("srkqU-P]'xP\"jHCJ", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(2411.121F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(2411.121F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2411.121F, homeTexture0.getWidth(), 0.01F);
      assertEquals(2411.121F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("srkqU-P]'xP\"jHCJ", homeTexture0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, 0, 0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(6, lightSourceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isDeformable();
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(":0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(6, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MathContext mathContext1 = MathContext.DECIMAL64;
      assertNotNull(mathContext1);
      assertSame(mathContext1, mathContext0);
      
      BigDecimal bigDecimal1 = new BigDecimal((long) 0, mathContext1);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("hW^{GN4Crsfb+", "1.5.0_16", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("1.5.0_16", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight2.setAngle(0.0F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("1.5.0_16", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight0.move((-2216.108F), 0.0F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2216.108F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setNameAngle(585.0F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.66376644F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      HomeLight homeLight3 = homeLight0.clone();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2216.108F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getName());
      assertEquals("hW^{GN4Crsfb+", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-2216.108F), homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertNotNull(homeLight3);
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      
      homeLight1.setMovable(true);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.66376644F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      
      Float float0 = homeLight0.getShininess();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("hW^{GN4Crsfb+", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2216.108F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(float0);
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean0 = homeLight1.isTopLeftPointAt((-2364.0398F), 0.0F, 2.2830648F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("hW^{GN4Crsfb+", catalogLight0.getId());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.66376644F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("hW^{GN4Crsfb+", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 3329.42F, (-1424));
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3329.42F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 3329.42F, 3329.42F, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, false, bigDecimal0, bigDecimal0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals(object0);
      assertFalse(boolean0);
      
      homeLight0.setNameVisible(true);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      
      double double0 = bigDecimal0.doubleValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0, double0, 0.01);
      
      homeLight0.setAngle(0.0F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTexturable();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = homeLight0.isTopRightPointAt((-3713.9783F), 0.0F, (-1019.395F));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean3 = homeLight0.isBottomLeftPointAt(0, 3329.42F, 3.4028235E38F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      homeLight0.setVisible(true);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean4 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0L);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3329.42F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3329.42F, catalogLight0.getDepth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3329.42F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1664.71F, homeLight0.getY(), 0.01F);
      assertEquals(3329.42F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1424));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setX(0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setHeight(0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, 3697.0F, 0);
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertNull(string0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt(1901.188F, 1901.188F, 1901.188F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(14, lightSourceArray0.length);
      assertTrue(boolean0);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(14, lightSourceArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle(2.2830648F);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.move(0L, 4.097873F);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setNameAngle(5220.74F);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.2830648F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight2.setMovable(true);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.2830648F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      Float float0 = homeLight1.getShininess();
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(float0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight2.isTopLeftPointAt(0.0F, (-2408.4116F), (-2364.0398F));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4.097873F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.6964293F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight2.getCatalogId());
      assertEquals(195.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.2830648F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(651.3716F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(4.2034955F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTopRightPointAt((-907.8F), 0.3926991F, (-1424));
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(4.2034955F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean1 = homeLight0.isModelMirrored();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(4.2034955F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, 0, 0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = homeLight0.getColor();
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(6, lightSourceArray0.length);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "Super clFss isn't cldneable", uRLStreamHandler0);
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(14, lightSourceArray0.length);
      assertNull(string0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[17];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-2145972398));
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "qf~eYgbK3Mn!", uRLContent0, uRLContent0, uRLContent0, 0, 1.0F, 0.44251096F, 2.0F, false, lightSourceArray0, (float[][]) null, "qf~eYgbK3Mn!", false, false, true, bigDecimal1, bigDecimal0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("qf~eYgbK3Mn!", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(1.0F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("qf~eYgbK3Mn!", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeLight0.setX(0.0F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("qf~eYgbK3Mn!", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      boolean boolean0 = homeLight0.isTexturable();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.44251096F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals("qf~eYgbK3Mn!", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(17, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("qf~eYgbK3Mn!", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("qf~eYgbK3Mn!", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getY(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("1.5.0_16", homeLight2.getName());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getHeight(), 0.01F);
      assertEquals("qf~eYgbK3Mn!", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight2.setAngle(0.13931881F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("qf~eYgbK3Mn!", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("1.5.0_16", homeLight1.getName());
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getY(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.13931881F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("1.5.0_16", homeLight2.getName());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getHeight(), 0.01F);
      assertEquals("qf~eYgbK3Mn!", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)3922, bigDecimal1.shortValue());
      assertEquals((byte)82, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getCreator());
      assertEquals("qf~eYgbK3Mn!", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.44251096F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isDeformable());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(2.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.44251096F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight3.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertEquals(2.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(1.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isMovable());
      assertFalse(homeLight3.isResizable());
      assertEquals("qf~eYgbK3Mn!", homeLight3.getDescription());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(17, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNotNull(homeLight3);
      
      // Undeclared exception!
      try { 
        homeLight3.setWidth((-1437.0544F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(389.26874F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(389.26874F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals(object0);
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 389.26874F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setNameAngle(1.0F);
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      float float0 = homeLight0.getNameAngle();
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals(389.26874F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(389.26874F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(194.63437F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(1.0F, float0, 0.01F);
      
      try { 
        Float.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "ce'nbCR,", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, 0, 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameVisible(true);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight1.setAngle(0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight2.setX(0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean0 = homeLight2.isTexturable();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertEquals("ce'nbCR,", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      homeLight0.setAngle(0.44251096F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.22125548F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.22125548F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.44251096F, homeLight3.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight3.getDescription());
      assertEquals(0.44251096F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNotNull(homeLight3);
      
      boolean boolean1 = homeLight3.isTopRightPointAt(0.44251096F, 0.44251096F, 4.2034955F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.22125548F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.22125548F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.44251096F, homeLight3.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight3.getDescription());
      assertEquals(0.44251096F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      
      homeLight3.setWidth(0.44251096F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.22125548F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.22125548F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.44251096F, homeLight3.getWidth(), 0.01F);
      assertEquals("1.5.0_16", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("ce'nbCR,", homeLight3.getDescription());
      assertEquals(0.44251096F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      
      boolean boolean2 = homeLight0.isVisible();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      homeLight0.setName("com.eteks.sweethome3d.model.HomeLight");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DEPTH;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      Integer integer0 = Integer.valueOf((-1639));
      assertEquals((-1639), (int)integer0);
      assertNotNull(integer0);
      
      homeLight1.setColor(integer0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("ce'nbCR,", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertEquals("ce'nbCR,", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals((-1639), (int)homeLight1.getColor());
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals("ce'nbCR,", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0, 0.0F, 0.0F, (-1424));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext0.equals(object0);
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      assertEquals(RoundingMode.HALF_EVEN, roundingMode0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setY(0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setNameAngle(0L);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setHeight(0.0F);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      
      Level level0 = new Level((String) null, 0.0F, (-1.0F), 0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean1 = homeLight0.isAtLevel(level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = homeLight0.isAtLevel(level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getIcon();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(uRLContent1);
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      
      float[][] floatArray0 = homeLight0.getModelRotation();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      assertSame(uRLContent0, uRLContent1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "1.5.0_16", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, true, true, bigDecimal0, bigDecimal0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setX(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTexturable();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(410.596F, (-4205.103F), (-1437.0544F));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float float0 = homeLight0.getX();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean2 = homeLight0.isTexturable();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("1.5.0_16", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 1659, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = new MathContext(1659);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 1659, 1659, 1659, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      BigDecimal bigDecimal1 = new BigDecimal(charArray0);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals((short)9, bigDecimal1.shortValue());
      assertEquals((byte)9, bigDecimal1.byteValue());
      assertEquals(1, charArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.min(bigDecimal1);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)9, bigDecimal1.shortValue());
      assertEquals((byte)9, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals(1, charArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1659.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1659.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(829.5F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(829.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getDepth();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(1659.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      
      float float1 = homeLight0.getY();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(829.5F, float1, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1659.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1659.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(829.5F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(829.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setTexture((HomeTexture) null);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1659.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1659.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(829.5F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(829.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setColor((Integer) null);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1659.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1659.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(829.5F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(829.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      BigDecimal bigDecimal3 = homeLight1.getValueAddedTax();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:1659", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals(1659, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(1659.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1659.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(829.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(829.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1659.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1659.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1659.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1659.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1659.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(829.5F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(829.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(bigDecimal3);
      assertSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 390.0F, 390.0F, 390.0F, 390.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(0, 0.0F, 0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertFalse(boolean0);
      
      Level level0 = new Level("applicationSubFolder.Mac OS X", (-1424), (-317.3717F), 0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-317.3717F), level0.getFloorThickness(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1424.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean1 = homeLight0.isAtLevel(level0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-317.3717F), level0.getFloorThickness(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1424.0F), level0.getElevation(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float0 = homeLight0.getDepth();
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertEquals(390.0F, float0, 0.01F);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(195.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(390.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertEquals(195.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(390.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      
      Float float1 = homeLight0.getShininess();
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getName());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(float1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[15];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(15, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(15, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY(0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(15, lightSourceArray0.length);
      
      homeLight0.setModelMirrored(true);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(15, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0, 0, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY(0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      homeLight0.setShininess(float0);
      assertNull(uRL0.getQuery());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle(0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      assertNull(homeTexture0);
      
      homeLight0.setTexture((HomeTexture) null);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(353.56F, (-2.4918094F), 0.0F, (-1424));
      assertEquals(353.56F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-2.4918094F), lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "4`73LQr*@^h@yh6!aO", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 49.417442F, (-1040.4769F), 3488.535F, (-2.4918094F), true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, false, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      Float float0 = homeLight0.getShininess();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNull(float0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(896.1F, 896.1F, (-1424));
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float float1 = homeLight0.getY();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertEquals((-520.23846F), float1, 0.01F);
      
      String string0 = homeLight0.getName();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2.4918094F), catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(3488.535F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(49.417442F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1040.4769F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getDescription());
      assertEquals("4`73LQr*@^h@yh6!aO", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(49.417442F, homeLight0.getWidth(), 0.01F);
      assertEquals((-520.23846F), homeLight0.getY(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2.4918094F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals((-1040.4769F), homeLight0.getDepth(), 0.01F);
      assertEquals("4`73LQr*@^h@yh6!aO", homeLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(3488.535F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(24.708721F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertEquals("4`73LQr*@^h@yh6!aO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L, mathContext0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("DpRt(`H@;&u", "v)K", (String) null, uRLContent0, uRLContent0, uRLContent0, 1379.61F, 21.1079F, 0, 390.0F, true, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.1079F, homeLight1.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1379.61F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(689.805F, homeLight1.getX(), 0.01F);
      assertEquals("v)K", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(10.55395F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight1.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle(1437.0F);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.1079F, homeLight1.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1379.61F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(689.805F, homeLight1.getX(), 0.01F);
      assertEquals("v)K", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(4.43375F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(10.55395F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight1.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTexturable();
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean1 = homeLight1.isDeformable();
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.1079F, homeLight1.getDepth(), 0.01F);
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1379.61F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(689.805F, homeLight1.getX(), 0.01F);
      assertEquals("v)K", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(4.43375F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(10.55395F, homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight1.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight0.isDoorOrWindow();
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(21.1079F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1379.61F, catalogLight0.getWidth(), 0.01F);
      assertEquals("DpRt(`H@;&u", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("v)K", catalogLight0.getName());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1379.61F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(689.805F, homeLight0.getX(), 0.01F);
      assertEquals("DpRt(`H@;&u", homeLight0.getCatalogId());
      assertEquals(10.55395F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(21.1079F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("v)K", homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[10];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0, (-1424));
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 390.0F, 390.0F, 390.0F, 390.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(390.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(390.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt(0.0F, 2627.4F, 0.0F);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setDescription((String) null);
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotSame(homeLight0, homeLight1);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean1 = homeLight1.isTopLeftPointAt(0.0F, 1.0F, (-1538.8556F));
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(390.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(390.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(390.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(390.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(390.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(390.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(390.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(195.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(390.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(390.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(390.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "C=Xrh,vZc0\t", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setElevation(0);
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("C=Xrh,vZc0\t", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "Super clFss isn't cldneable", uRLStreamHandler0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, true, false, bigDecimal0, bigDecimal0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(0.0F);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      
      Level level0 = new Level("Super clFss isn't cldneable", 0, 0, 0.0F);
      assertEquals("Super clFss isn't cldneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals("Super clFss isn't cldneable", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float float0 = homeLight0.getDepth();
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      homeLight0.setAngle(0);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isPointAt(0.0F, 0.091735825F, 2556.148F);
      assertEquals("Super clFss isn't cldneable", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals("Super clFss isn't cldneable", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super class isn't cloneable", "Super class isn't cloneable", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "Super class isn't cloneable", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0, 0, 2746.0F);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(0, (-978.07104F), 0);
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      homeLight0.setDescription("Super class isn't cloneable");
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Super class isn't cloneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("super class isn't cloneable", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("Super class isn't cloneable:0", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4 h>`\"e", "4 h>`\"e", 0, "4 h>`\"e", uRLStreamHandler0);
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("4 h>`\"e", "4 h>`\"e", "4 h>`\"e", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "4 h>`\"e", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("4 h>`\"e", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("4 h>`\"e", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("4 h>`\"e", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("4 h>`\"e", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("4 h>`\"e", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("4 h>`\"e", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("4 h>`\"e", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("4 h>`\"e", homeLight1.getName());
      assertEquals("4 h>`\"e", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homeLight1.setColor(integer0);
      assertEquals("4 h>`\"e:0", uRL0.getAuthority());
      assertEquals("4 h>`\"e", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("4 h>`\"e", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("4 h>`\"e", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("4 h>`\"e", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("4 h>`\"e", catalogLight0.getCreator());
      assertEquals("4 h>`\"e", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("4 h>`\"e", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("4 h>`\"e", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("4 h>`\"e", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("4 h>`\"e", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("4 h>`\"e", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("4 h>`\"e", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("4 h>`\"e", homeLight1.getName());
      assertEquals("4 h>`\"e", homeLight1.getDescription());
      assertEquals(0, (int)homeLight1.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("1.5.0_16", "", "", uRLContent0, uRLContent0, uRLContent0, 0.44251096F, 0.44251096F, (-1437.0544F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameVisible(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight1.setAngle((-1437.0544F));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight1.setDescription("qN@Zk&oV 4I");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals("qN@Zk&oV 4I", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      boolean boolean0 = homeLight2.isTexturable();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      Float float0 = homeLight2.getShininess();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(float0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight1.setName("");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.22125548F, homeLight1.getY(), 0.01F);
      assertEquals(0.22125548F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(1.794992F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight1.getDepth(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getCatalogId());
      assertEquals("qN@Zk&oV 4I", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.44251096F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1437.0544F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight0.setShininess((Float) null);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean1 = homeLight2.isBottomRightPointAt((-1437.0544F), 0.44251096F, (-1.0F));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean2 = homeLight2.isModelMirrored();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean3 = homeLight2.isNameVisible();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.44251096F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.44251096F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1437.0544F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("1.5.0_16", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.44251096F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getX(), 0.01F);
      assertEquals(0.22125548F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1437.0544F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals((-1437.0544F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("1.5.0_16", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.44251096F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.22125548F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.22125548F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.44251096F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("v5^j]^,gbKx7zO", "v5^j]^,gbKx7zO", (-1), "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-1), (-1), 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setModelMirrored(true);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.move((-1), (-2892.7751F));
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(194.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-2893.2751F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      homeLight0.setAngle(0.0F);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(194.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-2893.2751F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isTopRightPointAt((-1), (-1), 0.3926991F);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(194.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-2893.2751F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(390.0F, 0.0F, 0.0F);
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(194.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-2893.2751F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = homeLight0.isModelMirrored();
      assertEquals("v5^j]^,gbKx7zO", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("v5^j]^,gbKx7zO", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("v5^j]^,gbkx7zo", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(194.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-2893.2751F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      MathContext mathContext1 = MathContext.DECIMAL64;
      assertNotNull(mathContext1);
      assertSame(mathContext1, mathContext0);
      
      BigDecimal bigDecimal1 = new BigDecimal(0L, mathContext0);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mathContext1.equals(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(boolean0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(mathContext1, mathContext0);
      
      CatalogLight catalogLight1 = new CatalogLight("+%GyP'8:xzGRUbJdd", "+%GyP'8:xzGRUbJdd", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, (-1424), 2623.0F, 390.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal1, bigDecimal0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals(390.0F, catalogLight1.getHeight(), 0.01F);
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight1.getId());
      assertEquals("1.5.0_16", catalogLight1.getDescription());
      assertFalse(catalogLight1.isModifiable());
      assertNull(catalogLight1.getCurrency());
      assertEquals("+%GyP'8:xzGRUbJdd", catalogLight1.getName());
      assertNull(catalogLight1.getCreationDate());
      assertEquals("", catalogLight1.getCreator());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertEquals(2623.0F, catalogLight1.getDepth(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isProportional());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals((-1424.0F), catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotNull(catalogLight1);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      homeLight1.setAngle((-1424));
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(195.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(2.2830648F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(390.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setNameAngle(0.0F);
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertSame(mathContext0, mathContext1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, 0, 0);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float float0 = homeLight0.getNameAngle();
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals(":0", uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(6, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Super clFss isn't cldneable", "Super clFss isn't cldneable", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super clFss isn't cldneable", "Super clFss isn't cldneable", "Super clFss isn't cldneable", uRLContent0, uRLContent0, uRLContent0, 0, 0, 0, 0, false, lightSourceArray0, (float[][]) null, "Super clFss isn't cldneable", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(3, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals((byte)110, bigDecimal1.byteValue());
      assertEquals(3, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("Super clFss isn't cldneable", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Super clFss isn't cldneable:0", uRL0.getAuthority());
      assertEquals("+%GyP'8:xzGRUbJdd", uRL0.getFile());
      assertEquals("super clfss isn't cldneable", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("Super clFss isn't cldneable", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("Super clFss isn't cldneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Super clFss isn't cldneable", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("Super clFss isn't cldneable", homeLight0.getName());
      assertEquals(3, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "Super class isn't cloneable", uRLStreamHandler0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[20];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(390.0F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1424), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertEquals(20, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(20, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=16 roundingMode=HALF_EVEN", string0);
      assertNotNull(string0);
      
      homeLight0.setAngle(0.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(20, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, 0.0F, 390.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(20, lightSourceArray0.length);
      assertTrue(boolean0);
      
      homeLight0.setDepth(0.0F);
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(20, lightSourceArray0.length);
      
      float float0 = homeLight0.getAngle();
      assertEquals("2Hp]~$", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("Super class isn't cloneable", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("2hp]~$", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("Super class isn't cloneable", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("2Hp]~$:0", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(390.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("1.5.0_16", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(390.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(195.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(20, lightSourceArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("2Hp]~$", "2Hp]~$", 0, "+%GyP'8:xzGRUbJdd", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(390.0F, 0.0F, 0.0F, (-1424));
      lightSourceArray0[0] = lightSource0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.move(0, (-2892.7751F));
      homeLight0.isTexturable();
      homeLight0.setHeight(2119.9739F);
      homeLight0.getModelRotation();
      homeLight0.clone();
      assertEquals((-2892.7751F), homeLight0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource lightSource0 = new LightSource(0, (-1378.5662F), 6.073281F, 809);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(2672L, mathContext0);
      Object object0 = new Object();
      mathContext0.equals(uRLContent0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      mathContext0.getRoundingMode();
      CatalogLight catalogLight0 = new CatalogLight("1.5U0_16", "2Hp]~$", "+%GyP'8:xzGRUbJdd", uRLContent0, uRLContent0, uRLContent0, 194.31F, 0.0F, 6.073281F, 0, false, lightSourceArray0, (float[][]) null, "+%GyP'8:xzGRUbJdd", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0L);
      homeLight0.setX(0);
      homeLight0.isTexturable();
      homeLight0.setWidth(6.073281F);
      homeLight0.isDoorOrWindow();
      homeLight0.setNameYOffset((-2850.0F));
      homeLight0.clone();
      assertEquals(6.073281F, homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", (-1), "Super class isn't cloneable", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[13];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", (String) null, "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-1), (-1), 0.3926991F, true, lightSourceArray0, (float[][]) null, "1.5.0_16", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.5F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setHeight(390.0F);
      homeLight1.setAngle(0.3926991F);
      homeLight0.setNameYOffset((-1));
      homeLight0.getDepth();
      homeLight0.getY();
      HomePieceOfFurniture.Property.values();
      homeLight0.getAngle();
      homeLight1.clone();
      assertEquals(0.3926991F, homeLight1.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(8L, mathContext0);
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", uRLContent0, uRLContent0, uRLContent0, 390.0F, (-0.3826592F), (-0.3826592F), 0.0F, false, lightSourceArray0, (float[][]) null, "1.5.0_16", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(651.3716F);
      homeLight0.setNameYOffset(33.0F);
      homeLight0.isNameCenterPointAt(8L, (-0.3826592F), 390.0F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getIcon();
      assertEquals(33.0F, homeLight0.getNameYOffset(), 0.01F);
  }
}
