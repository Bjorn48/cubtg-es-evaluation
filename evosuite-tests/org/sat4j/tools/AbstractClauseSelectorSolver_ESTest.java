/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:12:00 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractClauseSelectorSolver_ESTest extends AbstractClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(10, 0, 0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      vecInt0.shrinkTo(3567);
      fullClauseSelectorSolver0.addControlableClause(vecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>((ModelIterator) null);
      groupClauseSelectorSolver0.internalState();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<ManyCore<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<MinOneDecorator>>(manyCore0, false);
      fullClauseSelectorSolver0.discardLastestVar();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      boolean boolean0 = groupClauseSelectorSolver0.isSatisfiable(false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, (SolutionFoundListener) null);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(modelIteratorToSATAdapter0, vecInt0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      boolean boolean0 = groupClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, (SolutionFoundListener) null);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      int int0 = negationDecorator0.createNewVar(vecInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      VecInt vecInt0 = new VecInt(3567);
      int int0 = fullClauseSelectorSolver0.createNewVar(vecInt0);
      assertEquals(1, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver0);
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      negationDecorator0.clearDecorated();
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3567);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(mixedDataStructureDanielHT0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(1017.3, 20);
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.createNewVar(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(0);
      vecInt0.shrinkTo(3567);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, 0L, (SolutionFoundListener) null);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        negationDecorator0.createNewVar(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, (SolutionFoundListener) null);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(modelIteratorToSATAdapter0, vecInt0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      boolean boolean0 = groupClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0, 0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(false).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      vecInt0.shrinkTo(3567);
      fullClauseSelectorSolver0.addControlableClause(vecInt0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, (SolutionFoundListener) null);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(modelIteratorToSATAdapter0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      boolean boolean0 = groupClauseSelectorSolver0.isSatisfiable(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      vecInt0.growTo(1, 4058);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, (SolutionFoundListener) null);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        negationDecorator0.createNewVar(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver0);
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      try { 
        negationDecorator0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>((SingleSolutionDetector) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<ManyCore<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<MinOneDecorator>>(manyCore0, false);
      fullClauseSelectorSolver0.externalState();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0, true);
      VecInt vecInt0 = new VecInt(3567);
      vecInt0.shrinkTo(3567);
      fullClauseSelectorSolver0.addControlableClause(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0, 0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(subModelIterator0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, 0, checkMUSSolutionListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator1 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      negationDecorator1.createNewVar(vecInt0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      try { 
        fullClauseSelectorSolver0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }
}
