/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:38:22 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[6];
      vecInt0.pop();
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 32);
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[5];
      intArray0[2] = (-2834);
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2834
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[4];
      intArray0[2] = 110;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(2325).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      backbone0.compute((ISolver) negationDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(subModelIterator0).nVars();
      doReturn((int[]) null).when(subModelIterator0).primeImplicant();
      Backbone.instance((IBackboneProgressListener) null, false);
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[0];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(subModelIterator0).nVars();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      backbone0.compute((ISolver) negationDecorator0, intArray0, (IVecInt) vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(1408);
      int[] intArray0 = new int[4];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(2325).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      IVecInt iVecInt1 = backbone0.compute((ISolver) negationDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      backbone0.compute(iSolver0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertEquals(2, backbone0.getNumberOfSatCalls());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(120);
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(vecInt0, 2325);
      int[] intArray0 = new int[3];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(constr0).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(16).when(subModelIterator0).nVars();
      doReturn(true).when(subModelIterator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      backbone0.compute((ISolver) negationDecorator0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone.bb();
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, (IVecInt) null, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.clone();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(iVecInt0, 2325);
      constr0.canBePropagatedMultipleTimes();
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 3213;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(constr0, (IConstr) null).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(18, 3963).when(subModelIterator0).nVars();
      doReturn(false, false).when(subModelIterator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      IVecInt iVecInt1 = backbone0.compute((ISolver) negationDecorator0, intArray0, iVecInt0);
      assertEquals(1, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Backbone backbone0 = Backbone.ibb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-160)).when(subModelIterator0).nVars();
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      Backbone backbone0 = Backbone.instance();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -160
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[3];
      intArray0[2] = 3213;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(18, 0).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3213
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.clone();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(iVecInt0, 2325);
      constr0.canBePropagatedMultipleTimes();
      constr0.size();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2325;
      intArray0[3] = 2325;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(2325, 0).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2325
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Backbone backbone0 = Backbone.ibb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Backbone backbone0 = Backbone.instance();
      dimacsStringSolver0.newVar((-70));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -70
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[4];
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Backbone backbone0 = Backbone.instance();
      VecInt vecInt0 = new VecInt(1);
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[5];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-2417)).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -2417
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      vecInt0.shrinkTo((-2615));
      Backbone backbone0 = Backbone.ibb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Backbone backbone0 = Backbone.instance();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      try { 
        backbone0.compute((ISolver) dimacsOutputSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[7];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      subModelIteratorArray0[0] = subModelIterator0;
      subModelIteratorArray0[1] = subModelIterator0;
      subModelIteratorArray0[2] = subModelIterator0;
      subModelIteratorArray0[3] = subModelIterator0;
      subModelIteratorArray0[4] = subModelIterator0;
      subModelIteratorArray0[5] = subModelIterator0;
      subModelIteratorArray0[6] = subModelIterator0;
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Backbone backbone0 = Backbone.ibb();
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(subModelIterator0).nVars();
      doReturn((int[]) null).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Backbone backbone0 = Backbone.ibb();
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      VecInt vecInt0 = new VecInt(1567);
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(subModelIterator0).nVars();
      doReturn((int[]) null).when(subModelIterator0).primeImplicant();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      dimacsStringSolver0.realNumberOfVariables();
      dimacsStringSolver0.nextFreeVarId(true);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, 0, solutionFoundListener0);
      Backbone backbone0 = Backbone.bb();
      //  // Unstable assertion: assertEquals(5, backbone0.getNumberOfSatCalls());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0, (IVecInt) readOnlyVecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(0);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt1, 0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      VecInt vecInt2 = new VecInt(0);
      Backbone backbone0 = Backbone.instance();
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, (IVecInt) vecInt2, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      IConstr iConstr0 = FakeConstr.instance();
      int[] intArray0 = new int[5];
      intArray0[2] = 4;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(iConstr0, (IConstr) null).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(4, 573).when(subModelIterator0).nVars();
      doReturn(false, false).when(subModelIterator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      backbone0.compute((ISolver) subModelIterator0, intArray0);
      assertEquals(2, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      vecInt0.push(10);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 12);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(subModelIterator0).nVars();
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      Backbone backbone0 = Backbone.instance();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(subModelIterator0).nVars();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, 1905L, checkMUSSolutionListener0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      IConstr iConstr0 = FakeConstr.instance();
      int[] intArray0 = new int[5];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(iConstr0).when(subModelIterator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(4, 573).when(subModelIterator0).nVars();
      doReturn(false).when(subModelIterator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn(intArray0).when(subModelIterator0).primeImplicant();
      backbone0.compute((ISolver) subModelIterator0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(subModelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) negationDecorator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
  }
}
