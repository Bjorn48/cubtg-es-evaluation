/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:36:28 GMT 2019
 */

package org.sat4j.minisat.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveLearning_ESTest extends ActiveLearning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      NegationDecorator<OptToSatAdapter> negationDecorator0 = (NegationDecorator<OptToSatAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<NegationDecorator<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<NegationDecorator<OptToSatAdapter>>(negationDecorator0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      boolean boolean0 = activeLearning0.learningCondition(learntWLClause0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      SolverStats solverStats0 = new SolverStats();
      Solver<CardinalityDataStructureYanMin> solver0 = (Solver<CardinalityDataStructureYanMin>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(mixedDataStructureDanielWL0).when(solver0).getDSFactory();
      doReturn(naturalStaticOrder0).when(solver0).getOrder();
      doReturn(solverStats0).when(solver0).getStats();
      doReturn((ILits) null).when(solver0).getVocabulary();
      activeLearning0.setSolver(solver0);
      VecInt vecInt0 = new VecInt(32, 1176);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = activeLearning0.learningCondition(learntWLClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      activeLearning0.setLimit(1176);
      int int0 = activeLearning0.getLimit();
      assertEquals(1176, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      activeLearning0.setLimit((-1565));
      int int0 = activeLearning0.getLimit();
      assertEquals((-1565), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-839.8317756));
      double double0 = activeLearning0.getActivityPercent();
      assertEquals((-839.8317756), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      // Undeclared exception!
      try { 
        activeLearning0.setSolver((Solver<CardinalityDataStructureYanMin>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      VecInt vecInt0 = new VecInt(32, 1176);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(learntWLClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, (RestartStrategy) null);
      VecInt vecInt0 = new VecInt(11, (-932));
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(learntWLClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -466
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      SolverStats solverStats0 = new SolverStats();
      Solver<CardinalityDataStructureYanMin> solver0 = (Solver<CardinalityDataStructureYanMin>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(mixedDataStructureDanielWL0).when(solver0).getDSFactory();
      doReturn(naturalStaticOrder0).when(solver0).getOrder();
      doReturn(solverStats0).when(solver0).getStats();
      doReturn((ILits) null).when(solver0).getVocabulary();
      activeLearning0.setSolver(solver0);
      activeLearning0.setActivityPercent((-600));
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).size();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      boolean boolean0 = activeLearning0.learningCondition(learntWLClause0);
      assertEquals((-600.0), activeLearning0.getActivityPercent(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      int int0 = activeLearning0.getLimit();
      assertEquals(0, int0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      String string0 = activeLearning0.toString();
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.95, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      activeLearning0.setOrder(subsetVarOrder0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }
}
