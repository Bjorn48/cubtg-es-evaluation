/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:45:40 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SimplificationType;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.SearchListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1461);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1461, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1461;
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1461, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      
      fixedLengthLearning0.setSolver(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1461, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      
      intArray0[1] = 1461;
      intArray0[2] = 1461;
      intArray0[3] = 1461;
      intArray0[4] = 1461;
      intArray0[5] = 1461;
      searchParams0.setInitConflictBound(1461);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1461, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      intArray0[6] = 1461;
      intArray0[7] = 1461;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RestartStrategy restartStrategy0 = null;
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1461, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        solver1.isSatisfiable(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1461
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      assertNotNull(searchParams0);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double0, 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int0);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double1, 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(double1, double0, 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int1);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertTrue(int1 == int0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      varOrderHeap0.assignLiteral(6);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1438.37816070107);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1438.37816070107, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Glucose21Restarts glucose21Restarts1 = (Glucose21Restarts)solver0.getRestartStrategy();
      assertNotNull(glucose21Restarts1);
      assertSame(glucose21Restarts1, glucose21Restarts0);
      assertSame(glucose21Restarts0, glucose21Restarts1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, glucose21Restarts1);
      assertNotNull(solver1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1438.37816070107, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver1.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, noRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      IOrder iOrder0 = mock(IOrder.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c ";
      stringArray0[1] = "c ";
      stringArray0[2] = "c ";
      stringArray0[3] = "c ";
      stringArray0[4] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      searchParams0.setClaDecay(967.1935);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getClaDecay();
      assertEquals(967.1935, double0, 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("c ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("c ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      PureOrder pureOrder0 = new PureOrder(32);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double1, 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      
      // Undeclared exception!
      try { 
        solver0.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
      assertNotNull(fixedLengthLearning0);
      assertEquals(298, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams(298, 298);
      assertNotNull(searchParams0);
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap1, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.nVars());
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      solver1.setLogger(mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver1, solver0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver1.newVar());
      assertEquals(10, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(1000.0, 1000.0, 1000.0, (-2141));
      assertNotNull(searchParams0);
      assertEquals(1000.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2141), searchParams0.getInitConflictBound());
      assertEquals(1000.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.setVarDecay(1000.0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      searchParams0.setConflictBoundIncFactor(0.999);
      assertEquals(1000.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2141), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000.0, searchParams0.getVarDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incDecisions();
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      lubyRestarts0.init(searchParams1, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      lubyRestarts0.newConflict();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1000.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2141), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      boolean boolean0 = solver0.isSolverKeptHot();
      assertFalse(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1000.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2141), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      assertNotNull(searchParams0);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double0, 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int0);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double1, 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int1);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2278);
      intArray0[1] = (-2278);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {(-2278), (-2278), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RestartStrategy restartStrategy0 = null;
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning1 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {(-2278), (-2278), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning1, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {(-2278), (-2278), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2278
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      negativeLiteralSelectionStrategy0.assignLiteral((-496));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        solver1.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      SearchParams searchParams2 = new SearchParams(0);
      assertNotNull(searchParams2);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotEquals(double1, double0, 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMin>(426);
      assertNotNull(percentLengthLearning2);
      assertEquals(426, percentLengthLearning2.getLimit());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning2, cardinalityDataStructureYanMin0, searchParams2, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(426, percentLengthLearning2.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      
      NoRestarts noRestarts1 = (NoRestarts)solver2.getRestartStrategy();
      assertNotNull(noRestarts1);
      assertNotSame(searchParams0, searchParams2);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams2, searchParams0);
      assertSame(noRestarts1, noRestarts0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.nVars());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(426, percentLengthLearning2.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning2, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(426, percentLengthLearning2.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.equals((Object)solver2));
      
      solver2.setLogger(iLogAble0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(searchParams0, searchParams2);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(solver2, solver3);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(426, percentLengthLearning2.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(7, solver2.nVars());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(solver2.equals((Object)solver3));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      
      int int0 = solver0.newVar((-3224));
      assertEquals((-3224), int0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals((-3224), solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      
      solver0.cancelUntilTrailLevel((-1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals((-3224), solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-3224));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-3224), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      // Undeclared exception!
      try { 
        solver1.truthValue((-1337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2675
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1495);
      assertNotNull(searchParams0);
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1495;
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      fixedLengthLearning0.setSolver(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      intArray0[1] = 1495;
      intArray0[2] = 1495;
      intArray0[3] = 1495;
      intArray0[4] = 1495;
      intArray0[5] = 1495;
      searchParams0.setInitConflictBound(1495);
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      intArray0[6] = 1495;
      intArray0[7] = 1495;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertArrayEquals(new int[] {1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495}, intArray0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(8, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1495, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertArrayEquals(new int[] {1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1495, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1495, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.equals((Object)solver0));
      
      // Undeclared exception!
      try { 
        solver2.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1495
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      // Undeclared exception!
      try { 
        solver1.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, tabuListDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      solver0.setVerbose(false);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.setLearner(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      
      int int0 = solver1.nAssigns();
      assertEquals(0, int0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      searchParams0.setVarDecay((-603.839));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-603.839), searchParams0.getVarDecay(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>(learningStrategy0, (ClausalDataStructureWL) null, searchParams0, tabuListDecorator0, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      searchParams0.setClaDecay((-962.14));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      assertNotNull(fixedLengthLearning0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertNotNull(constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(180);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(180, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      fixedLengthLearning1.setMaxLength(0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-918.19), Integer.MIN_VALUE);
      assertNotNull(searchParams1);
      assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver0));
      
      LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addConstr(constr0);
      assertNotNull(learntWLClause0);
      assertSame(learntWLClause0, constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(solver0, solver2);
      assertSame(constr0, learntWLClause0);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertFalse(solver0.equals((Object)solver2));
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
      assertNotNull(fixedLengthLearning2);
      assertEquals(180, fixedLengthLearning2.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      cardinalityDataStructureYanMin0.setUnitPropagationListener(solver2);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver2, solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(11, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(12, solver2.newVar());
      assertEquals(11, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver0));
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver3);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      assertEquals(180, fixedLengthLearning2.getMaxLength());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams1, naturalStaticOrder1, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.nConstraints());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(180, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      // Undeclared exception!
      try { 
        solver4.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = varOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      varOrderHeap1.setLits((ILits) null);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertNotNull(arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertSame(arminRestarts0, arminRestarts1);
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, randomWalkDecorator0, arminRestarts1);
      assertNotNull(solver1);
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      FullClauseSelectorSolver<Solver<CardinalityDataStructure>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<CardinalityDataStructure>>((Solver<CardinalityDataStructure>) null, true);
      assertNotNull(fullClauseSelectorSolver0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      VecInt vecInt0 = (VecInt)fullClauseSelectorSolver0.getLastClause();
      assertNotNull(vecInt0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      // Undeclared exception!
      try { 
        statisticsSolver0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(70.6311681);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(1);
      assertNotNull(pureOrder0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      pureOrder0.setVarDecay(1);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
      assertNotNull(tabuListDecorator0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      
      solver1.dsfactory = mixedDataStructureDanielHT0;
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      
      vecInt0.set(1, (-5676));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.addParity(vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      solver0.stop();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2824);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2824, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(2824, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2824);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2824, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver1.addAllClauses(vec0);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(1094);
      assertNotNull(fixedLengthLearning1);
      assertEquals(1094, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver2);
      assertEquals(1094, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      solver2.registerLiteral(2824);
      assertEquals(1094, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2825, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(2826, solver2.newVar());
      assertEquals(2825, solver2.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      solver0.stop();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(7);
      assertNotNull(percentLengthLearning1);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(percentLengthLearning1, percentLengthLearning0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      solver2.sortOnActivity();
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      lubyRestarts0.init(searchParams0, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.setVerbose(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams1 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      assertNotNull(searchParams1);
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      double double0 = searchParams1.getConflictBoundIncFactor();
      assertEquals((-2328.61), double0, 0.01);
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals((-2278), int0);
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      double double1 = searchParams1.getConflictBoundIncFactor();
      assertEquals((-2328.61), double1, 0.01);
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      int int1 = searchParams1.getInitConflictBound();
      assertEquals((-2278), int1);
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertTrue(int1 == int0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-2328.61), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1438.37816070107, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2278), searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      // Undeclared exception!
      try { 
        solver1.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      searchParams0.setClaDecay(967.1935);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getClaDecay();
      assertEquals(967.1935, double0, 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("c ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("c ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      PureOrder pureOrder0 = new PureOrder(32);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double1, 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      solver0.clearLearntClauses();
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      int int0 = solver1.getTimeout();
      assertEquals(2147483, int0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-1479.2587900732));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1479.2587900732), activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1479.2587900732), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.suggestNextLiteralToBranchOn((-3224));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      searchParams0.setClaDecay(967.1935);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      assertNotNull(fixedLengthLearning1);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(128);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertNotNull(constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, glucose21Restarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      
      fixedLengthLearning0.setMaxLength(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      // Undeclared exception!
      try { 
        solver1.assume((-2856));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotEquals(double1, double0, 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      
      solver3.clearLearntClauses();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver2.setSimplifier(simplificationType0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
      assertNotNull(fixedLengthLearning0);
      assertEquals(298, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(298, 298);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 1000;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      int int1 = 2824;
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams2, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver0.addClauseOnTheFly((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      noRestarts0.onRestart();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      pureOrder0.setVarDecay(0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getClaDecay();
      assertEquals(0.999, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.nVars());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertNotSame(searchParams0, searchParams2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      percentLengthLearning1.setLimit(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver2.setSimplifier(simplificationType0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(7, solver2.nVars());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(searchParams0, searchParams2);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(constr0.simplify());
      assertEquals(0, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      
      // Undeclared exception!
      try { 
        solver0.record(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(4);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, tabuListDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(4, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      boolean boolean0 = solver0.isSolverKeptHot();
      assertFalse(boolean0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3507.1437325824877), 14.01867108038065, 14.01867108038065, 384);
      assertNotNull(searchParams0);
      assertEquals(14.01867108038065, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3507.1437325824877), searchParams0.getVarDecay(), 0.01);
      assertEquals(384, searchParams0.getInitConflictBound());
      assertEquals(14.01867108038065, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      IOrder iOrder0 = solver0.getOrder();
      assertNotNull(iOrder0);
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts1);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      
      glucose21Restarts1.onRestart();
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, searchParams0, iOrder0, glucose21Restarts1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver1.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      Lits lits0 = (Lits)solver0.voc;
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(2, lits0.nVars());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-3224), 1000);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, miniSATRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver2.setNeedToReduceDB(true);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver2.unset((-3224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3224
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(100.0);
      assertNotNull(activeLearning0);
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int int0 = 4;
      SearchParams searchParams0 = new SearchParams(4);
      assertNotNull(searchParams0);
      assertEquals(4, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      naturalStaticOrder0.setPhaseSelectionStrategy(userFixedPhaseSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      naturalStaticOrder0.undo(4);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, glucose21Restarts0, (ILogAble) null);
      assertNotNull(solver0);
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertNotNull(iVecInt0);
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
      assertNotNull(fixedLengthLearning0);
      assertEquals(298, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(298, 298);
      assertNotNull(searchParams0);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 1000;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      int int1 = 2824;
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams2, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      SearchParams searchParams3 = solver0.getSearchParams();
      assertNotNull(searchParams3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams3, searchParams0);
      assertSame(searchParams3, searchParams2);
      assertNotSame(searchParams2, searchParams0);
      assertSame(searchParams2, searchParams3);
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2824, searchParams3.getInitConflictBound());
      assertEquals(0.999, searchParams3.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams3.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams3.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams3.equals((Object)searchParams1));
      assertFalse(searchParams3.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin0, searchParams2, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver1.addClauseOnTheFly((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = new Integer(2824);
      assertEquals(2824, double0, 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2824);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2824, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(2824, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2824);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2824, lubyRestarts0.getFactor());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver1.addAllClauses(vec0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(32);
      assertNotNull(fixedLengthLearning1);
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver2);
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      solver2.registerLiteral(2824);
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2825, solver2.nVars());
      assertEquals(2826, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2825, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      // Undeclared exception!
      try { 
        solver0.addExactly((IVecInt) null, 1094);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotEquals(double1, double0, 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(2, solver3.newVar());
      
      solver3.clearLearntClauses();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(3, solver3.nVars());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(2824, int0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      int int1 = searchParams1.getInitConflictBound();
      assertEquals(100, int1);
      assertNotSame(searchParams1, searchParams0);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(int1 == int0);
      
      lubyRestarts0.init(searchParams1, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams1, searchParams0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.usage();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      solver0.unset(32);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams1, searchParams0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(searchParams1.equals((Object)searchParams0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      LearningStrategy<CardinalityDataStructure> learningStrategy0 = null;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(1000);
      assertNotNull(percentLengthLearning1);
      assertEquals(1000, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1000, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1000, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, (IOrder) null, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      RestartStrategy restartStrategy0 = null;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      
      solver0.cancelUntilTrailLevel((-1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      // Undeclared exception!
      try { 
        varOrderHeap1.undo(3689);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-3406));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      
      solver0.cancelUntil(27);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning1 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      
      miniSATLearning1.setDataStructureFactory(clausalDataStructureWL0);
      assertNotSame(miniSATLearning1, miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver1.fixedSize(235);
      assertNotNull(learnedConstraintsDeletionStrategy0);
      assertNotSame(miniSATLearning0, miniSATLearning1);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(miniSATLearning0.equals((Object)miniSATLearning1));
      
      // Undeclared exception!
      try { 
        solver1.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      searchParams0.setClaDecay(967.1935);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      assertNotNull(fixedLengthLearning1);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(128);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertNotNull(constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning1.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(128);
      assertNotNull(percentLengthLearning0);
      assertEquals(128, percentLengthLearning0.getLimit());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      SearchParams searchParams2 = new SearchParams(0, 967.1935, 508.847114, 128);
      assertNotNull(searchParams2);
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams2, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      MUSLauncher mUSLauncher1 = (MUSLauncher)solver1.getLogger();
      assertNotNull(mUSLauncher1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertSame(mUSLauncher0, mUSLauncher1);
      assertSame(mUSLauncher1, mUSLauncher0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams2, naturalStaticOrder0, lubyRestarts0, mUSLauncher1);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(128, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver2.getRestartStrategy();
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertSame(mUSLauncher0, mUSLauncher1);
      assertSame(mUSLauncher1, mUSLauncher0);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(128, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, naturalStaticOrder1, lubyRestarts1);
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(128, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(9, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertFalse(solver3.equals((Object)solver2));
      
      solver2.setLogger(mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertSame(mUSLauncher0, mUSLauncher1);
      assertSame(mUSLauncher1, mUSLauncher0);
      assertNotSame(solver2, solver3);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(128, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(128, searchParams2.getInitConflictBound());
      assertEquals(967.1935, searchParams2.getClaDecay(), 0.01);
      assertEquals(508.847114, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver2.equals((Object)solver3));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(70.6311681);
      assertNotNull(activeLearning0);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(1);
      assertNotNull(pureOrder0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      pureOrder0.setVarDecay(1);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
      assertNotNull(tabuListDecorator0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      
      solver1.dsfactory = mixedDataStructureDanielHT0;
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      vecInt0.set(1, (-5676));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.addParity(vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(clausalDataStructureWL0).getVocabulary();
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy1 = (RandomLiteralSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy1);
      assertSame(randomLiteralSelectionStrategy0, randomLiteralSelectionStrategy1);
      assertSame(randomLiteralSelectionStrategy1, randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy1.toString());
      
      randomLiteralSelectionStrategy1.updateVar(0);
      assertSame(randomLiteralSelectionStrategy0, randomLiteralSelectionStrategy1);
      assertSame(randomLiteralSelectionStrategy1, randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy1.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy1);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-924));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-924), searchParams0.getInitConflictBound());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-924), searchParams0.getInitConflictBound());
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(70.6311681);
      assertNotNull(activeLearning0);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(1);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      
      pureOrder0.setVarDecay(1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt0, true);
      assertTrue(boolean1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(70.6311681, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      int int0 = (-2107);
      vecInt0.set(1, (-2107));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.addParity(vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(2);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      boolean boolean0 = solver0.isVerbose();
      assertFalse(boolean0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      Constr constr0 = solver1.propagate();
      assertNull(constr0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      // Undeclared exception!
      try { 
        solver2.toString((String) null);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setClaDecay((-962.14));
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      assertNotNull(fixedLengthLearning0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(2071);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertNotNull(constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(180);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(180, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      fixedLengthLearning1.setMaxLength(0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      boolean boolean0 = solver1.assume(180);
      assertTrue(boolean0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(1, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      searchParams0.setInitConflictBound(32);
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      // Undeclared exception!
      try { 
        solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotEquals(double1, double0, 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      
      solver3.clearLearntClauses();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
      assertNotNull(solver4);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.nConstraints());
      
      int int1 = solver4.getTimeout();
      assertEquals(2147483, int1);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(4, solver4.newVar());
      assertEquals(3, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      solver0.stop();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(7);
      assertNotNull(percentLengthLearning1);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(percentLengthLearning1, percentLengthLearning0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(miniSATLearning1, cardinalityDataStructure0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      Lbool lbool0 = solver2.truthValue(7);
      assertNotNull(lbool0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("U", lbool0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(2921.823);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null, (ILogAble) null);
      // Undeclared exception!
      try { 
        solver3.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver2);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver2.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      searchParams0.setClaDecay((-962.14));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      assertNotNull(fixedLengthLearning0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertNotNull(constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(180);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(180, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      fixedLengthLearning1.setMaxLength(0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-962.14), 0);
      assertNotNull(searchParams1);
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals((-962.14), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals((-962.14), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(8, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(7, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver0));
      
      LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addConstr(constr0);
      assertNotNull(learntWLClause0);
      assertSame(learntWLClause0, constr0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(solver0, solver2);
      assertSame(constr0, learntWLClause0);
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(125, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertFalse(solver0.equals((Object)solver2));
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
      assertNotNull(fixedLengthLearning2);
      assertEquals(180, fixedLengthLearning2.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver3);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      assertEquals((-962.14), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(180, fixedLengthLearning2.getMaxLength());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(searchParams1.equals((Object)searchParams0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      SimplificationType simplificationType0 = SimplificationType.NO_SIMPLIFICATION;
      solver1.setSimplifier(simplificationType0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-496);
      intArray0[1] = (-496);
      intArray0[2] = 3;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {(-496), (-496), 3}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      assertNotNull(vecInt1);
      assertArrayEquals(new int[] {(-496), (-496), 3}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(3, vecInt1.last());
      assertEquals(3, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      LearntWLClause learntWLClause0 = (LearntWLClause)mixedDataStructureDanielWL0.createUnregisteredClause(vecInt1);
      assertNotNull(learntWLClause0);
      assertArrayEquals(new int[] {(-496), (-496), 3}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(3, learntWLClause0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      // Undeclared exception!
      try { 
        solver0.record(learntWLClause0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getClaDecay();
      assertEquals(0.999, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertNotSame(searchParams0, searchParams2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver2.setSimplifier(simplificationType0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(searchParams0, searchParams2);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver0.record(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(226.586450423, (-5066.169), (-5066.169), 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals((-5066.169), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      
      searchParams0.setInitConflictBound((-1121));
      assertEquals((-1121), searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals((-5066.169), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.updateVar((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      searchParams0.setConflictBoundIncFactor((-3224));
      assertEquals((-1121), searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1121), searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setDBSimplificationAllowed(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1121), searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setRestartStrategy(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1121), searchParams0.getInitConflictBound());
      assertEquals((-5066.169), searchParams0.getClaDecay(), 0.01);
      assertEquals(226.586450423, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3224.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureDanielWL>((LearningStrategy<MixedDataStructureDanielWL>) null, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, (ILogAble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomLiteralSelectionStrategy0.updateVar(0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-924));
      assertNotNull(searchParams0);
      assertEquals((-924), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log((String) null);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals((-924), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      try { 
        solver0.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(43);
      assertNotNull(fixedLengthLearning0);
      assertEquals(43, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder(463);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(463, pureOrder0.getPeriod());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(43, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(463, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.getLiteralsPropagatedAt(43);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getPropagations());
      
      lubyRestarts0.init(searchParams1, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getPropagations());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.usage();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver0.unset(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double0 = searchParams2.getClaDecay();
      assertEquals(0.999, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      activeLearning0.setOrder(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      solver2.setSimplifier(simplificationType0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(426, percentLengthLearning1.getLimit());
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      solver0.expireTimeout();
      assertNotSame(searchParams0, searchParams2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      solver0.stop();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(7);
      assertNotNull(percentLengthLearning1);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(percentLengthLearning1, percentLengthLearning0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      RestartStrategy restartStrategy0 = solver2.getRestartStrategy();
      assertNull(restartStrategy0);
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      fixedLengthLearning0.setMaxLength((-2107));
      assertEquals((-2107), fixedLengthLearning0.getMaxLength());
      
      // Undeclared exception!
      try { 
        solver1.assume((-2107));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      assertNotNull(percentLengthLearning1);
      assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      double double1 = searchParams2.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertNotEquals(double1, double0, 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams2, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      int int0 = solver2.nextFreeVarId(false);
      assertEquals(3, int0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      solver2.setExpectedNumberOfClauses(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(5, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      
      solver3.clearLearntClauses();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver2.setSimplifier(simplificationType0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(426, percentLengthLearning1.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(7, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      
      ActiveLearning<CardinalityDataStructure> activeLearning2 = new ActiveLearning<CardinalityDataStructure>(1);
      assertNotNull(activeLearning2);
      assertEquals(1.0, activeLearning2.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning2.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertNotNull(noRestarts1);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      
      SearchParams searchParams3 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts1.onRestart();
      assertNotSame(noRestarts1, noRestarts0);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      
      Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(activeLearning2, cardinalityDataStructure0, pureOrder0, noRestarts1);
      assertNotNull(solver4);
      assertEquals(1.0, activeLearning2.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      
      Solver<MixedDataStructureDanielWL>[] solverArray0 = (Solver<MixedDataStructureDanielWL>[]) Array.newInstance(Solver.class, 2);
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver5 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, pureOrder0, noRestarts0);
      assertNotNull(solver5);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(1, solver5.nVars());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(2, solver5.newVar());
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      
      solverArray0[0] = solver5;
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      Solver<MixedDataStructureDanielWL> solver6 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, noRestarts1);
      assertNotNull(solver6);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver6.nConstraints());
      assertEquals(2147483, solver6.getTimeout());
      assertFalse(solver6.isSolverKeptHot());
      assertEquals(3, solver6.realNumberOfVariables());
      assertEquals(4, solver6.newVar());
      assertEquals(3, solver6.nVars());
      assertEquals("c ", solver6.getLogPrefix());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals(0, solver6.decisionLevel());
      assertFalse(solver6.isVerbose());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(0, solver6.currentDecisionLevel());
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertFalse(solver6.equals((Object)solver5));
      
      solverArray0[1] = solver6;
      ManyCore<Solver<MixedDataStructureDanielWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWL>>(false, solverArray0);
      assertNotNull(manyCore0);
      assertEquals(2, solverArray0.length);
      
      solver4.setUnitClauseProvider(manyCore0);
      assertNotSame(noRestarts1, noRestarts0);
      assertEquals(2, solverArray0.length);
      assertEquals(1.0, activeLearning2.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(4, solver4.newVar());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(3, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(3, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(noRestarts1.equals((Object)noRestarts0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      solver0.setLogPrefix("s\n");
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("s\n", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      assertNotNull(searchParams0);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double0, 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int0);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double1, 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int1);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2278);
      intArray0[1] = (-2278);
      intArray0[2] = (-2278);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {(-2278), (-2278), (-2278)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, noRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {(-2278), (-2278), (-2278)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {(-2278), (-2278), (-2278)}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {(-2278), (-2278), (-2278)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVec<Constr> iVec0 = solver1.getLearnedConstraints();
      assertNotNull(iVec0);
      assertArrayEquals(new int[] {(-2278), (-2278), (-2278)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(searchParams0.equals((Object)searchParams1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.rootLevel = (-3224);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.cancelUntilTrailLevel((-1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(8);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(8, lubyRestarts0.getFactor());
      
      int int0 = lubyRestarts0.nextLuby();
      assertEquals(1, int0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(8, lubyRestarts0.getFactor());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL1);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, varOrderHeap1, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(8, lubyRestarts0.getFactor());
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      solver1.setDataStructureFactory(mixedDataStructureSingleWL1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
      assertNotSame(solver1, solver0);
      assertNotSame(mixedDataStructureSingleWL0, mixedDataStructureSingleWL1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(8, lubyRestarts0.getFactor());
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning1 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-3224);
      intArray0[1] = (-3224);
      intArray0[2] = (-3224);
      intArray0[3] = (-1);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {(-3224), (-3224), (-3224), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning1, clausalDataStructureWL1, varOrderHeap1, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      
      int int1 = solver2.newVar((-1));
      assertEquals((-1), int1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals((-1), solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(int1 == int0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.sat4j.minisat.learning.AbstractLearning");
      assertFalse(boolean0);
      
      double double0 = searchParams0.getClaDecay();
      assertEquals(0.999, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
      assertNotNull(fixedLengthLearning0);
      assertEquals(298, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams(298, 298);
      assertNotNull(searchParams0);
      assertEquals(298, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(15);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(15, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      SearchParams searchParams2 = new SearchParams(2824);
      assertNotNull(searchParams2);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getClaDecay();
      assertEquals(0.999, double0, 0.01);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams2, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(15, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(15L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(15, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      SearchParams searchParams3 = solver0.getSearchParams();
      assertNotNull(searchParams3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams3, searchParams0);
      assertNotSame(searchParams3, searchParams1);
      assertSame(searchParams3, searchParams2);
      assertNotSame(searchParams2, searchParams1);
      assertSame(searchParams2, searchParams3);
      assertNotSame(searchParams2, searchParams0);
      assertEquals(0.999, searchParams3.getClaDecay(), 0.01);
      assertEquals(2824, searchParams3.getInitConflictBound());
      assertEquals(0.95, searchParams3.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams3.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(15L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(15, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(searchParams3.equals((Object)searchParams0));
      assertFalse(searchParams3.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin0, searchParams2, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning2 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning2);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning2.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin2 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin2);
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin2, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(15L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(15, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(solver2.equals((Object)solver1));
      
      int int0 = solver1.getTimeout();
      assertEquals(2147483, int0);
      assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
      assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin2);
      assertNotSame(solver1, solver2);
      assertNotSame(searchParams2, searchParams1);
      assertSame(searchParams2, searchParams3);
      assertNotSame(searchParams2, searchParams0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2824, searchParams2.getInitConflictBound());
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin2));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(lits0).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      IOrder iOrder0 = mock(IOrder.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, iOrder0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, lits0.realnVars());
      assertEquals(2, lits0.nVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      solver0.clearLearntClauses();
      assertEquals(0, lits0.realnVars());
      assertEquals(4, lits0.nVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(searchParams0.equals((Object)searchParams1));
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      ILits iLits0 = solver1.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(iLits0, lits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(iLits0.equals((Object)lits0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      searchParams0.setClaDecay(967.1935);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getClaDecay();
      assertEquals(967.1935, double0, 0.01);
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PureOrder pureOrder0 = new PureOrder(32);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.clearLearntClauses();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(967.1935, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log((String) null);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log((String) null);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      // Undeclared exception!
      try { 
        solver2.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      assertNotNull(searchParams0);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double0, 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int0);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-2328.61), double1, 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(double1, double0, 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals((-2278), int1);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0, (ILogAble) null);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      int int2 = solver0.nextFreeVarId(true);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(3, int2);
      assertEquals(0, intArray0.length);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1438.37816070107, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2328.61), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2278), searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.newVar());
      assertEquals(4, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-997));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-997), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals((-997), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      IConstr iConstr0 = solver1.getIthConstr(0);
      assertNull(iConstr0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals((-997), fixedLengthLearning0.getMaxLength());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      assertNotNull(lBDConflictTimer0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, lBDConflictTimer0.bound());
      
      Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, lBDConflictTimer0.bound());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver1.varBumpActivity(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver1.toString((String) null);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PureOrder pureOrder0 = new PureOrder(100);
      assertNotNull(pureOrder0);
      assertEquals(100, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      lubyRestarts0.init(searchParams0, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(100, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      String string0 = solver0.getLogPrefix();
      assertNotNull(string0);
      assertEquals("c ", string0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(100, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      SearchListener<Solver<MixedDataStructureDanielHT>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielHT>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
      solver0.setSearchListener(searchListener0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(100, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = null;
      PureOrder pureOrder1 = new PureOrder((-1));
      assertNotNull(pureOrder1);
      assertEquals((-1), pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder1);
      assertNotNull(tabuListDecorator0);
      assertEquals((-1), pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      
      tabuListDecorator0.setVarDecay((-1));
      assertNotSame(pureOrder1, pureOrder0);
      assertEquals((-1), pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      
      // Undeclared exception!
      try { 
        pureOrder1.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PureOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      //  // Unstable assertion: assertNotNull(noRestarts0);
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      
      ILogAble iLogAble0 = solver0.getLogger();
      //  // Unstable assertion: assertNotNull(iLogAble0);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(5, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(6, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(5, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(8, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(7, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(7, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(3, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(4, solver1.newVar());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
      //  // Unstable assertion: assertNotNull(percentLengthLearning1);
      //  // Unstable assertion: assertEquals(426, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      //  // Unstable assertion: assertNotNull(iLits0);
      //  // Unstable assertion: assertEquals(0, iLits0.nVars());
      //  // Unstable assertion: assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams2 = new SearchParams(2824);
      //  // Unstable assertion: assertNotNull(searchParams2);
      //  // Unstable assertion: assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(2824, searchParams2.getInitConflictBound());
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams0));
      
      double double0 = searchParams2.getClaDecay();
      //  // Unstable assertion: assertEquals(0.999, double0, 0.01);
      //  // Unstable assertion: assertNotSame(searchParams2, searchParams0);
      //  // Unstable assertion: assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(2824, searchParams2.getInitConflictBound());
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams0));
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams2, pureOrder0, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(2824, searchParams2.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(1, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2, solver2.newVar());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(1, solver2.nVars());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(426, percentLengthLearning1.getLimit());
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams0));
      
      int int0 = solver2.nextFreeVarId(false);
      //  // Unstable assertion: assertEquals(3, int0);
      //  // Unstable assertion: assertNotSame(searchParams2, searchParams0);
      //  // Unstable assertion: assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(2824, searchParams2.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(4, solver2.newVar());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver2.nVars());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals(3, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(426, percentLengthLearning1.getLimit());
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams0));
      
      solver2.setExpectedNumberOfClauses(0);
      //  // Unstable assertion: assertNotSame(searchParams2, searchParams0);
      //  // Unstable assertion: assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(2824, searchParams2.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(5, solver2.nVars());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(5, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals(6, solver2.newVar());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(426, percentLengthLearning1.getLimit());
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(searchParams2.equals((Object)searchParams0));
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax1);
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      //  // Unstable assertion: assertNotNull(randomWalkDecorator0);
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.assignLiteral((-3224));
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax1, randomWalkDecorator0, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver3);
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertFalse(solver3.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver3.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver3.getTimeout());
      //  // Unstable assertion: assertEquals(1, solver3.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver3.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver3.newVar());
      //  // Unstable assertion: assertEquals(1, solver3.nVars());
      //  // Unstable assertion: assertFalse(solver3.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver3.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver3.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver3.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver3.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      //  // Unstable assertion: assertFalse(solver3.equals((Object)solver0));
      
      solver0.sortOnActivity();
      //  // Unstable assertion: assertNotSame(searchParams0, searchParams2);
      //  // Unstable assertion: assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      //  // Unstable assertion: assertNotSame(solver0, solver3);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(9, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(9, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(10, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams2));
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      //  // Unstable assertion: assertFalse(solver0.equals((Object)solver3));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(298, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(298, 298);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(298, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
      //  // Unstable assertion: assertNotNull(tabuListDecorator0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      tabuListDecorator0.varDecayActivity();
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 0;
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, lubyRestarts0.getFactor());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      //  // Unstable assertion: assertNotNull(glucose21Restarts0);
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(298, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(298, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(2824);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2824, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2824);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2824, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      userFixedPhaseSelectionStrategy0.updateVar(2824);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(4);
      assertNotNull(percentLengthLearning0);
      assertEquals(4, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      SearchParams searchParams1 = new SearchParams(2);
      assertNotNull(searchParams1);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log((String) null);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(searchParams1.equals((Object)searchParams0));
      
      // Undeclared exception!
      try { 
        solver0.discardCurrentModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      //  // Unstable assertion: assertNotNull(naturalStaticOrder0);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(negativeLiteralSelectionStrategy0);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning1);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructure0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1585));
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals((-1585), percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertEquals((-1585), percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(1, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(1, solver2.nVars());
      //  // Unstable assertion: assertEquals(2, solver2.newVar());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ILogAble iLogAble0 = solver2.out;
      //  // Unstable assertion: assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      //  // Unstable assertion: assertNotNull(solver3);
      //  // Unstable assertion: assertEquals((-1585), percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(5, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(5, solver2.nVars());
      //  // Unstable assertion: assertEquals(6, solver2.newVar());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(4, solver3.nVars());
      //  // Unstable assertion: assertFalse(solver3.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver3.decisionLevel());
      //  // Unstable assertion: assertFalse(solver3.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver3.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver3.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver3.getTimeout());
      //  // Unstable assertion: assertEquals(5, solver3.newVar());
      //  // Unstable assertion: assertEquals(0, solver3.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(4, solver3.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver3.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver3.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      //  // Unstable assertion: assertFalse(solver3.equals((Object)solver2));
      
      // Undeclared exception!
      try { 
        solver3.truthValue((-1585));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3171
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      //  // Unstable assertion: assertNotNull(naturalStaticOrder0);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setClaDecay((-962.14));
      //  // Unstable assertion: assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      //  // Unstable assertion: assertNotNull(naturalStaticOrder1);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      //  // Unstable assertion: assertNotNull(arminRestarts0);
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      //  // Unstable assertion: assertNotNull(iteratorInt0);
      //  // Unstable assertion: assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      //  // Unstable assertion: assertNotNull(constr0);
      //  // Unstable assertion: assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(5, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(5, solver0.nVars());
      //  // Unstable assertion: assertEquals(6, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(constr0.learnt());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertEquals(0, constr0.size());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(180);
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(180, lubyRestarts0.getFactor());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      //  // Unstable assertion: assertNotNull(glucose21Restarts0);
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning1);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      fixedLengthLearning1.setMaxLength(0);
      //  // Unstable assertion: assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-918.19), Integer.MIN_VALUE);
      //  // Unstable assertion: assertNotNull(searchParams1);
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(7, solver2.nVars());
      //  // Unstable assertion: assertEquals(8, solver2.newVar());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(7, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertFalse(solver2.equals((Object)solver0));
      
      LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addConstr(constr0);
      //  // Unstable assertion: assertNotNull(learntWLClause0);
      //  // Unstable assertion: assertSame(learntWLClause0, constr0);
      //  // Unstable assertion: assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      //  // Unstable assertion: assertNotSame(solver0, solver2);
      //  // Unstable assertion: assertSame(constr0, learntWLClause0);
      //  // Unstable assertion: assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertFalse(learntWLClause0.isSatisfied());
      //  // Unstable assertion: assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      //  // Unstable assertion: assertFalse(learntWLClause0.simplify());
      //  // Unstable assertion: assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      //  // Unstable assertion: assertEquals(0, learntWLClause0.size());
      //  // Unstable assertion: assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertTrue(learntWLClause0.learnt());
      //  // Unstable assertion: assertEquals(125, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(1, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(9, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(9, solver0.nVars());
      //  // Unstable assertion: assertEquals(10, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(constr0.learnt());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertEquals(0, constr0.size());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      //  // Unstable assertion: assertFalse(solver0.equals((Object)solver2));
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning2);
      //  // Unstable assertion: assertEquals(180, fixedLengthLearning2.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      //  // Unstable assertion: assertNotNull(solver3);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(180, fixedLengthLearning2.getMaxLength());
      //  // Unstable assertion: assertEquals(0, solver3.nConstraints());
      //  // Unstable assertion: assertFalse(solver3.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2, solver3.newVar());
      //  // Unstable assertion: assertFalse(solver3.isVerbose());
      //  // Unstable assertion: assertEquals(1, solver3.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver3.getLogPrefix());
      //  // Unstable assertion: assertEquals(1, solver3.nVars());
      //  // Unstable assertion: assertEquals(0, solver3.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver3.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver3.decisionLevel());
      //  // Unstable assertion: assertFalse(solver3.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(2147483, solver3.getTimeout());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      
      // Undeclared exception!
      try { 
        solver3.cancelUntil((-1585));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LearningStrategy<MixedDataStructureDanielWLConciseBinary> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielWLConciseBinary>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      IOrder iOrder0 = null;
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      
      lubyRestarts0.init(searchParams0, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(learningStrategy0, mixedDataStructureDanielWLConciseBinary0, (IOrder) null, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      pureOrder0.setVarDecay(1);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
      //  // Unstable assertion: assertNotNull(tabuListDecorator0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertNotNull(varOrderHeap0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      
      VecInt vecInt0 = new VecInt();
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      
      solver0.dsfactory = mixedDataStructureDanielHT0;
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      
      vecInt0.set(1, (-5676));
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.addParity(vecInt0, true);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(70.6311681);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      int int0 = 1;
      PureOrder pureOrder0 = new PureOrder(1);
      pureOrder0.setVarDecay(1);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = tabuListDecorator0.getPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
      solver0.setTimeoutMs(0L);
      VecInt vecInt0 = new VecInt();
      try { 
        solver0.isSatisfiable((IVecInt) vecInt0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Timeout (0ms) exceeded
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(899);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      clausalDataStructureWL1.getVocabulary();
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      randomWalkDecorator0.assignLiteral((-3224));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      lubyRestarts0.init(searchParams1, solverStats0);
      lubyRestarts0.onRestart();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log((String) null);
      mUSLauncher0.log((String) null);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      SearchParams searchParams2 = solver0.getSearchParams();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams2, randomWalkDecorator0, lubyRestarts0);
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.setClaDecay((-962.14));
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      vecInt0.iterator();
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(180);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      fixedLengthLearning1.setMaxLength(0);
      SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-918.19), Integer.MIN_VALUE);
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
      solver0.addConstr(constr0);
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      cardinalityDataStructureYanMin0.setUnitPropagationListener(solver2);
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      solver1.getRestartStrategy();
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning3 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(fixedLengthLearning3, cardinalityDataStructure0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
      solver4.createBlockingClauseForCurrentModel();
      //  // Unstable assertion: assertFalse(solver4.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = null;
      solver0.stop();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew(unitPropagationListener0, iLits0, (IVecInt) null, true, (-374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1321));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams((-1321));
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      solver0.enqueue(14);
      cardinalityDataStructureYanMin0.setUnitPropagationListener(solver0);
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.nextLuby();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      solver1.setDataStructureFactory(mixedDataStructureSingleWL0);
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning2 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 32;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning2, (ClausalDataStructureWL) null, levelBasedVarOrderHeap0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(iPhaseSelectionStrategy0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
      solver0.getRestartStrategy();
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(2152);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-2074.726953), 0.0, 2152, (-4423));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, (-4423));
      Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      levelBasedVarOrderHeap0.getVocabulary();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver1);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 2152);
      // Undeclared exception!
      try { 
        solver1.learn(atLeast0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = null;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      randomWalkDecorator0.assignLiteral((-3224));
      RestartStrategy restartStrategy0 = null;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      solver0.newVar((-3224));
      solver0.cancelUntilTrailLevel((-1));
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      clausalDataStructureWL1.getVocabulary();
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-3224));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      solver1.getTimeoutMs();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      cardinalityDataStructureYanMax0.setLearner(solver1);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
      solver2.getRestartStrategy();
      // Undeclared exception!
      try { 
        solver2.cancelUntil((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(iPhaseSelectionStrategy0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      MiniSATLearning<CardinalityDataStructure> miniSATLearning2 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, naturalStaticOrder0, fixedPeriodRestarts0);
      Lbool lbool0 = solver0.truthValue(8);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("U", lbool0.toString());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1.0, 1.0, (-2328.61), (-2278));
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.assignLiteral(6);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0);
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log((String) null);
      mUSLauncher0.log((String) null);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, restartStrategy0);
      // Undeclared exception!
      try { 
        solver1.reduceDB();
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      iPhaseSelectionStrategy0.updateVar(0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, arminRestarts0);
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-924));
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log((String) null);
      mUSLauncher0.log((String) null);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        solver0.getIthConstr((-924));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -924
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(iPhaseSelectionStrategy0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      // Undeclared exception!
      try { 
        solver0.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0);
      SearchParams searchParams1 = new SearchParams(0);
      searchParams0.getVarDecay();
      SearchParams searchParams2 = new SearchParams(0, 5);
      searchParams2.getClaDecay();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      IOrder iOrder0 = null;
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      // Undeclared exception!
      try { 
        cardinalityDataStructureYanMax0.learnConstraint((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1.0, 1438.37816070107, (-2328.61), (-2278));
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log((String) null);
      mUSLauncher0.log((String) null);
      Solver<ClausalDataStructureWL> solver0 = null;
      try {
        solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, (IOrder) null, noRestarts0, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(iPhaseSelectionStrategy0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      LubyRestarts lubyRestarts0 = new LubyRestarts(500);
      mixedDataStructureDanielWLConciseBinary0.conflictDetectedInWatchesFor(7, 32);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      solver0.addAllClauses(vec0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(8);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver1.registerLiteral(10);
      assertEquals(10, solver1.nVars());
  }
}
