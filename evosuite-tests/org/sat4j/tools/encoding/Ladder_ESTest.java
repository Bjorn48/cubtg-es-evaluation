/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:26:55 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Ladder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ladder_ESTest extends Ladder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, solutionFoundListener0);
      vecInt0.growTo(312, 20);
      vecInt0.copyTo((IVecInt) vecInt0);
      ladder0.addAtMostOne(minimal4InclusionModel0, vecInt0);
      // Undeclared exception!
      ladder0.addExactlyOne(minimal4InclusionModel0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, solutionFoundListener0);
      vecInt0.growTo(2603, 2919);
      // Undeclared exception!
      ladder0.addAtMostOne(minimal4InclusionModel0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(dimacsStringSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, solutionFoundListener0);
      vecInt0.growTo(312, 20);
      IConstr iConstr0 = ladder0.addExactlyOne(minimal4InclusionModel0, vecInt0);
      assertEquals(312, vecInt0.size());
      assertEquals(1244, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.push(288);
      vecInt0.moveTo((IVecInt) vecInt1);
      Ladder ladder0 = new Ladder();
      ladder0.addExactlyOne(dimacsStringSolver0, vecInt1);
      assertEquals(1, vecInt1.size());
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(minimal4InclusionModel0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(dimacsStringSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }
}
