/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:22:01 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.reader.EfficientScanner;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.tools.DimacsStringSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupedCNFReader_ESTest extends GroupedCNFReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      groupedCNFReader0.expectedNbOfConstr = 2955;
      groupedCNFReader0.flushConstraint();
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupedCNFReader0.readProblemLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'v');
      groupedCNFReader0.scanner = efficientScanner0;
      // Undeclared exception!
      groupedCNFReader0.handleLine();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      // Undeclared exception!
      try { 
        groupedCNFReader0.handleLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        groupedCNFReader0.parseInstance((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p gcnf ...)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      // Undeclared exception!
      try { 
        groupedCNFReader0.flushConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }
}
