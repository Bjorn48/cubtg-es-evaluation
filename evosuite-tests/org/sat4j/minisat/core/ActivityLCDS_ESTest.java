/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:30:49 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ActivityLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityLCDS_ESTest extends ActivityLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      Constr constr0 = Constr.TAUTOLOGY;
      percentLengthLearning0.learns(constr0);
      activityLCDS0.reduce((IVec<Constr>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vec<Constr> vec0 = new Vec<Constr>();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, miniSATRestarts0);
      // Undeclared exception!
      try { 
        activityLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder(0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, arminRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, arminRestarts0);
      VecInt vecInt0 = new VecInt(0, (-2600));
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      Constr constr0 = Constr.TAUTOLOGY;
      activityLCDS0.onConflictAnalysis(constr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      Constr constr0 = Constr.TAUTOLOGY;
      percentLengthLearning0.learns(constr0);
      clausalDataStructureWL0.learnConstraint(constr0);
      activityLCDS0.reduce((IVec<Constr>) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      activityLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      String string0 = activityLCDS0.toString();
      assertEquals("Activity based learned constraints deletion strategy with timer check every 32 if the learned constraints reach increasing bounds: 5000 step 1000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver1, lubyRestarts0);
      Constr constr0 = Constr.TAUTOLOGY;
      activityLCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertSame(conflictTimer0, lBDConflictTimer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lBDConflictTimer0);
      Constr constr0 = Constr.TAUTOLOGY;
      activityLCDS0.onClauseLearning(constr0);
  }
}
