/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:02:19 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ConstrGroup;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((-2235), 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertNotNull(lexicoDecorator0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(1549);
      assertEquals(1549, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(155);
      assertEquals(155, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addAtMost(lexicoDecorator0, vecInt0, 155);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(155, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(2, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(1);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1);
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ConstrGroup constrGroup0 = (ConstrGroup)binary0.addExactly(solver0, vecInt0, 1);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals(8, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constrGroup0.getActivity(), 0.01);
      assertEquals(2, constrGroup0.size());
      assertNotNull(constrGroup0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      assertNotNull(lexicoDecorator0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(lexicoDecorator0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush((-9));
      assertEquals(1, vecInt0.size());
      assertEquals((-9), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      binary0.addExactly(solver0, vecInt0, (-9));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly((ISolver) null, (IVecInt) null, 1146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost((ISolver) null, (IVecInt) null, 3880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost((ISolver) null, vecInt0, (-3295));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(1549);
      assertEquals(1, vecInt0.size());
      assertEquals(1549, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addAtMostOne((ISolver) null, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1549, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binary binary0 = new Binary();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(3331, 3, (-2565)).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-4148));
      vecInt0.unsafePush(27);
      IConstr iConstr0 = binary0.addAtMost(singleSolutionDetector0, vecInt0, 1);
      assertEquals(4, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binary binary0 = new Binary();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(3331).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-4148));
      // Undeclared exception!
      binary0.addAtMost(singleSolutionDetector0, vecInt0, 1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binary binary0 = new Binary();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-2597));
      vecInt0.unsafePush((-4148));
      vecInt0.unsafePush((-4148));
      vecInt0.unsafePush((-4148));
      binary0.addExactlyOne(iSolver0, vecInt0);
      assertEquals(4150, iSolver0.nVars());
      assertEquals(9, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binary binary0 = new Binary();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(2);
      vecInt0.unsafePush(1549);
      vecInt0.unsafePush(128);
      binary0.addAtMostOne(iSolver0, iVecInt0);
      assertEquals(1549, iSolver0.realNumberOfVariables());
      assertEquals(5, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      try { 
        binary0.addExactlyOne(iSolver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binary binary0 = new Binary();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        binary0.addExactly(iSolver0, vecInt0, 270);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }
}
