/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:05:55 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LecteurDimacs_ESTest extends LecteurDimacs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(minimal4CardinalityModel0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      try { 
        lecteurDimacs0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        lecteurDimacs0.parseInstance((InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3756);
      // Undeclared exception!
      try { 
        lecteurDimacs0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      try { 
        lecteurDimacs0.parseInstance((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        lecteurDimacs0.decode(intArray0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      // Undeclared exception!
      try { 
        lecteurDimacs0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      boolean boolean0 = lecteurDimacs0.hasAMapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      int[] intArray0 = new int[0];
      lecteurDimacs0.setUseMapping(true);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      lecteurDimacs0.decode(intArray0, printWriter0);
      assertFalse(lecteurDimacs0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      int[] intArray0 = new int[1];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      lecteurDimacs0.decode(intArray0, printWriter0);
      assertFalse(lecteurDimacs0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      int[] intArray0 = new int[1];
      String string0 = lecteurDimacs0.decode(intArray0);
      assertEquals("0 0", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        lecteurDimacs0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)10);
      try { 
        lecteurDimacs0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        lecteurDimacs0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      Map<Integer, String> map0 = lecteurDimacs0.getMapping();
      assertNull(map0);
  }
}
