/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:55:36 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable();
      doReturn(intArray0).when(modelIteratorToSATAdapter0).model();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MockFile mockFile0 = new MockFile("hHI[:Uu9hE0h", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Reader reader0 = basicLauncher0.createReader(negationDecorator0, "c ");
      decisionMode0.solve(negationDecorator0, reader0, basicLauncher0, mockPrintWriter0, 1453);
      DimacsReader dimacsReader0 = new DimacsReader(negationDecorator0);
      decisionMode0.displayResult(negationDecorator0, negationDecorator0, basicLauncher0, mockPrintWriter0, dimacsReader0, 0L, true);
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("hHI[:Uu9hE0h", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      InstanceReader instanceReader0 = new InstanceReader(negationDecorator0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      decisionMode0.solve(negationDecorator0, instanceReader0, mUSLauncher0, mockPrintWriter0, 271L);
      decisionMode0.getCurrentExitCode();
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      try { 
        decisionMode0.solve((IProblem) null, (Reader) null, basicLauncher0, printWriter0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      int[] intArray0 = new int[1];
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable();
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).model();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("hHI[:Uu9hE0h", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      InstanceReader instanceReader0 = new InstanceReader(negationDecorator0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      decisionMode0.solve(negationDecorator0, instanceReader0, mUSLauncher0, mockPrintWriter0, 271L);
      decisionMode0.onSolutionFound(intArray0);
      decisionMode0.displayResult(negationDecorator0, negationDecorator0, mUSLauncher0, mockPrintWriter0, instanceReader0, 0L, true);
      assertEquals(38L, file0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable();
      doReturn(intArray0).when(modelIteratorToSATAdapter0).model();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("hHI[:Uu9hE0h", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      InstanceReader instanceReader0 = new InstanceReader(negationDecorator0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      decisionMode0.solve(negationDecorator0, instanceReader0, mUSLauncher0, mockPrintWriter0, 271L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(negationDecorator0, negationDecorator0, mUSLauncher0, mockPrintWriter0, instanceReader0, 0L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Reader reader0 = basicLauncher0.createReader(negationDecorator0, "");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      decisionMode0.solve(negationDecorator0, reader0, basicLauncher0, printWriter0, 9223372036854775807L);
      decisionMode0.displayResult(negationDecorator0, negationDecorator0, basicLauncher0, printWriter0, reader0, 9223372036854775807L, false);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, decisionMode0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Reader reader0 = basicLauncher0.createReader(negationDecorator0, "{>;wg=j:6/-|'_");
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(dimacsStringSolver0, reader0, basicLauncher0, printWriter0, 1453);
      decisionMode0.onSolutionFound((int[]) null);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(dimacsStringSolver0, dimacsStringSolver0, basicLauncher0, printWriter0, reader0, 1453, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, decisionMode0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Reader reader0 = basicLauncher0.createReader(negationDecorator0, "{>;wg=j:6/-|'_");
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.displayResult(dimacsStringSolver0, dimacsStringSolver0, basicLauncher0, printWriter0, reader0, 1453, false);
      assertEquals("s UNKNOWN\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      basicLauncher0.addHook();
      assertEquals(0L, basicLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = ExitCode.UNSATISFIABLE;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.setIncomplete(true);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(ExitCode.UNKNOWN, exitCode0);
  }
}
