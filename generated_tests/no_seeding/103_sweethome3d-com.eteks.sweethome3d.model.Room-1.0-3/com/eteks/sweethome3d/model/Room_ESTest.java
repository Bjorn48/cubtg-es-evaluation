/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:35:15 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[][] floatArray0 = new float[9][3];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-3652.389F));
      assertEquals((-3652.389F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-1724.5381F), (-2420.4612F), 0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(4793.3555F, 4793.3555F, 4793.3555F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(4.06F);
      boolean boolean0 = room0.isAreaCenterPointAt(4.06F, 4.06F, 4.06F);
      assertEquals(4.06F, room0.getAreaYOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1880.1F));
      boolean boolean0 = room0.isAreaCenterPointAt((-850), (-1.0F), (-174030.25F));
      assertEquals((-1880.1F), room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.addPoint(1101.3475F, 1101.3475F);
      boolean boolean0 = room0.isAreaCenterPointAt((-1.0F), 1101.3475F, 4793.3555F);
      assertEquals(550.67377F, room0.getYCenter(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-3189.375F);
      floatArray1[1] = (-3189.375F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt((-1974.233F), 199874.0F, 957.74335F);
      assertFalse(boolean0);
      assertEquals((-1594.6875F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-1594.6875F), room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(15.687106F, 311.836F, 957.74335F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(6055.656F);
      boolean boolean0 = room0.isNameCenterPointAt(4.06F, (-2.0733905F), 4.06F);
      assertEquals(6055.656F, room0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(4793.3555F, 4793.3555F, 4793.3555F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0, int0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 825.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      float[] floatArray2 = new float[5];
      floatArray2[0] = (-1240.29F);
      floatArray0[3] = floatArray2;
      floatArray0[4] = floatArray0[1];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(3172.56F);
      room0.setAreaAngle((-648.06F));
      assertEquals(5.3912745F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 3
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      assertEquals(4, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0, 2.0F, 0);
      assertEquals(1.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-398.001F), (-1.0F), 0);
      assertEquals((-199.0005F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint((-3661.5278F), (-13.733657F), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-18.0F));
      assertEquals(0.8495559F, room0.getNameAngle(), 0.01F);
      
      room0.setNameAngle(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-109213.75F));
      assertEquals((-109213.75F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      room0.setName("Yh_g5\"BJ");
      room0.setName("Yh_g5\"BJ");
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 280.461F;
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[1] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 5114.0F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      boolean boolean0 = room0.isFloorVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle(311.836F, (-83.9F), (-788.39813F), 3595.5F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 3159.6F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertEquals(1579.8F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[2];
      floatArray1[1] = (-3189.375F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-1594.6875F), float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-4824.85F);
      floatArray1[1] = (-4824.85F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-4824.85F), (-4824.85F), 0.4935883F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(4788.19F);
      float float0 = room0.getNameYOffset();
      assertEquals(4788.19F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(4923.0F);
      room0.setNameStyle(textStyle0);
      TextStyle textStyle1 = room0.getNameStyle();
      assertTrue(room0.isFloorVisible());
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(1);
      float float0 = room0.getNameAngle();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setName("com.eteks.sweethome3d.model.TextStyle");
      String string0 = room0.getName();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(string0);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      String string0 = room0.getName();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNotNull(string0);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("S", (-1944.73F), 0.0F, (-40.0F));
      room0.setLevel(level0);
      Level level1 = room0.getLevel();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(level1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      CatalogTexture catalogTexture0 = new CatalogTexture("&vNo?RxI", "&vNo?RxI", (Content) null, 24.406744F, 24.406744F, "&vNo?RxI");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      CatalogTexture catalogTexture0 = new CatalogTexture("&vNo?RxI", (Content) null, (-798.14F), (-798.14F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertTrue(room0.isAreaVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(420.83887F);
      float float0 = room0.getFloorShininess();
      assertEquals(420.83887F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[][] floatArray0 = new float[9][3];
      Room room0 = new Room(floatArray0);
      Integer integer0 = Integer.valueOf(2852);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-376));
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isFloorVisible());
      assertNotNull(integer1);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "CEILING_TEXTURE", resourceURLContent0, 1.0F, 1.0F, (String) null);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("X]]*I~t\"'%", "X]]*I~t\"'%", resourceURLContent0, (-1242.246F), (-1242.246F), "X]]*I~t\"'%");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(1371.411F);
      float float0 = room0.getCeilingShininess();
      assertEquals(1371.411F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(0);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[27][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2150);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-1));
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(4.064593F);
      float float0 = room0.getAreaYOffset();
      assertEquals(4.064593F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1442221.0F));
      float float0 = room0.getAreaXOffset();
      assertEquals((-1442221.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F, false, true);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(textStyle1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(765.7F, false, false);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertNotNull(textStyle1);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint(0.0F, (-1.0F), 2965.4F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      room0.clone();
      assertFalse(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (-3189.375F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNotSame(room1, room0);
      assertTrue(room1.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      room0.clone();
      assertFalse(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      room0.clone();
      assertFalse(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      room0.addPoint((-3189.375F), 777.5F);
      room0.clone();
      assertEquals(5, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 2281.2F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isFloorVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.move((-40.0F), (-40.0F));
      room0.clone();
      assertEquals((-40.0F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      room0.clone();
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(1.0F);
      room0.clone();
      assertEquals(1.0F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(1550.4354F);
      room0.clone();
      assertEquals(1550.4354F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1320.0F));
      room0.clone();
      assertEquals((-1320.0F), room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-1.0F));
      room0.clone();
      assertEquals(5.2831855F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(1238.8441F);
      room0.clone();
      assertEquals(1238.8441F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-159.14037F));
      room0.clone();
      assertEquals((-159.14037F), room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(1.0F);
      room0.clone();
      assertEquals(1.0F, room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-1.0F));
      room0.clone();
      assertEquals((-1.0F), room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[][] floatArray0 = new float[9][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(613.6441F);
      room0.clone();
      assertEquals(613.6441F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-1));
      room0.clone();
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(1550.4354F);
      room0.clone();
      assertEquals(1550.4354F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[][] floatArray0 = new float[3][1];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1654.714F));
      room0.clone();
      assertEquals((-1654.714F), room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(3046.8F);
      room0.clone();
      assertEquals(5.73836F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[][] floatArray0 = new float[5][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(0.0F, (-3641.0F), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[][] floatArray0 = new float[27][7];
      CatalogTexture catalogTexture0 = new CatalogTexture("c", (Content) null, (-987.6128F), 365.2F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      HomeTexture homeTexture1 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture1);
      // Undeclared exception!
      try { 
        room0.setCeilingTexture(homeTexture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.move(962.4603F, (-186.9F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      float[] floatArray1 = new float[0];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt(1277.9F, (-143.08F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt(3944.0F, 0.0F, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(0.0F, (-3485.1328F), (-174030.25F), (-40.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[0];
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getPointIndexAt((-1.0F), 1072.0F, 1072.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[][] floatArray0 = new float[3][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[][] floatArray1 = new float[2][8];
      floatArray1[0] = floatArray0;
      Room room0 = new Room(floatArray1);
      // Undeclared exception!
      try { 
        room0.containsPoint((-2420.4612F), 0.0F, (-1397.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getArea();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = room0.containsPoint(0.0F, (-40.0F), (-1240.29F));
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, (-1.0F), 0);
      assertEquals(8, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      float[][] floatArray1 = room0.getPoints();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 563.2F);
      assertEquals(563.2F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 0.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.isSingular();
      float float0 = room0.getArea();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(374.0F, 694.0F, 374.0F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(1.0F);
      boolean boolean0 = room0.isNameCenterPointAt(0.0F, 1.0F, 0.0F);
      assertEquals(1.0F, room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(0.0F, (-2243.6978F), 0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-1), int0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[1] = (-1768.499F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 863.89F;
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray2;
      floatArray0[4] = floatArray0[1];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[][] floatArray0 = new float[19][7];
      float[] floatArray1 = new float[9];
      floatArray1[1] = 280.461F;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[15];
      floatArray2[0] = 280.461F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 280.461F;
      floatArray3[1] = (-2525.6765F);
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getArea();
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(322709.25F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.getArea();
      float float0 = room0.getArea();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAtLevel((Level) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("`", 14.340826F, (-2563.1F), (-2162.353F));
      boolean boolean0 = room0.isAtLevel(level0);
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setLevel((Level) null);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(0.0F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingVisible(false);
      assertFalse(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture((HomeTexture) null);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      CatalogTexture catalogTexture0 = new CatalogTexture("&vNo?RxI", "&vNo?RxI", (Content) null, 24.406744F, 24.406744F, "&vNo?RxI");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      room0.setCeilingTexture(homeTexture0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingColor((Integer) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[][] floatArray0 = new float[27][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2150);
      room0.setCeilingColor(integer0);
      room0.setCeilingColor(integer0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setFloorVisible(false);
      assertFalse(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture((HomeTexture) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      CatalogTexture catalogTexture0 = new CatalogTexture("&vNo?RxI", "&vNo?RxI", (Content) null, 24.406744F, 24.406744F, "&vNo?RxI");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture(homeTexture0);
      room0.setFloorTexture(homeTexture0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setFloorColor((Integer) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-376));
      room0.setFloorColor(integer0);
      room0.setFloorColor(integer0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(1.0F);
      float float0 = room0.getAreaAngle();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle((-1648.0F), true, true);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(textStyle1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaStyle((TextStyle) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-674.5311F));
      float float0 = room0.getAreaYOffset();
      assertEquals((-674.5311F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(146355.1F);
      float float0 = room0.getAreaXOffset();
      assertEquals(146355.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(0.0F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaVisible(false);
      assertFalse(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(4268);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 4268
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.removePoint(1);
      assertEquals(2, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint((-1723079759));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1723079759
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.move((-283.0F), 1.0F);
      room0.setPoint((-283.0F), (-283.0F), 2);
      assertEquals((-283.0F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(2598.0F, (-2485.27F), 0);
      assertEquals(1299.0F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0, 0, 0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint((-2500.9478F), (-2500.9478F), 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 13
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1.0F, 1.0F, (-1946));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1946
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint((-468.0F), (-468.0F), 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 3089
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint((-429.36786F), (-429.36786F), (-2271));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -2271
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setPoints(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setNameStyle((TextStyle) null);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset((-40.0F));
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(2293.2263F);
      float float0 = room0.getNameXOffset();
      assertEquals(2293.2263F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.setName((String) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[][] floatArray0 = new float[1][3];
      Room room0 = null;
      try {
        room0 = new Room(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least two points
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaVisible();
      assertTrue(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.getAreaStyle();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameYOffset();
      assertEquals((-40.0F), float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.getPointCount();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getCeilingShininess();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }
}
