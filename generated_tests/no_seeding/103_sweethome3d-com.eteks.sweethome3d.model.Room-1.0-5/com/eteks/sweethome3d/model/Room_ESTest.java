/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 19:04:21 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 486.35F);
      assertEquals(486.35F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.move(114.6F, 114.6F);
      assertEquals(114.6F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-1.0F), 0.0F, 0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(0.0F, (-196.948F), 0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(4337.7F);
      boolean boolean0 = room0.isAreaCenterPointAt(2768.8384F, 2768.8384F, 2768.8384F);
      assertEquals(4337.7F, room0.getAreaYOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-2693.38F);
      floatArray1[1] = (-40.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt((-2872.3145F), (-40.0F), 1562.8F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-1346.69F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-20.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-4405.918F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(6539.77F, (-2231.0525F), (-4405.918F));
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-2202.959F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[7];
      floatArray1[1] = 738.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(617.193F, 657.0F, 951.2916F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(738.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1.0F));
      boolean boolean0 = room0.isNameCenterPointAt(657.0F, 0.0F, 0.0F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 951.2916F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(617.193F, 657.0F, 951.2916F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(951.2916F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(1.0F, 1.0F, 1.0F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0, int0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-2693.38F);
      floatArray1[1] = (-40.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-3039.1F), 0.0F, 1722.9321F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0, int0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[][] floatArray0 = new float[5][0];
      float[] floatArray1 = new float[7];
      floatArray1[1] = 760492.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 44.2F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray1;
      floatArray0[4] = floatArray0[2];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(2135.35F);
      assertEquals(5.3502784F, room0.getAreaAngle(), 0.01F);
      
      room0.setAreaAngle(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.removePoint(1);
      assertEquals(1, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 14
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 971.7F;
      float[][] floatArray1 = new float[23][7];
      floatArray1[3] = floatArray0;
      Room room0 = new Room(floatArray1);
      room0.setPoint((-1.0F), 5.815144F, 3);
      assertEquals(2.907572F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(3, 0.0F, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 3
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, 3314.4888F, 0);
      assertEquals(15, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.addPoint(0.0F, (-1.0F));
      assertEquals(15, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-946.914F));
      assertEquals((-946.914F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setName("JHZ-wpaW'g8`PQtQ1");
      room0.setName("JHZ-wpaW'g8`PQtQ1");
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 1406.86F;
      floatArray1[1] = 1424.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 1424.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[1] = 2530.1455F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      boolean boolean0 = room0.isFloorVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[3];
      floatArray1[1] = (float) 754555020;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3.77277504E8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-40.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-20.0F), float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 701.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals(350.5F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[][] floatArray0 = new float[6][3];
      Room room0 = new Room(floatArray0);
      room0.move((-347.79F), 0.0F);
      float float0 = room0.getXCenter();
      assertEquals((-347.79F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[][] floatArray0 = new float[7][0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 3255.103F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-1215.4333F), 2038.4F, 3255.103F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(182.22342F);
      float float0 = room0.getNameYOffset();
      assertEquals(182.22342F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(739.438F);
      float float0 = room0.getNameXOffset();
      assertEquals(739.438F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-8));
      float float0 = room0.getNameXOffset();
      assertEquals((-8.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-634.14276F));
      float float0 = room0.getNameAngle();
      assertEquals(0.45895478F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setName("P");
      String string0 = room0.getName();
      assertTrue(room0.isAreaVisible());
      assertNotNull(string0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[][] floatArray0 = new float[6][2];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      String string0 = room0.getName();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(string0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("", 0.0F, 0.0F, 1.0F);
      level0.setElevation((-803.41F));
      room0.setLevel(level0);
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(1409.1842F);
      float float0 = room0.getFloorShininess();
      assertEquals(1409.1842F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(0);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(16);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2115431652));
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, (-2368.1326F), (-2368.1326F), "Hwl{0'w~}o'2r", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(1390);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isFloorVisible());
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-72));
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(589.6082F);
      float float0 = room0.getAreaYOffset();
      assertEquals(589.6082F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-1958.2931F));
      float float0 = room0.getAreaYOffset();
      assertEquals((-1958.2931F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(250.19319F);
      float float0 = room0.getAreaXOffset();
      assertEquals(250.19319F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1.0F));
      float float0 = room0.getAreaXOffset();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[][] floatArray0 = new float[6][2];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertTrue(room0.isFloorVisible());
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle((-880.55F), true, true);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(textStyle1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-2142.1277F));
      float float0 = room0.getAreaAngle();
      assertEquals(0.4385042F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint((-1.0F), (-1.0F), 2.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 3256.103F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (-1.0F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isFloorVisible());
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      room0.clone();
      assertFalse(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      room0.clone();
      assertFalse(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-40.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertNotSame(room1, room0);
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 951.2916F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      room0.clone();
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(1521.8644F);
      room0.clone();
      assertEquals(1521.8644F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(2764.4326F);
      room0.clone();
      assertEquals(2764.4326F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1019.19F));
      room0.clone();
      assertEquals((-1019.19F), room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-1.0F));
      room0.clone();
      assertEquals(5.2831855F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(2791.5828F);
      room0.clone();
      assertEquals(2791.5828F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-3039.1F));
      room0.clone();
      assertEquals((-3039.1F), room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-726.4205F));
      room0.clone();
      assertEquals((-726.4205F), room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-332.919F));
      room0.clone();
      assertEquals((-332.919F), room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(1.0F);
      room0.clone();
      assertEquals(1.0F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-4405.918F));
      room0.clone();
      assertEquals((-4405.918F), room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-635.4F));
      room0.clone();
      assertEquals(5.484877F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoints((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1528.0F, (-4405.918F), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      float[] floatArray1 = new float[0];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.move((-733.0F), (-582.6549F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      float[] floatArray1 = new float[0];
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt(2.0F, (-110.0F), 408.16385F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isClockwise();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt(6539.77F, (-1925.693F), 3255.103F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(3863.911F, 3863.911F, 895.5255F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[][] floatArray0 = new float[4][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[][] floatArray1 = new float[7][7];
      floatArray1[0] = floatArray0;
      Room room0 = new Room(floatArray1);
      // Undeclared exception!
      try { 
        room0.getPointIndexAt(2200.36F, 0.0F, 2200.36F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.containsPoint(1.23F, 1.0F, (-1865.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle(755.9F, 755.9F, 2480.5F, (-40.0F));
      assertFalse(boolean0);
      
      boolean boolean1 = room0.intersectsRectangle(4623.8125F, (-438.31006F), (-241.07F), 3878.9106F);
      assertTrue(boolean1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-81.3F), (-2752.8428F), (-1.0F));
      assertEquals((-1), int0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture((HomeTexture) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(0.0F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      float[][] floatArray1 = room0.getPoints();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotSame(floatArray1, floatArray0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameYOffset();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getAreaXOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameXOffset();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getAreaYOffset();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-1128.683F));
      assertEquals((-1128.683F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(0.0F, 3255.103F, 739.438F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(3.8158305F, 3.8158305F, 3.8158305F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(1.0F, 4.3759108F, 1.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-1), int0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 3256.103F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (-1.0F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[][] floatArray0 = new float[6][2];
      float[] floatArray1 = new float[22];
      floatArray1[1] = (-1177.184F);
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (-733.0F);
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (-1177.184F);
      floatArray3[1] = (-733.0F);
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getArea();
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(459000.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.getArea();
      float float0 = room0.getArea();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("\"~|]\"HZ+", 0.0F, 3256.103F, (-1.0F));
      boolean boolean0 = room0.isAtLevel(level0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setLevel((Level) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(1.0F);
      room0.clone();
      assertEquals(1.0F, room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[][] floatArray0 = new float[21][5];
      Room room0 = new Room(floatArray0);
      room0.setCeilingVisible(false);
      assertFalse(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture((HomeTexture) null);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setCeilingColor((Integer) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(1390);
      room0.setCeilingColor(integer0);
      room0.setCeilingColor(integer0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[][] floatArray0 = new float[6][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(0);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorVisible(false);
      assertFalse(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      room0.clone();
      assertFalse(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, (-2368.1326F), (-2368.1326F), "Hwl{0'w~}o'2r", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setFloorTexture(homeTexture0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorColor((Integer) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(0);
      room0.setFloorColor(integer0);
      room0.setFloorColor(integer0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(7, false, false);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertNotNull(textStyle1);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaStyle((TextStyle) null);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[][] floatArray0 = new float[5][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(2170.69F);
      room0.clone();
      assertEquals(2170.69F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(1287.5463F);
      boolean boolean0 = room0.isAreaCenterPointAt(0.0F, 0.0F, 0.0F);
      assertEquals(1287.5463F, room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaVisible(false);
      assertFalse(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[][] floatArray0 = new float[14][5];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(295);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 295
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      // Undeclared exception!
      try { 
        room0.removePoint(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least one point
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint((-1971));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1971
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 0.0F, 3);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-65.54272F), 3, 3);
      assertEquals(1.5F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1.0F, (-643.2F), 1694);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1694
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }
}
