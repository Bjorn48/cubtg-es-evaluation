/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:32:19 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.ArminRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CounterBasedPrimeImplicantStrategy_ESTest extends CounterBasedPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, arminRestarts0);
      solver0.registerLiteral(99);
      int[] intArray0 = solver0.findModel();
      int[] intArray1 = counterBasedPrimeImplicantStrategy0.compute(solver0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, arminRestarts0);
      int[] intArray0 = solver0.findModel();
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      int[] intArray1 = counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertNotSame(intArray1, intArray0);
  }
}
