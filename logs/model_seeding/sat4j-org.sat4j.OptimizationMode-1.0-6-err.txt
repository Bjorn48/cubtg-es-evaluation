[MASTER] 05:02:18.598 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.LexicoDecorator<T> : Type points to itself
[MASTER] 05:02:18.599 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 05:04:24.053 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:389) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) ~[na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_191]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:348) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) ~[na:1.8.0_191]
	... 3 common frames omitted
Caused by: java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:687) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1885) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readEnum(ObjectInputStream.java:1994) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1570) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:561) ~[na:1.8.0_191]
	at org.evosuite.assertion.Assertion.readObject(Assertion.java:256) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_191]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_191]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.HashSet.readObject(HashSet.java:341) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:561) ~[na:1.8.0_191]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1139) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.unmarshalParametersUnchecked(UnicastServerRef.java:628) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.unmarshalParameters(UnicastServerRef.java:616) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:338) ~[na:1.8.0_191]
	... 12 common frames omitted
[MASTER] 05:04:36.894 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_52_1550376276769/org/sat4j/OptimizationMode_52_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_52_1550376276769/org/sat4j/OptimizationMode_52_tmp__ESTest_scaffolding.java]]
[MASTER] 05:04:36.894 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:04:36.894 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:04:36.898 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method test22() is already defined in class org.sat4j.OptimizationMode_52_tmp__ESTest: 250
[MASTER] 05:04:36.898 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method test22() is already defined in class org.sat4j.OptimizationMode_52_tmp__ESTest: 387
[MASTER] 05:04:36.900 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_52_1550376276769/org/sat4j/OptimizationMode_52_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 04:04:36 GMT 2019
4:  */
5: 
6: package org.sat4j;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.io.PrintWriter;
13: import java.io.StringWriter;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: import org.sat4j.DecisionMode;
20: import org.sat4j.ExitCode;
21: import org.sat4j.ILauncherMode;
22: import org.sat4j.MUSLauncher;
23: import org.sat4j.OptimizationMode;
24: import org.sat4j.opt.MinOneDecorator;
25: import org.sat4j.reader.GroupedCNFReader;
26: import org.sat4j.specs.IGroupSolver;
27: import org.sat4j.specs.ILogAble;
28: import org.sat4j.specs.IProblem;
29: import org.sat4j.specs.ISolver;
30: import org.sat4j.specs.IVecInt;
31: import org.sat4j.tools.ClausalCardinalitiesDecorator;
32: import org.sat4j.tools.DimacsOutputSolver;
33: 
34: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
35: public class OptimizationMode_52_tmp__ESTest extends OptimizationMode_52_tmp__ESTest_scaffolding {
36: 
37:   @Test(timeout = 4000)
38:   public void test00()  throws Throwable  {
39:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
40:       // Undeclared exception!
41:       try { 
42:         optimizationMode0.onSolutionFound((IVecInt) null);
43:         fail("Expecting exception: UnsupportedOperationException");
44:       
45:       } catch(UnsupportedOperationException e) {
46:          //
47:          // Not implemented yet!
48:          //
49:          verifyException("org.sat4j.OptimizationMode", e);
50:       }
51:   }
52: 
53:   @Test(timeout = 4000)
54:   public void test01()  throws Throwable  {
55:       OptimizationMode optimizationMode0 = new OptimizationMode();
56:       ExitCode exitCode0 = ExitCode.SATISFIABLE;
57:       optimizationMode0.setExitCode(exitCode0);
58:       assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
59:   }
60: 
61:   @Test(timeout = 4000)
62:   public void test02()  throws Throwable  {
63:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
64:       optimizationMode0.setIncomplete(true);
65:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
66:   }
67: 
68:   @Test(timeout = 4000)
69:   public void test03()  throws Throwable  {
70:       OptimizationMode optimizationMode0 = new OptimizationMode();
71:       optimizationMode0.onUnsatTermination();
72:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
73:   }
74: 
75:   @Test(timeout = 4000)
76:   public void test04()  throws Throwable  {
77:       int[] intArray0 = new int[1];
78:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
79:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
80:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
81:       ILogAble iLogAble0 = ILogAble.CONSOLE;
82:       StringWriter stringWriter0 = new StringWriter();
83:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
84:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
85:       // Undeclared exception!
86:       try { 
87:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
88:        //  fail("Expecting exception: AssertionError");
89:        // Unstable assertion
90:       } catch(AssertionError e) {
91:          //
92:          // no message in exception (getMessage() returned null)
93:          //
94:       }
95:   }
96: 
97:   @Test(timeout = 4000)
98:   public void test05()  throws Throwable  {
99:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
100:       ILogAble iLogAble0 = ILogAble.CONSOLE;
101:       StringWriter stringWriter0 = new StringWriter();
102:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
103:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
104:       optimizationMode0.displayResult((ISolver) null, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
105:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
106:   }
107: 
108:   @Test(timeout = 4000)
109:   public void test06()  throws Throwable  {
110:       OptimizationMode optimizationMode0 = new OptimizationMode();
111:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
112:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
113:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
114:       ILogAble iLogAble0 = ILogAble.CONSOLE;
115:       StringWriter stringWriter0 = new StringWriter();
116:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
117:       optimizationMode0.displayResult(clausalCardinalitiesDecorator0, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, (-1822), true);
118:       assertEquals("s UNKNOWN\n", stringWriter0.toString());
119:   }
120: 
121:   @Test(timeout = 4000)
122:   public void test07()  throws Throwable  {
123:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
124:       doReturn(false).when(minOneDecorator0).isSatisfiable();
125:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
126:       clausalCardinalitiesDecorator0.isSatisfiable();
127:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
128:       ILogAble iLogAble0 = ILogAble.CONSOLE;
129:       groupedCNFReader0.disableNumberOfConstraintCheck();
130:       StringWriter stringWriter0 = new StringWriter();
131:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
132:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
133:       // Undeclared exception!
134:       try { 
135:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 846L, false);
136:        //  fail("Expecting exception: AssertionError");
137:        // Unstable assertion
138:       } catch(AssertionError e) {
139:          //
140:          // no message in exception (getMessage() returned null)
141:          //
142:       }
143:   }
144: 
145:   @Test(timeout = 4000)
146:   public void test08()  throws Throwable  {
147:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
148:       doReturn(true).when(minOneDecorator0).isSatisfiable();
149:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
150:       clausalCardinalitiesDecorator0.isSatisfiable();
151:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
152:       ILogAble iLogAble0 = ILogAble.CONSOLE;
153:       groupedCNFReader0.disableNumberOfConstraintCheck();
154:       StringWriter stringWriter0 = new StringWriter();
155:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
156:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
157:       // Undeclared exception!
158:       try { 
159:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
160:        //  fail("Expecting exception: AssertionError");
161:        // Unstable assertion
162:       } catch(AssertionError e) {
163:          //
164:          // no message in exception (getMessage() returned null)
165:          //
166:       }
167:   }
168: 
169:   @Test(timeout = 4000)
170:   public void test09()  throws Throwable  {
171:       Integer integer0 = new Integer(13);
172:       integer0.intValue();
173:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
174:       IGroupSolver iGroupSolver0 = null;
175:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
176:       ILogAble iLogAble0 = ILogAble.CONSOLE;
177:       groupedCNFReader0.disableNumberOfConstraintCheck();
178:       StringWriter stringWriter0 = new StringWriter();
179:       ILogAble iLogAble1 = ILogAble.CONSOLE;
180:       StringWriter stringWriter1 = new StringWriter();
181:       PrintWriter printWriter0 = new PrintWriter(stringWriter1);
182:       long long0 = 863L;
183:       OptimizationMode optimizationMode0 = new OptimizationMode();
184:       OptimizationMode optimizationMode1 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
185:       GroupedCNFReader groupedCNFReader1 = new GroupedCNFReader((IGroupSolver) null);
186:       // Undeclared exception!
187:       try { 
188:         optimizationMode1.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader1, 863L, false);
189:        //  fail("Expecting exception: AssertionError");
190:        // Unstable assertion
191:       } catch(AssertionError e) {
192:          //
193:          // no message in exception (getMessage() returned null)
194:          //
195:       }
196:   }
197: 
198:   @Test(timeout = 4000)
199:   public void test10()  throws Throwable  {
200:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
201:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
202:       ILogAble iLogAble0 = ILogAble.CONSOLE;
203:       groupedCNFReader0.disableNumberOfConstraintCheck();
204:       StringWriter stringWriter0 = new StringWriter();
205:       ILogAble iLogAble1 = ILogAble.CONSOLE;
206:       StringWriter stringWriter1 = new StringWriter();
207:       PrintWriter printWriter0 = new PrintWriter(stringWriter1);
208:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
209:       OptimizationMode optimizationMode1 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
210:       GroupedCNFReader groupedCNFReader1 = new GroupedCNFReader((IGroupSolver) null);
211:       // Undeclared exception!
212:       try { 
213:         optimizationMode1.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader1, 863L, false);
214:        //  fail("Expecting exception: AssertionError");
215:        // Unstable assertion
216:       } catch(AssertionError e) {
217:          //
218:          // no message in exception (getMessage() returned null)
219:          //
220:       }
221:   }
222: 
223:   @Test(timeout = 4000)
224:   public void test11()  throws Throwable  {
225:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
226:       ILogAble iLogAble0 = ILogAble.CONSOLE;
227:       ILogAble iLogAble1 = ILogAble.CONSOLE;
228:       StringWriter stringWriter0 = new StringWriter();
229:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
230:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
231:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
232:       // Undeclared exception!
233:       try { 
234:         optimizationMode0.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
235:        //  fail("Expecting exception: AssertionError");
236:        // Unstable assertion
237:       } catch(AssertionError e) {
238:          //
239:          // no message in exception (getMessage() returned null)
240:          //
241:       }
242:   }
243: 
244:   @Test(timeout = 4000)
245:   public void test22()  throws Throwable  {
246:       
247:   }
248: 
249:   @Test(timeout = 4000)
250:   public void test22()  throws Throwable  {
251:       
252:   }
253: 
254:   @Test(timeout = 4000)
255:   public void test14()  throws Throwable  {
256:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
257:       doReturn(true).when(minOneDecorator0).admitABetterSolution();
258:       doReturn(true).when(minOneDecorator0).hasNoObjectiveFunction();
259:       doReturn(true).when(minOneDecorator0).nonOptimalMeansSatisfiable();
260:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
261:       MUSLauncher mUSLauncher0 = new MUSLauncher();
262:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
263:       OptimizationMode optimizationMode0 = new OptimizationMode();
264:       optimizationMode0.solve(minOneDecorator0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, (-608L));
265:       assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
266:   }
267: 
268:   @Test(timeout = 4000)
269:   public void test15()  throws Throwable  {
270:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
271:       doReturn(false).when(minOneDecorator0).admitABetterSolution();
272:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
273:       MUSLauncher mUSLauncher0 = new MUSLauncher();
274:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
275:       OptimizationMode optimizationMode0 = new OptimizationMode();
276:       optimizationMode0.solve(minOneDecorator0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, (-608L));
277:       assertFalse(groupedCNFReader0.hasAMapping());
278:   }
279: 
280:   @Test(timeout = 4000)
281:   public void test16()  throws Throwable  {
282:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
283:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
284:       ILogAble iLogAble0 = ILogAble.CONSOLE;
285:       StringWriter stringWriter0 = new StringWriter();
286:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
287:       DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
288:       // Undeclared exception!
289:       try { 
290:         decisionMode0.displayResult((ISolver) null, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 0L, true);
291:        //  fail("Expecting exception: IllegalArgumentException");
292:        // Unstable assertion
293:       } catch(IllegalArgumentException e) {
294:       }
295:   }
296: 
297:   @Test(timeout = 4000)
298:   public void test17()  throws Throwable  {
299:       ILogAble iLogAble0 = ILogAble.CONSOLE;
300:       StringWriter stringWriter0 = new StringWriter();
301:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
302:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
303:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
304:       DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
305:       // Undeclared exception!
306:       try { 
307:         optimizationMode0.displayResult(dimacsOutputSolver0, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
308:         fail("Expecting exception: UnsupportedOperationException");
309:       
310:       } catch(UnsupportedOperationException e) {
311:          //
312:          // no message in exception (getMessage() returned null)
313:          //
314:          verifyException("org.sat4j.tools.DimacsOutputSolver", e);
315:       }
316:   }
317: 
318:   @Test(timeout = 4000)
319:   public void test18()  throws Throwable  {
320:       DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
321:       // Undeclared exception!
322:       try { 
323:         decisionMode0.getCurrentExitCode();
324:        //  fail("Expecting exception: IllegalArgumentException");
325:        // Unstable assertion
326:       } catch(IllegalArgumentException e) {
327:       }
328:   }
329: 
330:   @Test(timeout = 4000)
331:   public void test19()  throws Throwable  {
332:       OptimizationMode optimizationMode0 = new OptimizationMode();
333:       int[] intArray0 = new int[6];
334:       // Undeclared exception!
335:       try { 
336:         optimizationMode0.onSolutionFound(intArray0);
337:         fail("Expecting exception: NullPointerException");
338:       
339:       } catch(NullPointerException e) {
340:          //
341:          // no message in exception (getMessage() returned null)
342:          //
343:          verifyException("org.sat4j.OptimizationMode", e);
344:       }
345:   }
346: 
347:   @Test(timeout = 4000)
348:   public void test20()  throws Throwable  {
349:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
350:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
351:       MUSLauncher mUSLauncher0 = new MUSLauncher();
352:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Found ");
353:       DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
354:       // Undeclared exception!
355:       try { 
356:         optimizationMode0.solve(dimacsOutputSolver0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, 0);
357:         fail("Expecting exception: ClassCastException");
358:       
359:       } catch(ClassCastException e) {
360:          //
361:          // org.sat4j.tools.DimacsOutputSolver cannot be cast to org.sat4j.specs.IOptimizationProblem
362:          //
363:          verifyException("org.sat4j.OptimizationMode", e);
364:       }
365:   }
366: 
367:   @Test(timeout = 4000)
368:   public void test21()  throws Throwable  {
369:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
370:       MUSLauncher mUSLauncher0 = new MUSLauncher();
371:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
372:       OptimizationMode optimizationMode0 = new OptimizationMode();
373:       // Undeclared exception!
374:       try { 
375:         optimizationMode0.solve((IProblem) null, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, 125L);
376:         fail("Expecting exception: NullPointerException");
377:       
378:       } catch(NullPointerException e) {
379:          //
380:          // no message in exception (getMessage() returned null)
381:          //
382:          verifyException("org.sat4j.OptimizationMode", e);
383:       }
384:   }
385: 
386:   @Test(timeout = 4000)
387:   public void test22()  throws Throwable  {
388:       
389:   }
390: 
391:   @Test(timeout = 4000)
392:   public void test23()  throws Throwable  {
393:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
394:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
395:       ILogAble iLogAble0 = ILogAble.CONSOLE;
396:       StringWriter stringWriter0 = new StringWriter();
397:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
398:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
399:       // Undeclared exception!
400:       try { 
401:         optimizationMode0.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
402:         fail("Expecting exception: AssertionError");
403:       
404:       } catch(AssertionError e) {
405:          //
406:          // no message in exception (getMessage() returned null)
407:          //
408:       }
409:   }
410: }
RegularFileObject[/tmp/EvoSuite_52_1550376276769/org/sat4j/OptimizationMode_52_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 04:04:36 GMT 2019
5:  */
6: 
7: package org.sat4j;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class OptimizationMode_52_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.OptimizationMode"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(OptimizationMode_52_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.tools.SolutionCounter",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.reader.AIGReader",
91:       "org.sat4j.minisat.core.Counter",
92:       "org.sat4j.minisat.learning.FixedLengthLearning",
93:       "org.sat4j.minisat.core.Undoable",
94:       "org.sat4j.minisat.constraints.cnf.Clauses",
95:       "org.sat4j.ExitCode",
96:       "org.sat4j.minisat.constraints.cnf.UnitClause",
97:       "org.sat4j.specs.Lbool",
98:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
99:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
100:       "org.sat4j.AbstractLauncher$2",
101:       "org.sat4j.specs.IOptimizationProblem",
102:       "org.sat4j.AbstractLauncher$1",
103:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
104:       "org.sat4j.specs.SearchListener",
105:       "org.sat4j.reader.AAGReader",
106:       "org.sat4j.minisat.core.SimplificationType",
107:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
108:       "org.sat4j.minisat.core.SearchParams",
109:       "org.sat4j.tools.Minimal4InclusionModel",
110:       "org.sat4j.minisat.core.Heap",
111:       "org.sat4j.specs.ILogAble$1",
112:       "org.sat4j.specs.Constr",
113:       "org.sat4j.specs.ISolverService",
114:       "org.sat4j.minisat.constraints.cnf.WLClause",
115:       "org.sat4j.specs.IGroupSolver",
116:       "org.sat4j.opt.MaxSatDecorator",
117:       "org.sat4j.DecisionMode",
118:       "org.sat4j.specs.UnitClauseProvider$1",
119:       "org.sat4j.minisat.constraints.cnf.HTClause",
120:       "org.sat4j.minisat.core.CircularBuffer",
121:       "org.sat4j.minisat.learning.LimitedLearning",
122:       "org.sat4j.minisat.core.ActivityListener",
123:       "org.sat4j.minisat.restarts.Glucose21Restarts",
124:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
125:       "org.sat4j.minisat.constraints.card.AtLeast",
126:       "org.sat4j.tools.OptToSatAdapter",
127:       "org.sat4j.specs.ILogAble",
128:       "org.sat4j.reader.GroupedCNFReader",
129:       "org.sat4j.minisat.constraints.card.MinWatchCard",
130:       "org.sat4j.core.LiteralsUtils",
131:       "org.sat4j.specs.IVecInt",
132:       "org.sat4j.core.ConstrGroup",
133:       "org.sat4j.tools.SolutionFoundListener",
134:       "org.sat4j.minisat.core.Learner",
135:       "org.sat4j.tools.DimacsStringSolver",
136:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
137:       "org.sat4j.minisat.core.ActivityComparator",
138:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
139:       "org.sat4j.tools.CheckMUSSolutionListener",
140:       "org.sat4j.minisat.constraints.cnf.Lits",
141:       "org.sat4j.minisat.core.Solver$2",
142:       "org.sat4j.specs.UnitClauseProvider",
143:       "org.sat4j.minisat.core.Solver$1",
144:       "org.sat4j.AbstractLauncher",
145:       "org.sat4j.minisat.learning.AbstractLearning",
146:       "org.sat4j.minisat.core.Solver$4",
147:       "org.sat4j.minisat.core.Solver$3",
148:       "org.sat4j.core.VecInt$1",
149:       "org.sat4j.core.Vec$1",
150:       "org.sat4j.minisat.core.DataStructureFactory",
151:       "org.sat4j.minisat.core.Solver$6",
152:       "org.sat4j.minisat.core.Solver$8",
153:       "org.sat4j.minisat.core.Solver$7",
154:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
155:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
156:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
157:       "org.sat4j.tools.encoding.Binomial",
158:       "org.sat4j.minisat.orders.SubsetVarOrder",
159:       "org.sat4j.tools.ModelIteratorToSATAdapter",
160:       "org.sat4j.tools.GroupClauseSelectorSolver",
161:       "org.sat4j.tools.xplain.Xplain",
162:       "org.sat4j.tools.ModelIterator",
163:       "org.sat4j.reader.ParseFormatException",
164:       "org.sat4j.tools.SolutionFoundListener$1",
165:       "org.sat4j.tools.AbstractClauseSelectorSolver",
166:       "org.sat4j.tools.LexicoDecorator",
167:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
168:       "org.sat4j.minisat.core.ActivityLCDS",
169:       "org.sat4j.tools.AbstractOutputSolver",
170:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
171:       "org.sat4j.MUSLauncher",
172:       "org.sat4j.minisat.learning.ActiveLearning",
173:       "org.sat4j.minisat.orders.VarOrderHeap",
174:       "org.sat4j.reader.EfficientScanner",
175:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
176:       "org.sat4j.LightFactory",
177:       "org.sat4j.tools.NegationDecorator",
178:       "org.sat4j.reader.InstanceReader",
179:       "org.sat4j.minisat.core.ConflictTimer",
180:       "org.sat4j.minisat.core.VarActivityListener",
181:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
182:       "org.sat4j.specs.RandomAccessModel",
183:       "org.sat4j.minisat.core.LBDConflictTimer",
184:       "org.sat4j.tools.DimacsOutputSolver",
185:       "org.sat4j.tools.encoding.Binary",
186:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
187:       "org.sat4j.minisat.orders.TabuListDecorator",
188:       "org.sat4j.minisat.core.AgeLCDS",
189:       "org.sat4j.specs.FakeConstr",
190:       "org.sat4j.opt.MinOneDecorator",
191:       "org.sat4j.core.ReadOnlyVecInt",
192:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
193:       "org.sat4j.minisat.restarts.NoRestarts",
194:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
195:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
196:       "org.sat4j.minisat.core.SizeComparator",
197:       "org.sat4j.reader.LecteurDimacs",
198:       "org.sat4j.tools.encoding.Product",
199:       "org.sat4j.specs.Propagatable",
200:       "org.sat4j.ILauncherMode",
201:       "org.sat4j.core.EmptyVecInt",
202:       "org.sat4j.minisat.core.Pair",
203:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
204:       "org.sat4j.specs.IVec",
205:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
206:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
207:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
208:       "org.sat4j.tools.Minimal4CardinalityModel",
209:       "org.sat4j.minisat.learning.MiniSATLearning",
210:       "org.sat4j.tools.MultiTracing",
211:       "org.sat4j.tools.AbstractMinimalModel",
212:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
213:       "org.sat4j.tools.encoding.Sequential",
214:       "org.sat4j.specs.TimeoutException",
215:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
216:       "org.sat4j.minisat.core.ConflictTimerContainer",
217:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
218:       "org.sat4j.minisat.core.LearningStrategy",
219:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
220:       "org.sat4j.specs.IteratorInt",
221:       "org.sat4j.specs.ISolver",
222:       "org.sat4j.minisat.orders.RandomWalkDecorator",
223:       "org.sat4j.minisat.core.VoidTracing",
224:       "org.sat4j.minisat.restarts.LubyRestarts",
225:       "org.sat4j.minisat.core.GlucoseLCDS",
226:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
227:       "org.sat4j.tools.SubModelIterator",
228:       "org.sat4j.BasicLauncher",
229:       "org.sat4j.minisat.core.ILits",
230:       "org.sat4j.specs.ContradictionException",
231:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
232:       "org.sat4j.minisat.learning.PercentLengthLearning",
233:       "org.sat4j.specs.IConstr",
234:       "org.sat4j.reader.JSONReader",
235:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
236:       "org.sat4j.tools.xplain.MinimizationStrategy",
237:       "org.sat4j.minisat.restarts.EMARestarts",
238:       "org.sat4j.tools.encoding.EncodingStrategy",
239:       "org.sat4j.tools.encoding.Policy",
240:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
241:       "org.sat4j.OptimizationMode",
242:       "org.sat4j.specs.MandatoryLiteralListener",
243:       "org.sat4j.specs.IProblem",
244:       "org.sat4j.minisat.restarts.MiniSATRestarts",
245:       "org.sat4j.tools.xplain.DeletionStrategy",
246:       "org.sat4j.tools.RupSearchListener",
247:       "org.sat4j.core.VecInt",
248:       "org.sat4j.minisat.core.Solver",
249:       "org.sat4j.tools.xplain.HighLevelXplain",
250:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
251:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
252:       "org.sat4j.core.ASolverFactory",
253:       "org.sat4j.reader.DimacsReader",
254:       "org.sat4j.core.Vec",
255:       "org.sat4j.minisat.core.Glucose2LCDS",
256:       "org.sat4j.minisat.core.SolverStats",
257:       "org.sat4j.minisat.core.ConstrActivityListener",
258:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
259:       "org.sat4j.minisat.restarts.ArminRestarts",
260:       "org.sat4j.specs.SearchListenerAdapter",
261:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
262:       "org.sat4j.tools.StatisticsSolver",
263:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
264:       "org.sat4j.tools.OutcomeListener",
265:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
266:       "org.sat4j.tools.SingleSolutionDetector",
267:       "org.sat4j.minisat.constraints.xor.Xor",
268:       "org.sat4j.minisat.orders.NaturalStaticOrder",
269:       "org.sat4j.minisat.core.ISimplifier",
270:       "org.sat4j.tools.IVisualizationTool",
271:       "org.sat4j.specs.Constr$1",
272:       "org.sat4j.specs.VarMapper",
273:       "org.sat4j.minisat.SolverFactory",
274:       "org.sat4j.tools.encoding.Ladder",
275:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
276:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
277:       "org.sat4j.minisat.orders.PureOrder",
278:       "org.sat4j.minisat.core.SizeLCDS",
279:       "org.sat4j.minisat.core.RestartStrategy",
280:       "org.sat4j.tools.xplain.Explainer",
281:       "org.sat4j.reader.Reader",
282:       "org.sat4j.minisat.core.IOrder",
283:       "org.sat4j.minisat.orders.VariableComparator",
284:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
285:       "org.sat4j.minisat.core.ICDCL",
286:       "org.sat4j.core.EmptyVecInt$1",
287:       "org.sat4j.tools.encoding.Commander"
288:     );
289:   } 
290:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
291:     mock(Class.forName("org.sat4j.opt.MinOneDecorator", false, OptimizationMode_52_tmp__ESTest_scaffolding.class.getClassLoader()));
292:   }
293: 
294:   private static void resetClasses() {
295:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(OptimizationMode_52_tmp__ESTest_scaffolding.class.getClassLoader()); 
296: 
297:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
298:       "org.sat4j.OptimizationMode",
299:       "org.sat4j.DecisionMode",
300:       "org.sat4j.ExitCode",
301:       "org.sat4j.ILauncherMode",
302:       "org.sat4j.tools.SolutionFoundListener$1",
303:       "org.sat4j.tools.SolutionFoundListener",
304:       "org.sat4j.tools.AbstractOutputSolver",
305:       "org.sat4j.tools.DimacsOutputSolver",
306:       "org.sat4j.specs.TimeoutException",
307:       "org.sat4j.core.EmptyVecInt",
308:       "org.sat4j.core.VecInt",
309:       "org.sat4j.core.ReadOnlyVecInt",
310:       "org.sat4j.tools.SolverDecorator",
311:       "org.sat4j.tools.OptToSatAdapter",
312:       "org.sat4j.specs.SearchListenerAdapter",
313:       "org.sat4j.tools.ManyCore",
314:       "org.sat4j.core.Vec",
315:       "org.sat4j.tools.LexicoDecorator",
316:       "org.sat4j.tools.AbstractClauseSelectorSolver",
317:       "org.sat4j.tools.GroupClauseSelectorSolver",
318:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
319:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
320:       "org.sat4j.core.ASolverFactory",
321:       "org.sat4j.tools.StatisticsSolver",
322:       "org.sat4j.opt.MinOneDecorator",
323:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
324:       "org.sat4j.tools.encoding.Sequential",
325:       "org.sat4j.tools.encoding.Binary",
326:       "org.sat4j.tools.encoding.Product",
327:       "org.sat4j.tools.encoding.Commander",
328:       "org.sat4j.tools.encoding.Binomial",
329:       "org.sat4j.tools.encoding.Ladder",
330:       "org.sat4j.tools.encoding.Policy",
331:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
332:       "org.sat4j.tools.SolutionCounter",
333:       "org.sat4j.AbstractLauncher",
334:       "org.sat4j.MUSLauncher",
335:       "org.sat4j.AbstractLauncher$1",
336:       "org.sat4j.tools.FullClauseSelectorSolver",
337:       "org.sat4j.tools.xplain.Xplain",
338:       "org.sat4j.minisat.SolverFactory",
339:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
340:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
341:       "org.sat4j.minisat.constraints.cnf.Lits",
342:       "org.sat4j.minisat.orders.VarOrderHeap",
343:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
344:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
345:       "org.sat4j.minisat.learning.AbstractLearning",
346:       "org.sat4j.minisat.learning.MiniSATLearning",
347:       "org.sat4j.minisat.core.Solver$1",
348:       "org.sat4j.minisat.core.Solver",
349:       "org.sat4j.minisat.restarts.MiniSATRestarts",
350:       "org.sat4j.minisat.core.SearchParams",
351:       "org.sat4j.minisat.core.ActivityComparator",
352:       "org.sat4j.minisat.core.SolverStats",
353:       "org.sat4j.minisat.core.VoidTracing",
354:       "org.sat4j.specs.UnitClauseProvider$1",
355:       "org.sat4j.specs.UnitClauseProvider",
356:       "org.sat4j.minisat.core.Solver$2",
357:       "org.sat4j.minisat.core.Solver$3",
358:       "org.sat4j.minisat.core.Solver$4",
359:       "org.sat4j.minisat.core.Pair",
360:       "org.sat4j.minisat.core.ConflictTimerAdapter",
361:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
362:       "org.sat4j.minisat.core.ActivityLCDS",
363:       "org.sat4j.minisat.core.LBDConflictTimer",
364:       "org.sat4j.minisat.core.GlucoseLCDS",
365:       "org.sat4j.minisat.core.Glucose2LCDS",
366:       "org.sat4j.minisat.core.AgeLCDS",
367:       "org.sat4j.minisat.core.SizeComparator",
368:       "org.sat4j.minisat.core.SizeLCDS",
369:       "org.sat4j.minisat.core.Solver$8",
370:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
371:       "org.sat4j.minisat.restarts.Glucose21Restarts",
372:       "org.sat4j.minisat.core.CircularBuffer",
373:       "org.sat4j.tools.xplain.DeletionStrategy",
374:       "org.sat4j.BasicLauncher",
375:       "org.sat4j.minisat.learning.LimitedLearning",
376:       "org.sat4j.minisat.learning.ActiveLearning",
377:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
378:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
379:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
380:       "org.sat4j.minisat.orders.PureOrder",
381:       "org.sat4j.minisat.orders.TabuListDecorator",
382:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
383:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
384:       "org.sat4j.minisat.restarts.ArminRestarts",
385:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
386:       "org.sat4j.opt.MaxSatDecorator",
387:       "org.sat4j.reader.DimacsReader",
388:       "org.sat4j.minisat.core.Counter",
389:       "org.sat4j.reader.InstanceReader",
390:       "org.sat4j.reader.LecteurDimacs",
391:       "org.sat4j.LightFactory",
392:       "org.sat4j.minisat.learning.FixedLengthLearning",
393:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
394:       "org.sat4j.tools.AbstractMinimalModel",
395:       "org.sat4j.minisat.restarts.NoRestarts",
396:       "org.sat4j.tools.DimacsStringSolver",
397:       "org.sat4j.reader.GroupedCNFReader",
398:       "org.sat4j.tools.ModelIterator",
399:       "org.sat4j.tools.ModelIteratorToSATAdapter",
400:       "org.sat4j.reader.JSONReader",
401:       "org.sat4j.reader.ParseFormatException",
402:       "org.sat4j.minisat.orders.SubsetVarOrder",
403:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
404:       "org.sat4j.minisat.constraints.card.AtLeast",
405:       "org.sat4j.specs.ContradictionException",
406:       "org.sat4j.reader.EfficientScanner",
407:       "org.sat4j.tools.CheckMUSSolutionListener",
408:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
409:       "org.sat4j.minisat.restarts.LubyRestarts",
410:       "org.sat4j.minisat.constraints.cnf.HTClause",
411:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
412:       "org.sat4j.minisat.learning.PercentLengthLearning",
413:       "org.sat4j.tools.Minimal4InclusionModel",
414:       "org.sat4j.minisat.orders.RandomWalkDecorator",
415:       "org.sat4j.core.EmptyVecInt$1",
416:       "org.sat4j.tools.Minimal4CardinalityModel",
417:       "org.sat4j.core.VecInt$1",
418:       "org.sat4j.tools.encoding.EncodingStrategy",
419:       "org.sat4j.tools.NegationDecorator",
420:       "org.sat4j.core.ConstrGroup",
421:       "org.sat4j.tools.SubModelIterator",
422:       "org.sat4j.tools.SingleSolutionDetector",
423:       "org.sat4j.specs.Lbool",
424:       "org.sat4j.minisat.core.Heap",
425:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
426:       "org.sat4j.minisat.core.ConflictTimerContainer",
427:       "org.sat4j.minisat.core.Solver$6",
428:       "org.sat4j.tools.RupSearchListener",
429:       "org.sat4j.tools.IVisualizationTool",
430:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
431:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
432:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
433:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
434:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
435:       "org.sat4j.minisat.core.Solver$7",
436:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
437:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
438:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
439:       "org.sat4j.minisat.constraints.cnf.WLClause",
440:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
441:       "org.sat4j.core.LiteralsUtils",
442:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
443:       "org.sat4j.specs.FakeConstr",
444:       "org.sat4j.minisat.constraints.xor.Xor",
445:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
446:       "org.sat4j.minisat.constraints.card.MinWatchCard",
447:       "org.sat4j.tools.MultiTracing",
448:       "org.sat4j.core.Vec$1",
449:       "org.sat4j.minisat.constraints.cnf.Clauses",
450:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
451:       "org.sat4j.minisat.restarts.EMARestarts",
452:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
453:       "org.sat4j.minisat.constraints.cnf.UnitClause",
454:       "org.sat4j.minisat.orders.NaturalStaticOrder",
455:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
456:       "org.sat4j.reader.Reader",
457:       "org.sat4j.specs.ILogAble$1",
458:       "org.sat4j.specs.ILogAble"
459:     );
460:   }
461: }

[MASTER] 05:04:36.977 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_53_1550376276900/org/sat4j/OptimizationMode_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_53_1550376276900/org/sat4j/OptimizationMode_53_tmp__ESTest_scaffolding.java]]
[MASTER] 05:04:36.977 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:04:36.977 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:04:36.978 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method test11() is already defined in class org.sat4j.OptimizationMode_53_tmp__ESTest: 195
[MASTER] 05:04:36.978 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method test11() is already defined in class org.sat4j.OptimizationMode_53_tmp__ESTest: 200
[MASTER] 05:04:36.980 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_53_1550376276900/org/sat4j/OptimizationMode_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 04:04:36 GMT 2019
4:  */
5: 
6: package org.sat4j;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.io.PrintWriter;
13: import java.io.StringWriter;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: import org.sat4j.DecisionMode;
20: import org.sat4j.ExitCode;
21: import org.sat4j.ILauncherMode;
22: import org.sat4j.MUSLauncher;
23: import org.sat4j.OptimizationMode;
24: import org.sat4j.opt.MinOneDecorator;
25: import org.sat4j.reader.GroupedCNFReader;
26: import org.sat4j.specs.IGroupSolver;
27: import org.sat4j.specs.ILogAble;
28: import org.sat4j.specs.IProblem;
29: import org.sat4j.specs.ISolver;
30: import org.sat4j.specs.IVecInt;
31: import org.sat4j.tools.ClausalCardinalitiesDecorator;
32: import org.sat4j.tools.DimacsOutputSolver;
33: 
34: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
35: public class OptimizationMode_53_tmp__ESTest extends OptimizationMode_53_tmp__ESTest_scaffolding {
36: 
37:   @Test(timeout = 4000)
38:   public void test00()  throws Throwable  {
39:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
40:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
41:       ILogAble iLogAble0 = ILogAble.CONSOLE;
42:       StringWriter stringWriter0 = new StringWriter();
43:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
44:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
45:       // Undeclared exception!
46:       try { 
47:         optimizationMode0.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
48:         fail("Expecting exception: AssertionError");
49:       
50:       } catch(AssertionError e) {
51:          //
52:          // no message in exception (getMessage() returned null)
53:          //
54:       }
55:   }
56: 
57:   @Test(timeout = 4000)
58:   public void test11()  throws Throwable  {
59:       
60:   }
61: 
62:   @Test(timeout = 4000)
63:   public void test02()  throws Throwable  {
64:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
65:       MUSLauncher mUSLauncher0 = new MUSLauncher();
66:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
67:       OptimizationMode optimizationMode0 = new OptimizationMode();
68:       // Undeclared exception!
69:       try { 
70:         optimizationMode0.solve((IProblem) null, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, 125L);
71:         fail("Expecting exception: NullPointerException");
72:       
73:       } catch(NullPointerException e) {
74:          //
75:          // no message in exception (getMessage() returned null)
76:          //
77:          verifyException("org.sat4j.OptimizationMode", e);
78:       }
79:   }
80: 
81:   @Test(timeout = 4000)
82:   public void test03()  throws Throwable  {
83:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
84:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
85:       MUSLauncher mUSLauncher0 = new MUSLauncher();
86:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Found ");
87:       DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
88:       // Undeclared exception!
89:       try { 
90:         optimizationMode0.solve(dimacsOutputSolver0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, 0);
91:         fail("Expecting exception: ClassCastException");
92:       
93:       } catch(ClassCastException e) {
94:          //
95:          // org.sat4j.tools.DimacsOutputSolver cannot be cast to org.sat4j.specs.IOptimizationProblem
96:          //
97:          verifyException("org.sat4j.OptimizationMode", e);
98:       }
99:   }
100: 
101:   @Test(timeout = 4000)
102:   public void test04()  throws Throwable  {
103:       OptimizationMode optimizationMode0 = new OptimizationMode();
104:       int[] intArray0 = new int[6];
105:       // Undeclared exception!
106:       try { 
107:         optimizationMode0.onSolutionFound(intArray0);
108:         fail("Expecting exception: NullPointerException");
109:       
110:       } catch(NullPointerException e) {
111:          //
112:          // no message in exception (getMessage() returned null)
113:          //
114:          verifyException("org.sat4j.OptimizationMode", e);
115:       }
116:   }
117: 
118:   @Test(timeout = 4000)
119:   public void test05()  throws Throwable  {
120:       DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
121:       // Undeclared exception!
122:       try { 
123:         decisionMode0.getCurrentExitCode();
124:        //  fail("Expecting exception: IllegalArgumentException");
125:        // Unstable assertion
126:       } catch(IllegalArgumentException e) {
127:       }
128:   }
129: 
130:   @Test(timeout = 4000)
131:   public void test06()  throws Throwable  {
132:       ILogAble iLogAble0 = ILogAble.CONSOLE;
133:       StringWriter stringWriter0 = new StringWriter();
134:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
135:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
136:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
137:       DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
138:       // Undeclared exception!
139:       try { 
140:         optimizationMode0.displayResult(dimacsOutputSolver0, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
141:         fail("Expecting exception: UnsupportedOperationException");
142:       
143:       } catch(UnsupportedOperationException e) {
144:          //
145:          // no message in exception (getMessage() returned null)
146:          //
147:          verifyException("org.sat4j.tools.DimacsOutputSolver", e);
148:       }
149:   }
150: 
151:   @Test(timeout = 4000)
152:   public void test07()  throws Throwable  {
153:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
154:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
155:       ILogAble iLogAble0 = ILogAble.CONSOLE;
156:       StringWriter stringWriter0 = new StringWriter();
157:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
158:       DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
159:       // Undeclared exception!
160:       try { 
161:         decisionMode0.displayResult((ISolver) null, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 0L, true);
162:        //  fail("Expecting exception: IllegalArgumentException");
163:        // Unstable assertion
164:       } catch(IllegalArgumentException e) {
165:       }
166:   }
167: 
168:   @Test(timeout = 4000)
169:   public void test08()  throws Throwable  {
170:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
171:       doReturn(false).when(minOneDecorator0).admitABetterSolution();
172:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
173:       MUSLauncher mUSLauncher0 = new MUSLauncher();
174:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
175:       OptimizationMode optimizationMode0 = new OptimizationMode();
176:       optimizationMode0.solve(minOneDecorator0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, (-608L));
177:       assertFalse(groupedCNFReader0.hasAMapping());
178:   }
179: 
180:   @Test(timeout = 4000)
181:   public void test09()  throws Throwable  {
182:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
183:       doReturn(true).when(minOneDecorator0).admitABetterSolution();
184:       doReturn(true).when(minOneDecorator0).hasNoObjectiveFunction();
185:       doReturn(true).when(minOneDecorator0).nonOptimalMeansSatisfiable();
186:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
187:       MUSLauncher mUSLauncher0 = new MUSLauncher();
188:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
189:       OptimizationMode optimizationMode0 = new OptimizationMode();
190:       optimizationMode0.solve(minOneDecorator0, groupedCNFReader0, mUSLauncher0, mockPrintWriter0, (-608L));
191:       assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
192:   }
193: 
194:   @Test(timeout = 4000)
195:   public void test11()  throws Throwable  {
196:       
197:   }
198: 
199:   @Test(timeout = 4000)
200:   public void test11()  throws Throwable  {
201:       
202:   }
203: 
204:   @Test(timeout = 4000)
205:   public void test12()  throws Throwable  {
206:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
207:       ILogAble iLogAble0 = ILogAble.CONSOLE;
208:       ILogAble iLogAble1 = ILogAble.CONSOLE;
209:       StringWriter stringWriter0 = new StringWriter();
210:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
211:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
212:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
213:       // Undeclared exception!
214:       try { 
215:         optimizationMode0.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, false);
216:        //  fail("Expecting exception: AssertionError");
217:        // Unstable assertion
218:       } catch(AssertionError e) {
219:          //
220:          // no message in exception (getMessage() returned null)
221:          //
222:       }
223:   }
224: 
225:   @Test(timeout = 4000)
226:   public void test13()  throws Throwable  {
227:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
228:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
229:       ILogAble iLogAble0 = ILogAble.CONSOLE;
230:       groupedCNFReader0.disableNumberOfConstraintCheck();
231:       StringWriter stringWriter0 = new StringWriter();
232:       ILogAble iLogAble1 = ILogAble.CONSOLE;
233:       StringWriter stringWriter1 = new StringWriter();
234:       PrintWriter printWriter0 = new PrintWriter(stringWriter1);
235:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
236:       OptimizationMode optimizationMode1 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
237:       GroupedCNFReader groupedCNFReader1 = new GroupedCNFReader((IGroupSolver) null);
238:       // Undeclared exception!
239:       try { 
240:         optimizationMode1.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader1, 863L, false);
241:        //  fail("Expecting exception: AssertionError");
242:        // Unstable assertion
243:       } catch(AssertionError e) {
244:          //
245:          // no message in exception (getMessage() returned null)
246:          //
247:       }
248:   }
249: 
250:   @Test(timeout = 4000)
251:   public void test14()  throws Throwable  {
252:       Integer integer0 = new Integer(13);
253:       integer0.intValue();
254:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
255:       IGroupSolver iGroupSolver0 = null;
256:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
257:       ILogAble iLogAble0 = ILogAble.CONSOLE;
258:       groupedCNFReader0.disableNumberOfConstraintCheck();
259:       StringWriter stringWriter0 = new StringWriter();
260:       ILogAble iLogAble1 = ILogAble.CONSOLE;
261:       StringWriter stringWriter1 = new StringWriter();
262:       PrintWriter printWriter0 = new PrintWriter(stringWriter1);
263:       long long0 = 863L;
264:       OptimizationMode optimizationMode0 = new OptimizationMode();
265:       OptimizationMode optimizationMode1 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
266:       GroupedCNFReader groupedCNFReader1 = new GroupedCNFReader((IGroupSolver) null);
267:       // Undeclared exception!
268:       try { 
269:         optimizationMode1.displayResult(minOneDecorator0, minOneDecorator0, iLogAble0, printWriter0, groupedCNFReader1, 863L, false);
270:        //  fail("Expecting exception: AssertionError");
271:        // Unstable assertion
272:       } catch(AssertionError e) {
273:          //
274:          // no message in exception (getMessage() returned null)
275:          //
276:       }
277:   }
278: 
279:   @Test(timeout = 4000)
280:   public void test15()  throws Throwable  {
281:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
282:       doReturn(true).when(minOneDecorator0).isSatisfiable();
283:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
284:       clausalCardinalitiesDecorator0.isSatisfiable();
285:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
286:       ILogAble iLogAble0 = ILogAble.CONSOLE;
287:       groupedCNFReader0.disableNumberOfConstraintCheck();
288:       StringWriter stringWriter0 = new StringWriter();
289:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
290:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
291:       // Undeclared exception!
292:       try { 
293:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
294:        //  fail("Expecting exception: AssertionError");
295:        // Unstable assertion
296:       } catch(AssertionError e) {
297:          //
298:          // no message in exception (getMessage() returned null)
299:          //
300:       }
301:   }
302: 
303:   @Test(timeout = 4000)
304:   public void test16()  throws Throwable  {
305:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
306:       doReturn(false).when(minOneDecorator0).isSatisfiable();
307:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
308:       clausalCardinalitiesDecorator0.isSatisfiable();
309:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
310:       ILogAble iLogAble0 = ILogAble.CONSOLE;
311:       groupedCNFReader0.disableNumberOfConstraintCheck();
312:       StringWriter stringWriter0 = new StringWriter();
313:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
314:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
315:       // Undeclared exception!
316:       try { 
317:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 846L, false);
318:        //  fail("Expecting exception: AssertionError");
319:        // Unstable assertion
320:       } catch(AssertionError e) {
321:          //
322:          // no message in exception (getMessage() returned null)
323:          //
324:       }
325:   }
326: 
327:   @Test(timeout = 4000)
328:   public void test17()  throws Throwable  {
329:       OptimizationMode optimizationMode0 = new OptimizationMode();
330:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
331:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
332:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
333:       ILogAble iLogAble0 = ILogAble.CONSOLE;
334:       StringWriter stringWriter0 = new StringWriter();
335:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
336:       optimizationMode0.displayResult(clausalCardinalitiesDecorator0, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, (-1822), true);
337:       assertEquals("s UNKNOWN\n", stringWriter0.toString());
338:   }
339: 
340:   @Test(timeout = 4000)
341:   public void test18()  throws Throwable  {
342:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
343:       ILogAble iLogAble0 = ILogAble.CONSOLE;
344:       StringWriter stringWriter0 = new StringWriter();
345:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
346:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
347:       optimizationMode0.displayResult((ISolver) null, (IProblem) null, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
348:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
349:   }
350: 
351:   @Test(timeout = 4000)
352:   public void test19()  throws Throwable  {
353:       int[] intArray0 = new int[1];
354:       MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
355:       ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
356:       GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
357:       ILogAble iLogAble0 = ILogAble.CONSOLE;
358:       StringWriter stringWriter0 = new StringWriter();
359:       PrintWriter printWriter0 = new PrintWriter(stringWriter0);
360:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
361:       // Undeclared exception!
362:       try { 
363:         optimizationMode0.displayResult(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator0, iLogAble0, printWriter0, groupedCNFReader0, 863L, true);
364:        //  fail("Expecting exception: AssertionError");
365:        // Unstable assertion
366:       } catch(AssertionError e) {
367:          //
368:          // no message in exception (getMessage() returned null)
369:          //
370:       }
371:   }
372: 
373:   @Test(timeout = 4000)
374:   public void test20()  throws Throwable  {
375:       OptimizationMode optimizationMode0 = new OptimizationMode();
376:       optimizationMode0.onUnsatTermination();
377:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
378:   }
379: 
380:   @Test(timeout = 4000)
381:   public void test21()  throws Throwable  {
382:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
383:       optimizationMode0.setIncomplete(true);
384:       assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
385:   }
386: 
387:   @Test(timeout = 4000)
388:   public void test22()  throws Throwable  {
389:       OptimizationMode optimizationMode0 = new OptimizationMode();
390:       ExitCode exitCode0 = ExitCode.SATISFIABLE;
391:       optimizationMode0.setExitCode(exitCode0);
392:       assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
393:   }
394: 
395:   @Test(timeout = 4000)
396:   public void test23()  throws Throwable  {
397:       OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
398:       // Undeclared exception!
399:       try { 
400:         optimizationMode0.onSolutionFound((IVecInt) null);
401:         fail("Expecting exception: UnsupportedOperationException");
402:       
403:       } catch(UnsupportedOperationException e) {
404:          //
405:          // Not implemented yet!
406:          //
407:          verifyException("org.sat4j.OptimizationMode", e);
408:       }
409:   }
410: }
RegularFileObject[/tmp/EvoSuite_53_1550376276900/org/sat4j/OptimizationMode_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 04:04:36 GMT 2019
5:  */
6: 
7: package org.sat4j;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class OptimizationMode_53_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.OptimizationMode"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(OptimizationMode_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.tools.SolutionCounter",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.reader.AIGReader",
91:       "org.sat4j.minisat.core.Counter",
92:       "org.sat4j.minisat.learning.FixedLengthLearning",
93:       "org.sat4j.minisat.core.Undoable",
94:       "org.sat4j.minisat.constraints.cnf.Clauses",
95:       "org.sat4j.ExitCode",
96:       "org.sat4j.minisat.constraints.cnf.UnitClause",
97:       "org.sat4j.specs.Lbool",
98:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
99:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
100:       "org.sat4j.AbstractLauncher$2",
101:       "org.sat4j.specs.IOptimizationProblem",
102:       "org.sat4j.AbstractLauncher$1",
103:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
104:       "org.sat4j.specs.SearchListener",
105:       "org.sat4j.reader.AAGReader",
106:       "org.sat4j.minisat.core.SimplificationType",
107:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
108:       "org.sat4j.minisat.core.SearchParams",
109:       "org.sat4j.tools.Minimal4InclusionModel",
110:       "org.sat4j.minisat.core.Heap",
111:       "org.sat4j.specs.ILogAble$1",
112:       "org.sat4j.specs.Constr",
113:       "org.sat4j.specs.ISolverService",
114:       "org.sat4j.minisat.constraints.cnf.WLClause",
115:       "org.sat4j.specs.IGroupSolver",
116:       "org.sat4j.opt.MaxSatDecorator",
117:       "org.sat4j.DecisionMode",
118:       "org.sat4j.specs.UnitClauseProvider$1",
119:       "org.sat4j.minisat.constraints.cnf.HTClause",
120:       "org.sat4j.minisat.core.CircularBuffer",
121:       "org.sat4j.minisat.learning.LimitedLearning",
122:       "org.sat4j.minisat.core.ActivityListener",
123:       "org.sat4j.minisat.restarts.Glucose21Restarts",
124:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
125:       "org.sat4j.minisat.constraints.card.AtLeast",
126:       "org.sat4j.tools.OptToSatAdapter",
127:       "org.sat4j.specs.ILogAble",
128:       "org.sat4j.reader.GroupedCNFReader",
129:       "org.sat4j.minisat.constraints.card.MinWatchCard",
130:       "org.sat4j.core.LiteralsUtils",
131:       "org.sat4j.specs.IVecInt",
132:       "org.sat4j.core.ConstrGroup",
133:       "org.sat4j.tools.SolutionFoundListener",
134:       "org.sat4j.minisat.core.Learner",
135:       "org.sat4j.tools.DimacsStringSolver",
136:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
137:       "org.sat4j.minisat.core.ActivityComparator",
138:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
139:       "org.sat4j.tools.CheckMUSSolutionListener",
140:       "org.sat4j.minisat.constraints.cnf.Lits",
141:       "org.sat4j.minisat.core.Solver$2",
142:       "org.sat4j.specs.UnitClauseProvider",
143:       "org.sat4j.minisat.core.Solver$1",
144:       "org.sat4j.AbstractLauncher",
145:       "org.sat4j.minisat.learning.AbstractLearning",
146:       "org.sat4j.minisat.core.Solver$4",
147:       "org.sat4j.minisat.core.Solver$3",
148:       "org.sat4j.core.VecInt$1",
149:       "org.sat4j.core.Vec$1",
150:       "org.sat4j.minisat.core.DataStructureFactory",
151:       "org.sat4j.minisat.core.Solver$6",
152:       "org.sat4j.minisat.core.Solver$8",
153:       "org.sat4j.minisat.core.Solver$7",
154:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
155:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
156:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
157:       "org.sat4j.tools.encoding.Binomial",
158:       "org.sat4j.minisat.orders.SubsetVarOrder",
159:       "org.sat4j.tools.ModelIteratorToSATAdapter",
160:       "org.sat4j.tools.GroupClauseSelectorSolver",
161:       "org.sat4j.tools.xplain.Xplain",
162:       "org.sat4j.tools.ModelIterator",
163:       "org.sat4j.reader.ParseFormatException",
164:       "org.sat4j.tools.SolutionFoundListener$1",
165:       "org.sat4j.tools.AbstractClauseSelectorSolver",
166:       "org.sat4j.tools.LexicoDecorator",
167:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
168:       "org.sat4j.minisat.core.ActivityLCDS",
169:       "org.sat4j.tools.AbstractOutputSolver",
170:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
171:       "org.sat4j.MUSLauncher",
172:       "org.sat4j.minisat.learning.ActiveLearning",
173:       "org.sat4j.minisat.orders.VarOrderHeap",
174:       "org.sat4j.reader.EfficientScanner",
175:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
176:       "org.sat4j.LightFactory",
177:       "org.sat4j.tools.NegationDecorator",
178:       "org.sat4j.reader.InstanceReader",
179:       "org.sat4j.minisat.core.ConflictTimer",
180:       "org.sat4j.minisat.core.VarActivityListener",
181:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
182:       "org.sat4j.specs.RandomAccessModel",
183:       "org.sat4j.minisat.core.LBDConflictTimer",
184:       "org.sat4j.tools.DimacsOutputSolver",
185:       "org.sat4j.tools.encoding.Binary",
186:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
187:       "org.sat4j.minisat.orders.TabuListDecorator",
188:       "org.sat4j.minisat.core.AgeLCDS",
189:       "org.sat4j.specs.FakeConstr",
190:       "org.sat4j.opt.MinOneDecorator",
191:       "org.sat4j.core.ReadOnlyVecInt",
192:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
193:       "org.sat4j.minisat.restarts.NoRestarts",
194:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
195:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
196:       "org.sat4j.minisat.core.SizeComparator",
197:       "org.sat4j.reader.LecteurDimacs",
198:       "org.sat4j.tools.encoding.Product",
199:       "org.sat4j.specs.Propagatable",
200:       "org.sat4j.ILauncherMode",
201:       "org.sat4j.core.EmptyVecInt",
202:       "org.sat4j.minisat.core.Pair",
203:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
204:       "org.sat4j.specs.IVec",
205:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
206:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
207:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
208:       "org.sat4j.tools.Minimal4CardinalityModel",
209:       "org.sat4j.minisat.learning.MiniSATLearning",
210:       "org.sat4j.tools.MultiTracing",
211:       "org.sat4j.tools.AbstractMinimalModel",
212:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
213:       "org.sat4j.tools.encoding.Sequential",
214:       "org.sat4j.specs.TimeoutException",
215:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
216:       "org.sat4j.minisat.core.ConflictTimerContainer",
217:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
218:       "org.sat4j.minisat.core.LearningStrategy",
219:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
220:       "org.sat4j.specs.IteratorInt",
221:       "org.sat4j.specs.ISolver",
222:       "org.sat4j.minisat.orders.RandomWalkDecorator",
223:       "org.sat4j.minisat.core.VoidTracing",
224:       "org.sat4j.minisat.restarts.LubyRestarts",
225:       "org.sat4j.minisat.core.GlucoseLCDS",
226:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
227:       "org.sat4j.tools.SubModelIterator",
228:       "org.sat4j.BasicLauncher",
229:       "org.sat4j.minisat.core.ILits",
230:       "org.sat4j.specs.ContradictionException",
231:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
232:       "org.sat4j.minisat.learning.PercentLengthLearning",
233:       "org.sat4j.specs.IConstr",
234:       "org.sat4j.reader.JSONReader",
235:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
236:       "org.sat4j.tools.xplain.MinimizationStrategy",
237:       "org.sat4j.minisat.restarts.EMARestarts",
238:       "org.sat4j.tools.encoding.EncodingStrategy",
239:       "org.sat4j.tools.encoding.Policy",
240:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
241:       "org.sat4j.OptimizationMode",
242:       "org.sat4j.specs.MandatoryLiteralListener",
243:       "org.sat4j.specs.IProblem",
244:       "org.sat4j.minisat.restarts.MiniSATRestarts",
245:       "org.sat4j.tools.xplain.DeletionStrategy",
246:       "org.sat4j.tools.RupSearchListener",
247:       "org.sat4j.core.VecInt",
248:       "org.sat4j.minisat.core.Solver",
249:       "org.sat4j.tools.xplain.HighLevelXplain",
250:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
251:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
252:       "org.sat4j.core.ASolverFactory",
253:       "org.sat4j.reader.DimacsReader",
254:       "org.sat4j.core.Vec",
255:       "org.sat4j.minisat.core.Glucose2LCDS",
256:       "org.sat4j.minisat.core.SolverStats",
257:       "org.sat4j.minisat.core.ConstrActivityListener",
258:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
259:       "org.sat4j.minisat.restarts.ArminRestarts",
260:       "org.sat4j.specs.SearchListenerAdapter",
261:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
262:       "org.sat4j.tools.StatisticsSolver",
263:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
264:       "org.sat4j.tools.OutcomeListener",
265:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
266:       "org.sat4j.tools.SingleSolutionDetector",
267:       "org.sat4j.minisat.constraints.xor.Xor",
268:       "org.sat4j.minisat.orders.NaturalStaticOrder",
269:       "org.sat4j.minisat.core.ISimplifier",
270:       "org.sat4j.tools.IVisualizationTool",
271:       "org.sat4j.specs.Constr$1",
272:       "org.sat4j.specs.VarMapper",
273:       "org.sat4j.minisat.SolverFactory",
274:       "org.sat4j.tools.encoding.Ladder",
275:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
276:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
277:       "org.sat4j.minisat.orders.PureOrder",
278:       "org.sat4j.minisat.core.SizeLCDS",
279:       "org.sat4j.minisat.core.RestartStrategy",
280:       "org.sat4j.tools.xplain.Explainer",
281:       "org.sat4j.reader.Reader",
282:       "org.sat4j.minisat.core.IOrder",
283:       "org.sat4j.minisat.orders.VariableComparator",
284:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
285:       "org.sat4j.minisat.core.ICDCL",
286:       "org.sat4j.core.EmptyVecInt$1",
287:       "org.sat4j.tools.encoding.Commander"
288:     );
289:   } 
290:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
291:     mock(Class.forName("org.sat4j.opt.MinOneDecorator", false, OptimizationMode_53_tmp__ESTest_scaffolding.class.getClassLoader()));
292:   }
293: 
294:   private static void resetClasses() {
295:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(OptimizationMode_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
296: 
297:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
298:       "org.sat4j.OptimizationMode",
299:       "org.sat4j.DecisionMode",
300:       "org.sat4j.ExitCode",
301:       "org.sat4j.ILauncherMode",
302:       "org.sat4j.tools.SolutionFoundListener$1",
303:       "org.sat4j.tools.SolutionFoundListener",
304:       "org.sat4j.tools.AbstractOutputSolver",
305:       "org.sat4j.tools.DimacsOutputSolver",
306:       "org.sat4j.specs.TimeoutException",
307:       "org.sat4j.core.EmptyVecInt",
308:       "org.sat4j.core.VecInt",
309:       "org.sat4j.core.ReadOnlyVecInt",
310:       "org.sat4j.tools.SolverDecorator",
311:       "org.sat4j.tools.OptToSatAdapter",
312:       "org.sat4j.specs.SearchListenerAdapter",
313:       "org.sat4j.tools.ManyCore",
314:       "org.sat4j.core.Vec",
315:       "org.sat4j.tools.LexicoDecorator",
316:       "org.sat4j.tools.AbstractClauseSelectorSolver",
317:       "org.sat4j.tools.GroupClauseSelectorSolver",
318:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
319:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
320:       "org.sat4j.core.ASolverFactory",
321:       "org.sat4j.tools.StatisticsSolver",
322:       "org.sat4j.opt.MinOneDecorator",
323:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
324:       "org.sat4j.tools.encoding.Sequential",
325:       "org.sat4j.tools.encoding.Binary",
326:       "org.sat4j.tools.encoding.Product",
327:       "org.sat4j.tools.encoding.Commander",
328:       "org.sat4j.tools.encoding.Binomial",
329:       "org.sat4j.tools.encoding.Ladder",
330:       "org.sat4j.tools.encoding.Policy",
331:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
332:       "org.sat4j.tools.SolutionCounter",
333:       "org.sat4j.AbstractLauncher",
334:       "org.sat4j.MUSLauncher",
335:       "org.sat4j.AbstractLauncher$1",
336:       "org.sat4j.tools.FullClauseSelectorSolver",
337:       "org.sat4j.tools.xplain.Xplain",
338:       "org.sat4j.minisat.SolverFactory",
339:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
340:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
341:       "org.sat4j.minisat.constraints.cnf.Lits",
342:       "org.sat4j.minisat.orders.VarOrderHeap",
343:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
344:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
345:       "org.sat4j.minisat.learning.AbstractLearning",
346:       "org.sat4j.minisat.learning.MiniSATLearning",
347:       "org.sat4j.minisat.core.Solver$1",
348:       "org.sat4j.minisat.core.Solver",
349:       "org.sat4j.minisat.restarts.MiniSATRestarts",
350:       "org.sat4j.minisat.core.SearchParams",
351:       "org.sat4j.minisat.core.ActivityComparator",
352:       "org.sat4j.minisat.core.SolverStats",
353:       "org.sat4j.minisat.core.VoidTracing",
354:       "org.sat4j.specs.UnitClauseProvider$1",
355:       "org.sat4j.specs.UnitClauseProvider",
356:       "org.sat4j.minisat.core.Solver$2",
357:       "org.sat4j.minisat.core.Solver$3",
358:       "org.sat4j.minisat.core.Solver$4",
359:       "org.sat4j.minisat.core.Pair",
360:       "org.sat4j.minisat.core.ConflictTimerAdapter",
361:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
362:       "org.sat4j.minisat.core.ActivityLCDS",
363:       "org.sat4j.minisat.core.LBDConflictTimer",
364:       "org.sat4j.minisat.core.GlucoseLCDS",
365:       "org.sat4j.minisat.core.Glucose2LCDS",
366:       "org.sat4j.minisat.core.AgeLCDS",
367:       "org.sat4j.minisat.core.SizeComparator",
368:       "org.sat4j.minisat.core.SizeLCDS",
369:       "org.sat4j.minisat.core.Solver$8",
370:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
371:       "org.sat4j.minisat.restarts.Glucose21Restarts",
372:       "org.sat4j.minisat.core.CircularBuffer",
373:       "org.sat4j.tools.xplain.DeletionStrategy",
374:       "org.sat4j.BasicLauncher",
375:       "org.sat4j.minisat.learning.LimitedLearning",
376:       "org.sat4j.minisat.learning.ActiveLearning",
377:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
378:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
379:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
380:       "org.sat4j.minisat.orders.PureOrder",
381:       "org.sat4j.minisat.orders.TabuListDecorator",
382:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
383:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
384:       "org.sat4j.minisat.restarts.ArminRestarts",
385:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
386:       "org.sat4j.opt.MaxSatDecorator",
387:       "org.sat4j.reader.DimacsReader",
388:       "org.sat4j.minisat.core.Counter",
389:       "org.sat4j.reader.InstanceReader",
390:       "org.sat4j.reader.LecteurDimacs",
391:       "org.sat4j.LightFactory",
392:       "org.sat4j.minisat.learning.FixedLengthLearning",
393:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
394:       "org.sat4j.tools.AbstractMinimalModel",
395:       "org.sat4j.minisat.restarts.NoRestarts",
396:       "org.sat4j.tools.DimacsStringSolver",
397:       "org.sat4j.reader.GroupedCNFReader",
398:       "org.sat4j.tools.ModelIterator",
399:       "org.sat4j.tools.ModelIteratorToSATAdapter",
400:       "org.sat4j.reader.JSONReader",
401:       "org.sat4j.reader.ParseFormatException",
402:       "org.sat4j.minisat.orders.SubsetVarOrder",
403:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
404:       "org.sat4j.minisat.constraints.card.AtLeast",
405:       "org.sat4j.specs.ContradictionException",
406:       "org.sat4j.reader.EfficientScanner",
407:       "org.sat4j.tools.CheckMUSSolutionListener",
408:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
409:       "org.sat4j.minisat.restarts.LubyRestarts",
410:       "org.sat4j.minisat.constraints.cnf.HTClause",
411:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
412:       "org.sat4j.minisat.learning.PercentLengthLearning",
413:       "org.sat4j.tools.Minimal4InclusionModel",
414:       "org.sat4j.minisat.orders.RandomWalkDecorator",
415:       "org.sat4j.core.EmptyVecInt$1",
416:       "org.sat4j.tools.Minimal4CardinalityModel",
417:       "org.sat4j.core.VecInt$1",
418:       "org.sat4j.tools.encoding.EncodingStrategy",
419:       "org.sat4j.tools.NegationDecorator",
420:       "org.sat4j.core.ConstrGroup",
421:       "org.sat4j.tools.SubModelIterator",
422:       "org.sat4j.tools.SingleSolutionDetector",
423:       "org.sat4j.specs.Lbool",
424:       "org.sat4j.minisat.core.Heap",
425:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
426:       "org.sat4j.minisat.core.ConflictTimerContainer",
427:       "org.sat4j.minisat.core.Solver$6",
428:       "org.sat4j.tools.RupSearchListener",
429:       "org.sat4j.tools.IVisualizationTool",
430:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
431:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
432:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
433:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
434:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
435:       "org.sat4j.minisat.core.Solver$7",
436:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
437:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
438:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
439:       "org.sat4j.minisat.constraints.cnf.WLClause",
440:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
441:       "org.sat4j.core.LiteralsUtils",
442:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
443:       "org.sat4j.specs.FakeConstr",
444:       "org.sat4j.minisat.constraints.xor.Xor",
445:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
446:       "org.sat4j.minisat.constraints.card.MinWatchCard",
447:       "org.sat4j.tools.MultiTracing",
448:       "org.sat4j.core.Vec$1",
449:       "org.sat4j.minisat.constraints.cnf.Clauses",
450:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
451:       "org.sat4j.minisat.restarts.EMARestarts",
452:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
453:       "org.sat4j.minisat.constraints.cnf.UnitClause",
454:       "org.sat4j.minisat.orders.NaturalStaticOrder",
455:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
456:       "org.sat4j.reader.Reader",
457:       "org.sat4j.specs.ILogAble$1",
458:       "org.sat4j.specs.ILogAble"
459:     );
460:   }
461: }

[MASTER] 05:04:37.056 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.OptimizationMode with seed 1550376125241. Configuration id : null
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:389) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) ~[na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_191]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:348) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) ~[na:1.8.0_191]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) ~[na:1.8.0_191]
	... 3 common frames omitted
Caused by: java.io.InvalidClassException: cannot bind enum descriptor to a non-enum class
	at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:687) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1885) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readEnum(ObjectInputStream.java:1994) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1570) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:561) ~[na:1.8.0_191]
	at org.evosuite.assertion.Assertion.readObject(Assertion.java:256) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_191]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_191]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.HashSet.readObject(HashSet.java:341) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:561) ~[na:1.8.0_191]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1139) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.HashMap.readObject(HashMap.java:1409) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_191]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573) ~[na:1.8.0_191]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.unmarshalParametersUnchecked(UnicastServerRef.java:628) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.unmarshalParameters(UnicastServerRef.java:616) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:338) ~[na:1.8.0_191]
	... 12 common frames omitted
