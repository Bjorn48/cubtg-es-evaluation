/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:26:18 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-3535);
      backbone0.compute(iSolver0, intArray0);
      assertEquals(3535, iSolver0.realNumberOfVariables());
      assertEquals(3535, iSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, (IVecInt) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(minimal4InclusionModel0).nVars();
      doReturn(intArray0).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      Backbone backbone1 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone1.compute(iSolver0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, (IVecInt) vecInt0, iVecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, false);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[20];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(minimal4InclusionModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(minimal4InclusionModel0).nVars();
      doReturn(false).when(minimal4InclusionModel0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) minimal4InclusionModel0, intArray0);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, iVecInt0, 16384);
      assertEquals(0, iVecInt0.size());
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone0.compute(iSolver0);
      backbone0.compute(iSolver0, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(minimal4InclusionModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(minimal4InclusionModel0).nVars();
      doReturn(false).when(minimal4InclusionModel0).removeConstr(any(org.sat4j.specs.IConstr.class));
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      int[] intArray0 = new int[1];
      IVecInt iVecInt0 = backbone0.compute((ISolver) clausalCardinalitiesDecorator0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      backbone0.compute(iSolver0, iVecInt0);
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = 2124;
      backbone0.compute(iSolver0, intArray0);
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 2124;
      intArray1[1] = 2124;
      intArray1[2] = 2124;
      intArray1[3] = 2124;
      intArray1[4] = 2124;
      intArray1[5] = 2124;
      intArray1[6] = 2124;
      intArray1[7] = 2124;
      intArray1[8] = 2124;
      // Undeclared exception!
      backbone0.compute(iSolver0, intArray1, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[21];
      intArray0[0] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone0.compute(iSolver0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = 2124;
      intArray0[1] = 2124;
      intArray0[2] = 2124;
      intArray0[3] = 1;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      backbone0.compute(iSolver0, iVecInt0, iVecInt0);
      // Undeclared exception!
      backbone0.compute(iSolver0, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[14];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsOutputSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      int[] intArray0 = new int[1];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(minimal4InclusionModel0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn((-1180)).when(minimal4InclusionModel0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1180
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[8];
      intArray0[6] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2147483648
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone0.compute(iSolver0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, iVecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = 2124;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      IVecInt iVecInt1 = backbone0.compute(iSolver0);
      // Undeclared exception!
      backbone0.compute(iSolver0, iVecInt0, iVecInt1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone0.compute(iSolver0);
      iVecInt0.pop();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int[] intArray0 = new int[3];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(minimal4InclusionModel0).nVars();
      doReturn(intArray0).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(2144);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-2437)).when(minimal4InclusionModel0).nVars();
      doReturn((int[]) null).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, (IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -2437
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      try { 
        backbone0.compute((ISolver) dimacsOutputSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = 2124;
      backbone0.compute(iSolver0, intArray0);
      backbone0.compute(iSolver0, intArray0);
      // Undeclared exception!
      backbone0.compute(iSolver0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(aSolverFactory0, stringArray0);
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solutionCounter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-2437)).when(minimal4InclusionModel0).nVars();
      doReturn((int[]) null).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -2437
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, (IVecInt) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int[] intArray0 = new int[3];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(minimal4InclusionModel0).nVars();
      doReturn(intArray0).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      VecInt vecInt0 = new VecInt(1, 0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = backbone0.compute(iSolver0);
      iVecInt0.push((-2722));
      backbone0.compute(iSolver0, iVecInt0, iVecInt0);
      // Undeclared exception!
      backbone0.compute(iSolver0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int[] intArray0 = new int[21];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(minimal4InclusionModel0).nVars();
      doReturn((int[]) null).when(minimal4InclusionModel0).primeImplicant();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(15);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = 2143;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      backbone0.compute(iSolver0, intArray0, iVecInt0);
      assertEquals(2143, iSolver0.nVars());
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(14);
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[1];
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4InclusionModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(minimal4InclusionModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(minimal4InclusionModel0).nVars();
      doReturn(false).when(minimal4InclusionModel0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) minimal4InclusionModel0, intArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, (int[]) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
  }
}
