/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:10:46 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binomial_ESTest extends Binomial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      IConstr iConstr0 = binomial0.addAtMostOne(dimacsStringSolver0, iVecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, vecInt0, solutionFoundListener0);
      try { 
        binomial0.addExactlyOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(128, 112);
      // Undeclared exception!
      binomial0.addExactlyOne(lexicoDecorator0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(maxSatDecorator0, iVecInt0);
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(minimal4CardinalityModel0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(57);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      VecInt vecInt0 = new VecInt(57, 57);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(fullClauseSelectorSolver0, vecInt0);
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(iSolver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(72);
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(dimacsStringSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      binomial0.addExactly(dimacsStringSolver0, vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        binomial0.addExactly(dimacsOutputSolver0, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addExactly(dimacsStringSolver0, iVecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[9];
      intArray0[3] = 3653;
      VecInt vecInt0 = new VecInt(intArray0);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      // Undeclared exception!
      try { 
        binomial0.addExactly(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        binomial0.addExactly(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(334);
      // Undeclared exception!
      try { 
        binomial0.addExactly(dimacsStringSolver0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(2371, 2371);
      // Undeclared exception!
      binomial0.addAtMostOne(iSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      // Undeclared exception!
      try { 
        binomial0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[6];
      intArray0[1] = 3653;
      VecInt vecInt0 = new VecInt(intArray0);
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        binomial0.addAtMostOne(negationDecorator0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      // Undeclared exception!
      try { 
        binomial0.addAtMostOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(18);
      // Undeclared exception!
      try { 
        binomial0.addAtMostOne(dimacsStringSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[20];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      binomial0.addAtMost(dimacsStringSolver0, vecInt0, 9);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        binomial0.addAtMost(optToSatAdapter0, vecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        binomial0.addAtMost(minimal4CardinalityModel0, (IVecInt) null, (-1420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addAtMost(dimacsStringSolver0, vecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[9];
      intArray0[3] = 3653;
      VecInt vecInt0 = new VecInt(intArray0);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      // Undeclared exception!
      try { 
        binomial0.addAtMost(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        binomial0.addAtMost(iSolver0, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(1761);
      // Undeclared exception!
      try { 
        binomial0.addAtMost(dimacsStringSolver0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      binomial0.addAtMostOne(clausalCardinalitiesDecorator0, vecInt0);
      assertEquals(36, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      binomial0.addAtMost(clausalCardinalitiesDecorator0, vecInt0, 5);
      assertEquals(84, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      binomial0.addExactlyOne(dimacsStringSolver0, vecInt0);
      assertEquals(37, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      binomial0.addExactly(clausalCardinalitiesDecorator0, vecInt0, 3163);
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }
}
