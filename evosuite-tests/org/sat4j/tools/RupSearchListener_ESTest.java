/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:33:16 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.RupSearchListener;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RupSearchListener_ESTest extends RupSearchListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("");
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, fixedPeriodRestarts0);
      rupSearchListener0.init(solver0);
      rupSearchListener0.learnUnit(624);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>(":IA?Iv;}ww.");
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(584);
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, arminRestarts0);
      rupSearchListener0.init(solver0);
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = solver0.getVocabulary();
      Xor xor0 = new Xor(vecInt0, true, iLits0);
      rupSearchListener0.learn(xor0);
      assertEquals(8, xor0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("&U5");
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(100.0, 0);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 2530);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, arminRestarts0);
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.FALSE;
      rupSearchListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("");
      Solver<MixedDataStructureDanielWL>[] solverArray0 = (Solver<MixedDataStructureDanielWL>[]) Array.newInstance(Solver.class, 0);
      ManyCore<Solver<MixedDataStructureDanielWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWL>>(false, solverArray0);
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Binomial binomial0 = new Binomial();
      IConstr iConstr0 = binomial0.addAtMostOne(manyCore0, vecInt0);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(iConstr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = null;
      try {
        rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("!6-=&%5&16?}3");
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder(1340);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, pureOrder0, arminRestarts0);
      rupSearchListener0.init(solver0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(6, 1340);
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredClause(vecInt0);
      rupSearchListener0.delete(constr0);
      assertTrue(constr0.learnt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("\"PEG");
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2192.893856));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, randomWalkDecorator0, eMARestarts0);
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.UNDEFINED;
      rupSearchListener0.end(lbool0);
      rupSearchListener0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("B");
      Lbool lbool0 = Lbool.FALSE;
      // Undeclared exception!
      try { 
        rupSearchListener0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("H1gm @oNj>n@BOD6");
      // Undeclared exception!
      try { 
        rupSearchListener0.learnUnit(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("!6-=&%5&16?}3");
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(6, 1340);
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredClause(vecInt0);
      // Undeclared exception!
      try { 
        rupSearchListener0.delete(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureDanielWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureDanielWL>>("Z");
      Solver<MixedDataStructureDanielWL>[] solverArray0 = (Solver<MixedDataStructureDanielWL>[]) Array.newInstance(Solver.class, 0);
      ManyCore<Solver<MixedDataStructureDanielWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWL>>(false, solverArray0);
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = manyCore0.addExactly(vecInt0, (-536));
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(iConstr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }
}
