/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:23:12 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.ConflictTimerContainer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.MemoryBasedConflictTimer;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.tools.DimacsOutputSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, pureOrder0, (RestartStrategy) null, (ILogAble) null);
      solver0.registerLiteral(1);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, lubyRestarts0);
      glucoseLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(solver0).getLogPrefix();
      doReturn(true).when(solver0).isVerbose();
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, (-2888));
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, memoryBasedConflictTimer0);
      Constr[] constrArray0 = new Constr[13];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      vec0.growTo((-2888), constrArray0[3]);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(solver0).isVerbose();
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, (-2888));
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, memoryBasedConflictTimer0);
      Constr[] constrArray0 = new Constr[13];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      vec0.growTo((-2888), constrArray0[3]);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, (RestartStrategy) null);
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConflictTimerContainer conflictTimerContainer0 = new ConflictTimerContainer();
      Solver<MixedDataStructureDanielWL> solver0 = (Solver<MixedDataStructureDanielWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      GlucoseLCDS<MixedDataStructureDanielWL> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWL>(solver0, conflictTimerContainer0);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertSame(conflictTimer0, conflictTimerContainer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      UnitClause unitClause0 = new UnitClause(10);
      SearchParams searchParams0 = new SearchParams((-2422.1), (-1608));
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>(solver0, (ConflictTimer) null);
      int int0 = glucose2LCDS0.computeLBD(unitClause0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onClauseLearning((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>((Solver<MixedDataStructureDanielHT>) null, miniSATRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, 0);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, memoryBasedConflictTimer0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2);
      EMARestarts eMARestarts0 = new EMARestarts();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, eMARestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, eMARestarts0);
      glucose2LCDS0.init();
      glucose2LCDS0.init();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(solver0).getLogPrefix();
      doReturn(true).when(solver0).isVerbose();
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, 1);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, memoryBasedConflictTimer0);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, 1);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, memoryBasedConflictTimer0);
      Vec<Constr> vec0 = new Vec<Constr>();
      UnitClause unitClause0 = new UnitClause(0);
      vec0.unsafePush(unitClause0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Vec<Constr> vec0 = new Vec<Constr>();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, arminRestarts0, (ILogAble) null);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, (ConflictTimer) null);
      glucose2LCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2);
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, (ConflictTimer) null);
      glucose2LCDS0.onClauseLearning(unitClause0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      UnitClause unitClause0 = new UnitClause(10);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams((-2422.1), (-1608));
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>(aSolverFactory0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, (ConflictTimer) null);
      glucoseLCDS0.onPropagation(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      glucose2LCDS0.onConflictAnalysis((Constr) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>((Solver<CardinalityDataStructureYanMin>) null, (ConflictTimer) null);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer null", string0);
  }
}
