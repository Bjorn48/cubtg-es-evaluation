/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:53:31 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream((InputStream) null, "y6/YN]|_DZ]", (-1), (-143));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.GetSuffix(4096);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, (-1), (-2738), 4096);
      SimpleCharStream simpleCharStream2 = null;
      try {
        simpleCharStream2 = new SimpleCharStream((InputStream) null, "com.pmdesigns.jvc.tools.SimpleCharStream", 4085, (-1), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      int int0 = 0;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.GetSuffix(1164);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yezae>`(P,Q)");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 3782);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 4671;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", 4671, 4671);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      StringReader stringReader0 = new StringReader("|[-aeGmI'd'M`D$8QcU");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(4077);
      simpleCharStream0.adjustBeginLineColumn((-1), 4077);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(5347, 5347);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stringReader0.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      simpleCharStream0.adjustBeginLineColumn(10, 2048);
      simpleCharStream0.backup(56);
      simpleCharStream0.backup(3159);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 487, 4096, 1763);
      StringReader stringReader0 = new StringReader("5J&Zl`aJP_{9'VQ");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.readChar();
      simpleCharStream1.getLine();
      simpleCharStream1.GetImage();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 2048;
      simpleCharStream0.inBuf = 1261;
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      int int1 = (-380);
      simpleCharStream0.backup(int1);
      int int2 = 2176;
      simpleCharStream0.backup(int2);
      simpleCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufpos = 0;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 0, 1);
      simpleCharStream1.ReInit((Reader) stringReader0, 4039, 0);
      simpleCharStream1.backup(2048);
      simpleCharStream1.UpdateLineColumn('g');
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.getColumn();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      StringReader stringReader0 = new StringReader("DS=Y<}!CY.u*)1 ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1529, (-567));
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 3752;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 3752);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 3752, (-115), (-565));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.ExpandBuff(true);
      simpleCharStream0.getColumn();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 4083, 0, 4083);
      simpleCharStream1.adjustBeginLineColumn((-1174), 4083);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1174), 4096);
      simpleCharStream2.backup((-1174));
      simpleCharStream1.backup(4083);
      simpleCharStream2.getEndLine();
      simpleCharStream2.getLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufsize = 0;
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(2019, 2019);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 973);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#0VKJ$=0/9eu!;|Tnm");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3485, (-4658), 2285);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, (String) null, 3485, 3485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      stringReader2.ready();
      simpleCharStream0.ReInit((Reader) stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Fk");
      stringReader0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.FillBuff();
      simpleCharStream0.ExpandBuff(false);
      stringReader0.reset();
      simpleCharStream0.ReInit((Reader) stringReader0, 1, 0);
      simpleCharStream0.line = 1784;
      simpleCharStream0.ReInit((Reader) stringReader0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InputStream inputStream0 = null;
      String string0 = "";
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XVb~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.FillBuff();
      File file0 = MockFile.createTempFile("XVb~", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      simpleCharStream0.ReInit((InputStream) mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      simpleCharStream0.backup(4096);
      simpleCharStream0.backup(4096);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<gqo]<H];PQ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-4062), (-4062), 2048);
      simpleCharStream0.adjustBeginLineColumn(2048, 2048);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "8y?!";
      StringReader stringReader0 = new StringReader("8y?!");
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      stringReader0.markSupported();
      simpleCharStream0.prevCharIsLF = true;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string1 = "";
      sequenceInputStream0.read();
      sequenceInputStream0.mark((-1));
      int int0 = 2565;
      sequenceInputStream0.markSupported();
      int int1 = 0;
      int int2 = (-1451);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 2565, (-1), (-1451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-4062), (-4062), 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.adjustBeginLineColumn(2048, 2048);
      simpleCharStream0.ReInit((Reader) stringReader0, (-4062), (-2477), 3482);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = (-717);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, (-717), (-717));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<gqo]<H];PQ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-4062), (-4062), 2048);
      simpleCharStream0.tokenBegin = (-4062);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      boolean boolean0 = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream(255);
      simpleCharStream0.getTabSize(153);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "8MX3", 1735, (-1317));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      StringReader stringReader1 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      simpleCharStream1.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 4086;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, (-1584), 4086);
      int int1 = (-84);
      int int2 = 866;
      simpleCharStream0.adjustBeginLineColumn(int1, int2);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit(inputStream0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      StringReader stringReader0 = new StringReader("|[-aeGmI'd'M`D$8QcU");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      boolean boolean0 = false;
      simpleCharStream0.ExpandBuff(false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4071, 4067);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (String) null);
      try { 
        simpleCharStream1.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "com.pmdesignsjvckto]lsSimpleCharStream", 4671, 4671);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, "ZeC$8", 2329, 2329, 2329);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      stringReader0.markSupported();
      simpleCharStream0.adjustBeginLineColumn((-3071), (-3349));
      simpleCharStream0.backup(0);
      simpleCharStream0.backup(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 0, 12, 2026);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      String string0 = "T.!D`qp+XyUi\\{Vj\\uB";
      StringReader stringReader0 = new StringReader(string0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, string0, 1529, 4084, 4084);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Fk");
      stringReader0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.FillBuff();
      simpleCharStream0.ExpandBuff(false);
      stringReader0.reset();
      simpleCharStream0.ReInit((Reader) stringReader0, 1, 0);
      simpleCharStream0.line = 1784;
      simpleCharStream0.ReInit((Reader) stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(boolean0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XVb~");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 553);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 553, 3002, 1770);
      simpleCharStream0.backup(553);
      simpleCharStream0.readChar();
      simpleCharStream0.getLine();
      simpleCharStream0.GetSuffix(553);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("com.pmdesignsjvckto]lsSimpleCharStream");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(0, 0);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1115);
      String string0 = "|[-aeGmI'd'M`D$8QcU";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "m/'", 1115, 4072, 4511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, (-334));
      simpleCharStream0.Done();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mNC@|3x?W$~iCeq");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1715), (-1715));
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(5347, 5347);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stringReader0.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedInputStream0, (-318), (-1465), 0);
      simpleCharStream1.backup(2048);
      simpleCharStream0.backup(5347);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "8MX3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      int int1 = (-2477);
      int int2 = 4230;
      int int3 = 248;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, int2, int3, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 4671, 4671);
      simpleCharStream0.adjustBeginLineColumn(4057, 4057);
      simpleCharStream0.backup(0);
      simpleCharStream0.getTabSize(4057);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 973);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(3752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4083, 4083, 4083);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('x');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      StringReader stringReader0 = new StringReader("DS=Y<}!CY.u*)1 ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1529, (-567));
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 3752);
      simpleCharStream0.backup((-2105));
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1529;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      String string0 = "|[-aeGmI'd'M`D$8QcU";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      StringReader stringReader0 = new StringReader("|[-aeGmI'd'M`D$8QcU");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "|[-aeGmI'd'M`D$8QcU", 1529, 4084, 4084);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1256, 1256);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 4081, 4081, 1256);
      simpleCharStream0.adjustBeginLineColumn(731, 731);
      simpleCharStream1.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XVb~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.FillBuff();
      simpleCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "T.^D`qp+XyUi\\{Vj\\uB";
      StringReader stringReader0 = new StringReader(string0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (String) null, (-1), 2122, (-742));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XVb~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.inputStream = (Reader) stringReader0;
      simpleCharStream0.FillBuff();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-1464);
      int int1 = (-2828);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-1464), (-2828));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)0;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleCharStream0.backup('8');
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      StringReader stringReader0 = new StringReader("|[-aeGmI'd'M`D$8QcU");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(4077);
      simpleCharStream0.backup(1529);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=CUFH1-.");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2699, 2699);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 0, (int) (byte) (-56));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-349);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-349), (-349), (-349));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.bufpos = simpleCharStream0.bufpos;
      simpleCharStream0.bufpos = simpleCharStream0.bufpos;
      int int0 = 2048;
      simpleCharStream0.bufsize = (-1);
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(2048, 2048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 3568, (-1), 3568);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader1);
      simpleCharStream2.setTabSize(3568);
      simpleCharStream0.GetImage();
      simpleCharStream2.prevCharIsCR = false;
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      int int0 = 0;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufpos = 0;
      int int1 = 2048;
      simpleCharStream0.bufsize = 0;
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(2048, 2048);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1256, 1256);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.ExpandBuff(false);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-4062);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-4062), (-4062), (-4062));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 5347;
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, int0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      String string0 = null;
      int int1 = (-237);
      int int2 = (-2363);
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, string0, int0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "@dz5\\X9\"d $WPr)&";
      byteArrayInputStream0.mark(475);
      int int0 = (-3450);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "@dz5X9\"d $WPr)&", 0, 0, (-3450));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      StringReader stringReader0 = new StringReader("|[-aeGmI'd'M`D$8QcU");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(4077);
      simpleCharStream0.backup(1529);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 4671, 4671);
      simpleCharStream0.setTabSize((-1));
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.adjustBeginLineColumn(4096, 4096);
      simpleCharStream0.ReInit((Reader) stringReader0, 4096, 4096);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('T');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3744, 3744, 3744);
      simpleCharStream0.tabSize = 3744;
      simpleCharStream0.backup(3744);
      simpleCharStream0.readChar();
      simpleCharStream0.getLine();
      simpleCharStream0.GetSuffix(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(0, (-2864));
      simpleCharStream0.backup(4062);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 973);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3752, 3752, 3752);
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, "V/MUw\fuA)i-ho%", 3752, 3752);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.GetSuffix(1119);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2573);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1119;
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.getColumn();
      simpleCharStream0.ReInit((Reader) stringReader0, 0, 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.ExpandBuff(true);
      simpleCharStream0.getColumn();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.adjustBeginLineColumn(4096, 4096);
      simpleCharStream0.ReInit((Reader) stringReader0, 4096, 4096, 4096);
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.FillBuff();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      int int0 = 0;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufpos = 0;
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mNC@|3x?W$~iCeq");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1224);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.ReInit((Reader) stringReader0, 2047, (-1), 4096);
      simpleCharStream0.readChar();
      simpleCharStream0.ReInit((Reader) stringReader0, (-1715), (-1715), 2044);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "mylyQ10P|]x+nER*I");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1529, 1143, 973);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufpos = 0;
      int int0 = 4096;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 0, 4096, 0);
      simpleCharStream1.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XVb~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.GetSuffix(0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.backup(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "N%Q8ykMTEvhq1x'J8E";
      StringReader stringReader0 = new StringReader("N%Q8ykMTEvhq1x'J8E");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.adjustBeginLineColumn(3181, 'N');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stringReader0.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(pipedInputStream0, 1, 10, (-1309));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      int[] intArray0 = new int[0];
      simpleCharStream0.bufcolumn = intArray0;
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.ExpandBuff(true);
      simpleCharStream0.UpdateLineColumn('9');
      simpleCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 4057;
      stringReader0.skip(0L);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4057, 4057);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleCharStream0.getTabSize(4084);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1529);
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "|[-aeGmI'd'M`D$8QcU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.maxNextCharInd = 4096;
      int int0 = 12;
      StringReader stringReader1 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      simpleCharStream1.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(4058, (-1));
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 4096, (-1));
      simpleCharStream1.backup(1123);
      simpleCharStream1.backup(4096);
      simpleCharStream1.getBeginLine();
      assertEquals(2972, simpleCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 1628;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int1 = 211;
      int int2 = (-2002);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 211, (-2002), 1628);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("com.pmdesignsjvckto]lsSimpleCharStream");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 4091, 4091);
      simpleCharStream0.ReInit((Reader) stringReader0, 4091, (-1519));
      simpleCharStream0.backup(4091);
      simpleCharStream0.readChar();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream1.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Reader reader0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.backup(1426);
      int int0 = 0;
      simpleCharStream0.bufcolumn = null;
      simpleCharStream0.ReInit((Reader) null, 0, 0);
      simpleCharStream0.maxNextCharInd = 0;
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      try { 
        dataInputStream0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufcolumn = null;
      int int0 = 0;
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.bufpos = 0;
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8MX3");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4096, 4096, 4096);
      simpleCharStream0.readChar();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("!");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
