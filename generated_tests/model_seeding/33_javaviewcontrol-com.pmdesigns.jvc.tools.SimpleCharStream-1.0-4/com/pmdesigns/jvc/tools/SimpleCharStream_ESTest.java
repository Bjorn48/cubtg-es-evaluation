/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 18:48:17 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("");
      simpleCharStream0.ReInit((Reader) stringReader0);
      int int0 = 432;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1530, 1530);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(432);
      simpleCharStream1.GetImage();
      int int1 = 12;
      simpleCharStream1.ReInit((Reader) stringReader0, 12, 2);
      simpleCharStream0.BeginToken();
      try { 
        simpleCharStream1.ReInit((InputStream) pipedInputStream0, "F++c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      pipedInputStream0.markSupported();
      simpleCharStream0.backup(412);
      simpleCharStream0.BeginToken();
      simpleCharStream0.getEndColumn();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 113, 2504, 0);
      simpleCharStream0.ReInit((Reader) null, 1530, 113, 113);
      simpleCharStream0.getTabSize(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile("\"gH<*fd%6iu{q\"7L>v", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 8, 2888);
      simpleCharStream0.GetSuffix(882);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 2049, 2049);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(2049);
      stringReader0.close();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 2136, 2136);
      simpleCharStream0.adjustBeginLineColumn(4062, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "c-='p", (-1197), (-1197), (-1197));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1), (byte)0, (byte)0);
      simpleCharStream0.prevCharIsLF = true;
      simpleCharStream0.readChar();
      simpleCharStream0.readChar();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-1);
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1723), 1, (byte)98);
      simpleCharStream0.getTabSize((byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(426);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 113, 113, 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.tabSize = (-1);
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.maxNextCharInd = (-1);
      simpleCharStream0.ReInit((Reader) stringReader0, (-1), 432);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte byte0 = (byte) (-40);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      int int0 = 2048;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2048, 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.GetImage();
      byteArrayInputStream0.close();
      simpleCharStream0.setTabSize((byte)2);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 2772, 2772);
      simpleCharStream0.backup((-1672));
      simpleCharStream0.tokenBegin = (-2723);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("5eI");
      simpleCharStream0.ReInit((Reader) stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1530, 1530);
      simpleCharStream1.Done();
      simpleCharStream1.backup(432);
      // Undeclared exception!
      try { 
        simpleCharStream1.GetImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2772, 2772, 2772);
      simpleCharStream0.backup(490);
      simpleCharStream0.GetImage();
      char[] charArray0 = simpleCharStream0.buffer;
      simpleCharStream0.getColumn();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      pipedInputStream0.markSupported();
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, 2048, 2048);
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.GetImage();
      byteArrayInputStream0.close();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)2, 396);
      simpleCharStream0.available = 1530;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader1 = new StringReader(string0);
      stringReader1.read();
      stringReader1.close();
      simpleCharStream0.ExpandBuff(false);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)0, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 2048, (-1));
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream1, 2048, 1);
      simpleCharStream2.GetSuffix((byte)0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1530, 1530);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2048, 2048);
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, 396);
      simpleCharStream0.available = (int) (byte)0;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader2 = new StringReader(string0);
      stringReader2.read();
      stringReader2.close();
      simpleCharStream0.ReInit((Reader) stringReader2, 396, 1844);
      simpleCharStream0.getTabSize(4096);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      pipedInputStream0.markSupported();
      simpleCharStream0.backup(432);
      simpleCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 113, 2504, 0);
      simpleCharStream0.getTabSize(0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/!e3H5l/N?rl(J");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J7,r8 mk`b\"f[v|");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", (-1), (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("kjL`\"~ #YStfkmiv8", "iM}{\u0003%4Y(nG7,|PY8<");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "59pX#lQ=x1DT0;");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 8, 8);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 2048, 2048);
      simpleCharStream1.GetImage();
      simpleCharStream1.backup((-2486));
      simpleCharStream1.GetImage();
      simpleCharStream1.GetSuffix(4088);
      simpleCharStream1.getColumn();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 0, 19);
      String string0 = simpleCharStream0.GetImage();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      stringReader0.close();
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, 0, 6);
      simpleCharStream0.getTabSize(6);
      try { 
        simpleCharStream0.ReInit((InputStream) pushbackInputStream0, string0, 0, 806, 806);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 616, 616);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 113, 2504, 0);
      simpleCharStream0.ReInit((Reader) null, 1530, 113, 113);
      simpleCharStream0.getTabSize(0);
      simpleCharStream0.getBeginLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2048, 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, (int) (byte)0);
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getTabSize((byte)0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, 4058, 1667, (-1570));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.ReInit((Reader) stringReader0, 432, (-1));
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte) (-21), 396);
      simpleCharStream0.available = (int) (byte) (-21);
      simpleCharStream0.setTabSize((byte) (-40));
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 4113);
      simpleCharStream0.adjustBeginLineColumn(2132, 2132);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('%');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, 396);
      simpleCharStream0.available = (int) (byte)0;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getColumn();
      simpleCharStream0.getEndColumn();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (byte) (-40), (byte) (-40));
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, (int) (byte)0);
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader2 = new StringReader(string0);
      stringReader2.read();
      stringReader2.close();
      simpleCharStream0.ReInit((Reader) stringReader2, (-1647), 3630, (int) (byte)0);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)21, (byte)21);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)21, 396);
      simpleCharStream0.available = (int) (byte)21;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-440), (byte)21);
      simpleCharStream0.adjustBeginLineColumn(2170, (byte)21);
      simpleCharStream1.ReInit((Reader) stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream1.ReInit((Reader) stringReader0, 2170, (-2818), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (byte) (-40), (byte) (-40));
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, (int) (byte)0);
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader2 = new StringReader(string0);
      char[] charArray0 = new char[0];
      stringReader2.read(charArray0, 0, (int) (byte)0);
      stringReader2.read();
      stringReader2.close();
      simpleCharStream0.adjustBeginLineColumn((byte)0, (byte)0);
      simpleCharStream0.UpdateLineColumn('q');
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4061;
      PipedInputStream pipedInputStream0 = new PipedInputStream(4061);
      int int1 = 2649;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 4061, 2649, 4061);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)21, (byte)21);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      stringReader0.close();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 4095, 2497);
      simpleCharStream0.adjustBeginLineColumn((byte)21, (byte) (-40));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, 2048, 2048);
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.GetImage();
      byteArrayInputStream0.close();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)2, 396);
      simpleCharStream0.available = 1530;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader1 = new StringReader(string0);
      stringReader1.read();
      stringReader1.close();
      simpleCharStream0.ReInit((Reader) stringReader1, 396, 1844);
      simpleCharStream0.getTabSize(2048);
      simpleCharStream0.ReInit((Reader) stringReader0, (-1111), (-2325), 2132);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 2048);
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)0, 396);
      simpleCharStream0.available = (int) (byte)0;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.getEndLine();
      StringReader stringReader1 = new StringReader(string0);
      simpleCharStream0.adjustBeginLineColumn(2132, (-1642));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("HYOq,");
      simpleCharStream0.ReInit((Reader) stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1530, 1530);
      simpleCharStream0.GetImage();
      simpleCharStream1.backup(432);
      simpleCharStream1.GetImage();
      simpleCharStream1.ReInit((Reader) stringReader0);
      simpleCharStream1.ReInit((InputStream) pipedInputStream0);
      simpleCharStream1.ReInit((Reader) stringReader0, 12, 2);
      simpleCharStream0.getTabSize(4096);
      simpleCharStream1.ReInit((Reader) stringReader0, 1832, 1832, 12);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("");
      simpleCharStream0.ReInit((Reader) stringReader0);
      int int0 = 8;
      simpleCharStream0.ReInit((Reader) stringReader0, 8, 8);
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      pipedOutputStream0.write(1419);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(2772);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2772, 2772);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "D]|S\"dz6.e(=*bG>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("+x");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleCharStream0.ReInit((Reader) stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int[] intArray0 = new int[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.tabSize = (-1);
      simpleCharStream0.ReInit((Reader) stringReader0);
      int int0 = 432;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)21, (byte)21);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)21, 411);
      simpleCharStream0.available = (int) (byte)21;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      simpleCharStream0.BeginToken();
      simpleCharStream0.adjustBeginLineColumn((-1), 411);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1), (byte)0, (byte)0);
      simpleCharStream0.prevCharIsLF = true;
      simpleCharStream0.readChar();
      simpleCharStream0.readChar();
      simpleCharStream0.getColumn();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-629), (-3232));
      simpleCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 1034, 99);
      simpleCharStream0.maxNextCharInd = 86;
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, 2048, 2048);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-2498));
      simpleCharStream0.GetImage();
      int int0 = 396;
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)2, 396);
      simpleCharStream0.available = 1530;
      simpleCharStream0.setTabSize((byte) (-40));
      simpleCharStream0.readChar();
      try { 
        stringReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 928;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      simpleCharStream0.bufline = intArray0;
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      boolean boolean0 = SimpleCharStream.staticFlag;
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('C');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("ZMbyBB");
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.ReInit((Reader) stringReader0, 432, 432);
      simpleCharStream0.BeginToken();
      simpleCharStream0.ReInit((Reader) stringReader0, 1415, 0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(2772);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2772, 2772);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
