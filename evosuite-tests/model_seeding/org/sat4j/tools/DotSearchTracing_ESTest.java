/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:45:36 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DotSearchTracing_ESTest extends DotSearchTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("n6uoyi ");
      dotSearchTracing0.propagating(1453);
      dotSearchTracing0.assuming((-2599));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DotSearchTracing<Comparable<Object>> dotSearchTracing0 = new DotSearchTracing<Comparable<Object>>("L@");
      dotSearchTracing0.assuming((-972));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("z)q \"Ozh");
      Lbool lbool0 = Lbool.TRUE;
      dotSearchTracing0.end(lbool0);
      dotSearchTracing0.start();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("=,8?3G9}<R5mM>'jD");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew(unitPropagationListener0, iLits0, iVecInt0, (-162));
      dotSearchTracing0.learn(constr0);
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("x");
      Constr constr0 = Constr.TAUTOLOGY;
      dotSearchTracing0.conflictFound((IConstr) constr0, 112, 112);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(".Qo}");
      dotSearchTracing0.assuming(7);
      dotSearchTracing0.backtracking(1922);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.propagating((-2124167220));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("");
      Constr constr0 = Constr.TAUTOLOGY;
      // Undeclared exception!
      try { 
        dotSearchTracing0.learn(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("4o");
      VecInt vecInt0 = new VecInt(2448);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      CBClause cBClause0 = new CBClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.enqueueing(2425, cBClause0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("");
      Lbool lbool0 = Lbool.FALSE;
      // Undeclared exception!
      try { 
        dotSearchTracing0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("n3,s");
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound((IConstr) null, 1257, 257);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound((-606));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.assuming(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = null;
      try {
        dotSearchTracing0 = new DotSearchTracing<Object>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("Contradictory Unit Clauses");
      String string0 = dotSearchTracing0.map(512);
      assertEquals("512", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("^4\"I.V22cj~Aw");
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      dotSearchTracing0.setMapping(hashMap0);
      String string0 = dotSearchTracing0.map((-2111148283));
      assertEquals("-2111148283", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("=,8?3G9}<R5mM>'jD");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew(unitPropagationListener0, iLits0, iVecInt0, (-162));
      dotSearchTracing0.enqueueing(6194, constr0);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("Contradictory Unit Clauses");
      dotSearchTracing0.enqueueing((-2097636775), (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(".#'U1yaX$|2NF");
      dotSearchTracing0.adding(1);
      dotSearchTracing0.propagating((-1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("hHDWN,@sU2s0YA84");
      dotSearchTracing0.propagating((-1347));
      dotSearchTracing0.propagating(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(".#'U1yaX$|2NF");
      dotSearchTracing0.conflictFound(1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(5000);
      IConstr iConstr0 = binomial0.addAtMost(iSolver0, vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("^4\"I.V22cD~Aw");
      // Undeclared exception!
      try { 
        dotSearchTracing0.learn(iConstr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("hHDWN,@sU2s0YA84");
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, vecInt0);
      IConstr iConstr0 = binomial0.addAtMost(abstractMinimalModel0, vecInt0, 3241);
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound(iConstr0, (-3417), 1000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("n6uoyi ");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew(unitPropagationListener0, iLits0, iVecInt0, (-162));
      dotSearchTracing0.delete(constr0);
      assertFalse(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("U");
      // Undeclared exception!
      try { 
        dotSearchTracing0.backtracking((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("");
      dotSearchTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(".Qo}");
      int[] intArray0 = new int[1];
      dotSearchTracing0.solutionFound(intArray0, iSolver0);
      assertEquals(0, iSolver0.nConstraints());
  }
}
