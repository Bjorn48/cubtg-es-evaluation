/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:05:43 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.color.ICC_Profile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.PushbackInputStream;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(921, rOI1.ly());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(921, rOI1.ly());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int7 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(4340, 0, 0, 7, 5, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(2925, 32767, 0, 32767);
      assertEquals(0, rOI0.ux());
      assertEquals(32767, rOI0.uy());
      assertEquals(2926, rOI0.X());
      assertEquals(2925, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(32767, rOI0.uy());
      assertEquals(2926, rOI0.X());
      assertEquals(2925, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2925, 0, 0, (-3084), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 1455;
      ROI rOI0 = new ROI(1455, 0, 1455, 1455);
      assertNotNull(rOI0);
      assertEquals(1455, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1455, rOI0.lx());
      assertEquals(1456, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1455, rOI0.ly());
      
      Integer[] integerArray0 = null;
      int int1 = 0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(1455, 0, 0, (-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI(1455, 0, 1455, 1455);
      assertNotNull(rOI0);
      assertEquals(1455, rOI0.lx());
      assertEquals(1455, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1456, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1455, rOI0.ux());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 128);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(128, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.add((-2233), (-2233), 0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage2);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(128, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(128, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1760);
      intArray0[1] = (-1760);
      intArray0[2] = (-1760);
      intArray0[3] = (-1760);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-2752), (-2752), (-2752), 0);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals((-2752), int0);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2752), int2);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-2752), int3);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-2752), int4);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals((-2752), int5);
      assertEquals((-2752), rOI0.ux());
      assertEquals((-2752), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2753, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-2752), rOI0.lx());
      
      rOI0.setROI(7, 2809, 1503, 0);
      assertEquals(1497, rOI0.X());
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(2809, rOI0.ly());
      assertEquals(2810, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, (-2752), 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals((-2752), rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(2758, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals((-2752), int6);
      assertNotSame(rOI1, rOI0);
      assertEquals((-2752), rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(2758, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1497, rOI0.X());
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(2809, rOI0.ly());
      assertEquals(2810, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      rOI1.setROI(7, (-1760), (-2752), 16);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(2760, rOI1.X());
      assertEquals((-2752), rOI1.ux());
      assertEquals(7, rOI1.lx());
      assertEquals(16, rOI1.ly());
      assertEquals(1777, rOI1.Y());
      assertEquals((-1760), rOI1.uy());
      
      int int8 = rOI0.ux();
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(7, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1497, rOI0.X());
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(2809, rOI0.ly());
      assertEquals(2810, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1503, 2099, (-1760), (-1760), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = 10;
      int int1 = (-1124);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-1124), 10, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 128;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(128, 128);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(128, interpolatedColorImage0.X());
      assertEquals(128, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      interpolatedColorImage0.maxComponent();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 606;
      ColorImage colorImage0 = new ColorImage(606, 1669);
      assertNotNull(colorImage0);
      assertEquals(606, colorImage0.X());
      assertEquals(1669, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = (-640);
      // Undeclared exception!
      colorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = 5;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(5, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(10);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(10, 10);
      assertNotNull(interpolatedColorImage0);
      assertEquals(10, interpolatedColorImage0.X());
      assertEquals(10, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      rOI0.setROI(16, 16, 16, 16);
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.ux());
      assertEquals(16, rOI0.uy());
      assertEquals(16, rOI0.ly());
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(5, 921, (int) integer0, 0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      
      int int4 = rOI1.ux();
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 5, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = (-171);
      int[] intArray0 = new int[4];
      int int1 = 1;
      int int2 = 66;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(66, (-388));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(8, 8);
      assertNotNull(interpolatedColorImage0);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 8;
      intArray0[4] = 12;
      intArray0[5] = 8;
      intArray0[6] = 12;
      intArray0[7] = 0;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(12, 12, intArray0);
      assertNotNull(colorImage0);
      assertArrayEquals(new int[] {8, 12, 12, 8, 12, 8, 12, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(12, colorImage0.Y());
      assertEquals(12, colorImage0.X());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      long[] longArray0 = interpolatedColorImage0.sqrSum();
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      long[] longArray1 = interpolatedColorImage0.sqrSum();
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(1419, 2761, 0);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, 948, (-189), 1903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-105), (-105), integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      
      int int1 = 255;
      int int2 = 0;
      int int3 = (-16777216);
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 255, 0, (-16777216), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      Integer integer0 = colorImage0.minComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int1 = (-1968);
      Frame frame0 = null;
      try {
        frame0 = new Frame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 0, 0, 1985, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = (-1760);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1760);
      intArray0[1] = (-1760);
      intArray0[2] = (-1760);
      intArray0[3] = (-1760);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1760), (-1760), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-10), (-10), (-10), (-10), (-10));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 1455;
      ROI rOI0 = new ROI(1455, 0, 1455, 1455);
      assertNotNull(rOI0);
      assertEquals(1455, rOI0.lx());
      assertEquals(1455, rOI0.ly());
      assertEquals(1456, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1455, rOI0.ux());
      
      rOI0.setROI(0, 1711, 0, (-2619));
      assertEquals((-2619), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1711, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(4331, rOI0.Y());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1711;
      intArray0[2] = 16;
      intArray0[3] = 16;
      intArray0[4] = (-1909);
      intArray0[5] = 0;
      intArray0[6] = 1455;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-1909), 16, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2412;
      intArray0[1] = (-5282);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1703), 3, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(0, 0, 0, 2645);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(2646, rOI0.Y());
      assertEquals(2645, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertFalse(int9 == int2);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1846, 3014);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1846, colorImage0.X());
      assertEquals(3014, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      
      // Undeclared exception!
      colorImage0.min();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2415, 2415);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2415, colorImage0.Y());
      assertEquals(2415, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ColorImage colorImage1 = colorImage0.copy(rOI0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2415, colorImage0.Y());
      assertEquals(2415, colorImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(1, colorImage1.Y());
      assertEquals(1, colorImage1.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(0, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int7 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int8 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertEquals(921, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, 921);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int2 = 656;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 656);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int1);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(921, rOI1.ly());
      
      rOI1.setROI(0, 0, (-1090), 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1091, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-1090), rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int10 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int10 == int3);
      assertTrue(int10 == int0);
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertTrue(int10 == int1);
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertTrue(int10 == int4);
      assertTrue(int10 == int2);
      assertFalse(int10 == int9);
      assertEquals(0, int10);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int11 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int11 == int8);
      assertTrue(int11 == int4);
      assertTrue(int11 == int0);
      assertTrue(int11 == int6);
      assertTrue(int11 == int3);
      assertTrue(int11 == int2);
      assertFalse(int11 == int9);
      assertTrue(int11 == int5);
      assertTrue(int11 == int7);
      assertTrue(int11 == int1);
      assertTrue(int11 == int10);
      assertEquals(0, int11);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1091, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-1090), rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(8, 0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(8, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(0, 108, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-382), (-382), (-382), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 1338;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1338, 1338);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1338, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1338, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 9;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(26, 9);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(26, interpolatedColorImage0.X());
      assertEquals(9, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      String string0 = interpolatedColorImage0.toString();
      assertNotNull(string0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(26, interpolatedColorImage0.X());
      assertEquals(9, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.interp((double) 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.add((-456), (-456), (-456), (-456), (-456));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Integer[] integerArray0 = new Integer[0];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-1017), 1037, integerArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 3447;
      ColorImage colorImage1 = new ColorImage(3447, 3447);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(603, 603, 0, Integer.MAX_VALUE, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int1);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 0, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(129, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int2 = new Integer(0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int3 = 246;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int6 = 0;
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      
      int int7 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      
      int int8 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int9 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertTrue(int9 == int3);
      assertTrue(int9 == int0);
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int10 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int9);
      assertFalse(int10 == int8);
      assertFalse(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(int10 == int5);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertEquals(921, int10);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      
      Integer integer0 = new Integer(921);
      assertFalse(integer0.equals((Object)int6));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      assertNotNull(integer0);
      assertEquals(921, (int)integer0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.subtract(0, 0);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract((-2564), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2564
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1846, 3014);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1846, colorImage0.X());
      assertEquals(3014, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(6, rOI1.X());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int2);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(6, rOI1.X());
      
      // Undeclared exception!
      colorImage0.toString(rOI1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertNotNull(interpolatedColorImage0);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(5, 5, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-456);
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-640);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(617, (-640), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(0, 1, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int9 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertTrue(int9 == int0);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI((-3357), (-3357), 0, (-3357));
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3357), rOI0.uy());
      assertEquals((-3357), rOI0.ux());
      assertEquals(3358, rOI0.X());
      assertEquals((-3357), rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(10, 10, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(41, 41);
      assertNotNull(interpolatedColorImage0);
      assertEquals(41, interpolatedColorImage0.X());
      assertEquals(41, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertNotNull(image0);
      assertSame(interpolatedColorImage0, image0);
      assertEquals(41, interpolatedColorImage0.X());
      assertEquals(41, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(41, image0.Y());
      assertEquals(41, image0.X());
      
      Integer integer0 = interpolatedColorImage0.maxComponent();
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertSame(interpolatedColorImage0, image0);
      assertEquals(41, interpolatedColorImage0.X());
      assertEquals(41, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(41, 3816, 41);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, image0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, image0);
      assertEquals(41, interpolatedColorImage0.X());
      assertEquals(41, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(41, interpolatedColorImage1.X());
      assertEquals(41, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int6 = rOI0.uy();
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int7 = rOI0.ly();
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int8 = rOI0.ux();
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int9 = rOI0.lx();
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int2);
      assertTrue(int9 == int8);
      assertTrue(int9 == int4);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertEquals(0, int9);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int10 = rOI0.ux();
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertTrue(int10 == int3);
      assertTrue(int10 == int7);
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int1);
      assertTrue(int10 == int0);
      assertTrue(int10 == int9);
      assertTrue(int10 == int4);
      assertEquals(0, int10);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int11 = rOI0.lx();
      assertTrue(int11 == int9);
      assertTrue(int11 == int10);
      assertTrue(int11 == int0);
      assertTrue(int11 == int8);
      assertTrue(int11 == int2);
      assertTrue(int11 == int4);
      assertTrue(int11 == int7);
      assertTrue(int11 == int1);
      assertTrue(int11 == int6);
      assertTrue(int11 == int5);
      assertTrue(int11 == int3);
      assertEquals(0, int11);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(3367, 0, 0, 3367);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(3367, rOI1.ly());
      assertEquals(3367, rOI1.lx());
      assertEquals(3368, rOI1.Y());
      assertEquals(3368, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int12 = rOI0.ux();
      assertTrue(int12 == int2);
      assertTrue(int12 == int5);
      assertTrue(int12 == int9);
      assertTrue(int12 == int6);
      assertTrue(int12 == int4);
      assertTrue(int12 == int1);
      assertTrue(int12 == int0);
      assertTrue(int12 == int10);
      assertTrue(int12 == int3);
      assertTrue(int12 == int11);
      assertTrue(int12 == int8);
      assertTrue(int12 == int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int12);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int13 = rOI0.uy();
      assertTrue(int13 == int2);
      assertTrue(int13 == int10);
      assertTrue(int13 == int8);
      assertTrue(int13 == int1);
      assertTrue(int13 == int12);
      assertTrue(int13 == int5);
      assertTrue(int13 == int3);
      assertTrue(int13 == int11);
      assertTrue(int13 == int7);
      assertTrue(int13 == int4);
      assertTrue(int13 == int9);
      assertTrue(int13 == int6);
      assertTrue(int13 == int0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int13);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int14 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int14 == int3);
      assertTrue(int14 == int11);
      assertTrue(int14 == int5);
      assertTrue(int14 == int13);
      assertTrue(int14 == int7);
      assertTrue(int14 == int1);
      assertTrue(int14 == int12);
      assertTrue(int14 == int8);
      assertTrue(int14 == int10);
      assertTrue(int14 == int0);
      assertTrue(int14 == int9);
      assertTrue(int14 == int2);
      assertTrue(int14 == int6);
      assertTrue(int14 == int4);
      assertEquals(0, int14);
      assertNotSame(rOI1, rOI0);
      assertEquals(3367, rOI1.ly());
      assertEquals(3367, rOI1.lx());
      assertEquals(3368, rOI1.Y());
      assertEquals(3368, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int15 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int15 == int5);
      assertFalse(int15 == int3);
      assertFalse(int15 == int7);
      assertFalse(int15 == int14);
      assertFalse(int15 == int11);
      assertFalse(int15 == int1);
      assertFalse(int15 == int12);
      assertFalse(int15 == int4);
      assertFalse(int15 == int9);
      assertFalse(int15 == int2);
      assertFalse(int15 == int8);
      assertFalse(int15 == int13);
      assertFalse(int15 == int10);
      assertFalse(int15 == int0);
      assertFalse(int15 == int6);
      assertEquals(3367, int15);
      assertNotSame(rOI1, rOI0);
      assertEquals(3367, rOI1.ly());
      assertEquals(3367, rOI1.lx());
      assertEquals(3368, rOI1.Y());
      assertEquals(3368, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int16 = (-16777216);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-16777216), 3, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      int int1 = (-1968);
      String string0 = colorImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-4704), (-1968), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4704
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      assertFalse(int9 == int8);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int10 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int10 == int3);
      assertTrue(int10 == int7);
      assertTrue(int10 == int0);
      assertTrue(int10 == int2);
      assertTrue(int10 == int4);
      assertTrue(int10 == int1);
      assertTrue(int10 == int8);
      assertTrue(int10 == int6);
      assertTrue(int10 == int5);
      assertFalse(int10 == int9);
      assertEquals(0, int10);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int11 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int11 == int2);
      assertTrue(int11 == int5);
      assertTrue(int11 == int7);
      assertTrue(int11 == int10);
      assertTrue(int11 == int3);
      assertTrue(int11 == int4);
      assertTrue(int11 == int0);
      assertTrue(int11 == int8);
      assertTrue(int11 == int1);
      assertFalse(int11 == int9);
      assertTrue(int11 == int6);
      assertEquals(0, int11);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      ROI rOI2 = new ROI(59, (-426), 0, (-4084));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals((-4084), rOI2.uy());
      assertEquals((-426), rOI2.ly());
      assertEquals(60, rOI2.X());
      assertEquals(3659, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(59, rOI2.lx());
      
      int int12 = rOI0.ux();
      assertTrue(int12 == int11);
      assertFalse(int12 == int9);
      assertTrue(int12 == int8);
      assertTrue(int12 == int5);
      assertTrue(int12 == int6);
      assertTrue(int12 == int7);
      assertTrue(int12 == int10);
      assertTrue(int12 == int3);
      assertTrue(int12 == int4);
      assertTrue(int12 == int1);
      assertTrue(int12 == int2);
      assertTrue(int12 == int0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertEquals(0, int12);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int13 = rOI0.uy();
      assertTrue(int13 == int1);
      assertTrue(int13 == int12);
      assertTrue(int13 == int11);
      assertTrue(int13 == int10);
      assertTrue(int13 == int7);
      assertTrue(int13 == int3);
      assertTrue(int13 == int0);
      assertTrue(int13 == int2);
      assertTrue(int13 == int8);
      assertTrue(int13 == int4);
      assertTrue(int13 == int6);
      assertFalse(int13 == int9);
      assertTrue(int13 == int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertEquals(0, int13);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int14 = rOI1.ux();
      assertTrue(int14 == int12);
      assertTrue(int14 == int1);
      assertTrue(int14 == int11);
      assertTrue(int14 == int3);
      assertTrue(int14 == int7);
      assertTrue(int14 == int0);
      assertTrue(int14 == int10);
      assertTrue(int14 == int8);
      assertTrue(int14 == int4);
      assertTrue(int14 == int13);
      assertTrue(int14 == int2);
      assertTrue(int14 == int6);
      assertFalse(int14 == int9);
      assertTrue(int14 == int5);
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, int14);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer0.equals((Object)int9));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int12));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int6));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)int8));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int13));
      assertFalse(integer0.equals((Object)int11));
      assertFalse(integer0.equals((Object)int14));
      assertFalse(integer0.equals((Object)int10));
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(colorImage0, rOI2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-4704), (-1968), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1968
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(81, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[12];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int6 = rOI0.ly();
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int7 = rOI0.ux();
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int6));
      assertTrue(integer0.equals((Object)int7));
      assertTrue(integer0.equals((Object)int4));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int8 = rOI0.ux();
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int9 = rOI0.lx();
      assertTrue(int9 == int8);
      assertTrue(int9 == int5);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int3);
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(3367, 0, 0, 3367);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(3368, rOI1.X());
      assertEquals(3368, rOI1.Y());
      assertEquals(3367, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(3367, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      int int10 = rOI0.ux();
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertTrue(int10 == int7);
      assertTrue(int10 == int6);
      assertTrue(int10 == int4);
      assertTrue(int10 == int1);
      assertTrue(int10 == int0);
      assertTrue(int10 == int9);
      assertTrue(int10 == int3);
      assertTrue(int10 == int2);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int10);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int11 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int11 == int0);
      assertTrue(int11 == int9);
      assertTrue(int11 == int5);
      assertTrue(int11 == int3);
      assertTrue(int11 == int2);
      assertTrue(int11 == int7);
      assertTrue(int11 == int10);
      assertTrue(int11 == int8);
      assertTrue(int11 == int1);
      assertTrue(int11 == int6);
      assertTrue(int11 == int4);
      assertEquals(0, int11);
      assertNotSame(rOI1, rOI0);
      assertEquals(3368, rOI1.X());
      assertEquals(3368, rOI1.Y());
      assertEquals(3367, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(3367, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      int int12 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int12 == int1);
      assertFalse(int12 == int10);
      assertFalse(int12 == int11);
      assertFalse(int12 == int6);
      assertFalse(int12 == int8);
      assertFalse(int12 == int4);
      assertFalse(int12 == int7);
      assertFalse(int12 == int5);
      assertFalse(int12 == int3);
      assertFalse(int12 == int9);
      assertFalse(int12 == int2);
      assertFalse(int12 == int0);
      assertEquals(3367, int12);
      assertNotSame(rOI1, rOI0);
      assertEquals(3368, rOI1.X());
      assertEquals(3368, rOI1.Y());
      assertEquals(3367, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(3367, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      InterpolatedGrayImage interpolatedGrayImage0 = (InterpolatedGrayImage)interpolatedColorImage0.plane(0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.diff(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage0.subtract(0, 0, 0);
      assertNotNull(interpolatedColorImage2);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = (-8);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1510), (-8), (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(118, (-2488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      GrayImage[] grayImageArray0 = new GrayImage[0];
      interpolatedColorImage0.planes = grayImageArray0;
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.plane((-1994));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[4];
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.add(3, (-544), 255, 255, (-424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int0 = (-1285);
      int int1 = 4;
      int int2 = (-2004);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1285), 4, (-2004));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(205, 1, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-544), (-3249), (-544), 255, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3249
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.HLS;
      interpolatedColorImage0.colorModel = colorModel0;
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.HLS, interpolatedColorImage0.getColorModel());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.HLS, interpolatedColorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(5, 1079, 5, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      Integer[] integerArray0 = null;
      // Undeclared exception!
      try { 
        colorImage0.clear((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-456);
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((-456), (-456));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(718, 341, 341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, (-1060), 1, Integer.MIN_VALUE);
      assertEquals((-1060), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(2147482589, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(1, int0);
      assertEquals((-1060), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(2147482589, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals((-1060), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(2147482589, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      rOI0.setROI(162, 162, (-1060), Integer.MIN_VALUE);
      assertEquals((-2147483485), rOI0.Y());
      assertEquals(162, rOI0.lx());
      assertEquals((-1060), rOI0.ux());
      assertEquals(1223, rOI0.X());
      assertEquals(162, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.divide(1, 0, 0);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1060), int2);
      assertEquals((-2147483485), rOI0.Y());
      assertEquals(162, rOI0.lx());
      assertEquals((-1060), rOI0.ux());
      assertEquals(1223, rOI0.X());
      assertEquals(162, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      rOI0.setROI(162, (-1360), (-1300), 162);
      assertEquals(1523, rOI0.Y());
      assertEquals(1463, rOI0.X());
      assertEquals(162, rOI0.lx());
      assertEquals((-1300), rOI0.ux());
      assertEquals(162, rOI0.ly());
      assertEquals((-1360), rOI0.uy());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2415, 2415);
      assertNotNull(colorImage0);
      assertEquals(2415, colorImage0.Y());
      assertEquals(2415, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int4 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      colorImage0.add(0, 921, 7, 921, (-2035), rOI0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(2415, colorImage0.Y());
      assertEquals(2415, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      colorImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      
      ROI rOI0 = new ROI(128, 889, 8, 1026);
      assertNotNull(rOI0);
      assertEquals(138, rOI0.Y());
      assertEquals(121, rOI0.X());
      assertEquals(1026, rOI0.ly());
      assertEquals(128, rOI0.lx());
      assertEquals(889, rOI0.uy());
      assertEquals(8, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(8, int0);
      assertEquals(138, rOI0.Y());
      assertEquals(121, rOI0.X());
      assertEquals(1026, rOI0.ly());
      assertEquals(128, rOI0.lx());
      assertEquals(889, rOI0.uy());
      assertEquals(8, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(889, int1);
      assertEquals(138, rOI0.Y());
      assertEquals(121, rOI0.X());
      assertEquals(1026, rOI0.ly());
      assertEquals(128, rOI0.lx());
      assertEquals(889, rOI0.uy());
      assertEquals(8, rOI0.ux());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8, int2);
      assertEquals(138, rOI0.Y());
      assertEquals(121, rOI0.X());
      assertEquals(1026, rOI0.ly());
      assertEquals(128, rOI0.lx());
      assertEquals(889, rOI0.uy());
      assertEquals(8, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.add(921, 4340, 2801, 0, (-897), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5229
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-3268);
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 8);
      assertNotNull(colorImage0);
      assertEquals(8, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      String string0 = colorImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals("8:8\nnull \n8:8\nnull \n8:8\nnull \n", string0);
      assertEquals(8, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int6 = 5;
      int int7 = 921;
      int int8 = 0;
      // Undeclared exception!
      try { 
        colorImage0.InitFromImage((java.awt.Image) null, 0, 0, 0, 921);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI(0, 0, (-123), 0);
      assertNotNull(rOI0);
      assertEquals(124, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-123), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[9];
      intArray0[2] = (-2504);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-2504), (-2504), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(10, 10, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 119, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[3];
      int int0 = 1;
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 8;
      int int1 = 3045;
      ColorImage colorImage0 = new ColorImage(8, 3045);
      assertNotNull(colorImage0);
      assertEquals(8, colorImage0.X());
      assertEquals(3045, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      colorImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int0 = (-171);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-171), 1, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Integer integer0 = new Integer(30);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(30, (int)integer0);
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(30, 30);
      assertNotNull(interpolatedColorImage0);
      assertEquals(30, interpolatedColorImage0.X());
      assertEquals(30, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.ly();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, (-1497), (-128), 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1497
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(2025, 2025, 2025, 2025, 3627, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2389, 2389, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-381), (-381), (-381), (-381), (-381), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(6, 0, 8, 0, intArray0);
      assertNotNull(colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(6, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-1703), (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1703
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(2054, 2054, 2054, 2054, 2054);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1066, 0, 0, Integer.MAX_VALUE, (-1316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = null;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      
      rOI1.setROI((-2263), 0, 0, (-604));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(605, rOI1.Y());
      assertEquals((-604), rOI1.uy());
      assertEquals((-2263), rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2264, rOI1.X());
      assertEquals(0, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertEquals((-2263), int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(605, rOI1.Y());
      assertEquals((-604), rOI1.uy());
      assertEquals((-2263), rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2264, rOI1.X());
      assertEquals(0, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int4);
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertFalse(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int8);
      assertFalse(int9 == int6);
      assertTrue(int9 == int2);
      assertTrue(int9 == int5);
      assertTrue(int9 == int0);
      assertTrue(int9 == int3);
      assertTrue(int9 == int4);
      assertEquals(0, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(605, rOI1.Y());
      assertEquals((-604), rOI1.uy());
      assertEquals((-2263), rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2264, rOI1.X());
      assertEquals(0, rOI1.ly());
      
      int int10 = (-2321);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, (int[]) null, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      int int5 = rOI0.lx();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int6 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int7 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract((-3447), (-3447), 2456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[15];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1760);
      intArray0[1] = (-1760);
      intArray0[2] = (-1760);
      intArray0[3] = (-1760);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(7, 2809, 1503, 0);
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(1497, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2810, rOI0.Y());
      assertEquals(2809, rOI0.ly());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(921, rOI1.ly());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(1497, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2810, rOI0.Y());
      assertEquals(2809, rOI0.ly());
      
      rOI1.setROI(7, (-1760), 0, 16);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(16, rOI1.ly());
      assertEquals(1777, rOI1.Y());
      assertEquals(8, rOI1.X());
      assertEquals(7, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals((-1760), rOI1.uy());
      
      int int8 = rOI0.ux();
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(7, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1503, rOI0.lx());
      assertEquals(7, rOI0.ux());
      assertEquals(1497, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2810, rOI0.Y());
      assertEquals(2809, rOI0.ly());
      
      int int9 = rOI1.ly();
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(16, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(16, rOI1.ly());
      assertEquals(1777, rOI1.Y());
      assertEquals(8, rOI1.X());
      assertEquals(7, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals((-1760), rOI1.uy());
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-385), 0, (-385), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int1);
      assertFalse(int9 == int8);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(5, rOI1.lx());
      assertEquals(6, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int10 = rOI2.uy();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int10 == int7);
      assertTrue(int10 == int4);
      assertTrue(int10 == int3);
      assertTrue(int10 == int6);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertFalse(int10 == int9);
      assertTrue(int10 == int0);
      assertEquals(0, int10);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int11 = rOI2.ly();
      assertTrue(int11 == int0);
      assertTrue(int11 == int7);
      assertTrue(int11 == int1);
      assertTrue(int11 == int2);
      assertTrue(int11 == int10);
      assertTrue(int11 == int4);
      assertTrue(int11 == int8);
      assertFalse(int11 == int9);
      assertTrue(int11 == int3);
      assertTrue(int11 == int6);
      assertTrue(int11 == int5);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int11);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int12 = rOI2.ux();
      assertTrue(int12 == int0);
      assertTrue(int12 == int4);
      assertTrue(int12 == int10);
      assertTrue(int12 == int1);
      assertTrue(int12 == int11);
      assertFalse(int12 == int9);
      assertTrue(int12 == int7);
      assertTrue(int12 == int2);
      assertTrue(int12 == int8);
      assertTrue(int12 == int3);
      assertTrue(int12 == int6);
      assertTrue(int12 == int5);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int12);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int13 = rOI2.lx();
      assertTrue(int13 == int3);
      assertTrue(int13 == int7);
      assertFalse(int13 == int9);
      assertTrue(int13 == int4);
      assertTrue(int13 == int12);
      assertTrue(int13 == int1);
      assertTrue(int13 == int8);
      assertTrue(int13 == int2);
      assertTrue(int13 == int5);
      assertTrue(int13 == int11);
      assertTrue(int13 == int0);
      assertTrue(int13 == int6);
      assertTrue(int13 == int10);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int13);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int14 = rOI2.ux();
      assertTrue(int14 == int13);
      assertTrue(int14 == int2);
      assertTrue(int14 == int3);
      assertTrue(int14 == int11);
      assertTrue(int14 == int12);
      assertTrue(int14 == int0);
      assertFalse(int14 == int9);
      assertTrue(int14 == int10);
      assertTrue(int14 == int4);
      assertTrue(int14 == int1);
      assertTrue(int14 == int8);
      assertTrue(int14 == int7);
      assertTrue(int14 == int6);
      assertTrue(int14 == int5);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int14);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int15 = rOI2.lx();
      assertTrue(int15 == int13);
      assertTrue(int15 == int7);
      assertTrue(int15 == int11);
      assertTrue(int15 == int6);
      assertTrue(int15 == int5);
      assertTrue(int15 == int1);
      assertFalse(int15 == int9);
      assertTrue(int15 == int0);
      assertTrue(int15 == int4);
      assertTrue(int15 == int10);
      assertTrue(int15 == int3);
      assertTrue(int15 == int2);
      assertTrue(int15 == int14);
      assertTrue(int15 == int8);
      assertTrue(int15 == int12);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int15);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      ROI rOI3 = new ROI(5, 921, 0, 0);
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI1));
      assertNotNull(rOI3);
      assertEquals(5, rOI3.lx());
      assertEquals(6, rOI3.X());
      assertEquals(921, rOI3.ly());
      assertEquals(922, rOI3.Y());
      assertEquals(0, rOI3.uy());
      assertEquals(0, rOI3.ux());
      
      int int16 = rOI3.ux();
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI1));
      assertTrue(int16 == int3);
      assertTrue(int16 == int7);
      assertFalse(int16 == int9);
      assertTrue(int16 == int12);
      assertTrue(int16 == int4);
      assertTrue(int16 == int2);
      assertTrue(int16 == int8);
      assertTrue(int16 == int14);
      assertTrue(int16 == int1);
      assertTrue(int16 == int11);
      assertTrue(int16 == int5);
      assertTrue(int16 == int15);
      assertTrue(int16 == int0);
      assertTrue(int16 == int6);
      assertTrue(int16 == int13);
      assertTrue(int16 == int10);
      assertEquals(0, int16);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      assertNotSame(rOI3, rOI1);
      assertEquals(5, rOI3.lx());
      assertEquals(6, rOI3.X());
      assertEquals(921, rOI3.ly());
      assertEquals(922, rOI3.Y());
      assertEquals(0, rOI3.uy());
      assertEquals(0, rOI3.ux());
      
      int int17 = rOI2.uy();
      assertTrue(int17 == int8);
      assertTrue(int17 == int3);
      assertTrue(int17 == int6);
      assertTrue(int17 == int0);
      assertTrue(int17 == int11);
      assertTrue(int17 == int10);
      assertTrue(int17 == int2);
      assertTrue(int17 == int14);
      assertTrue(int17 == int5);
      assertTrue(int17 == int15);
      assertTrue(int17 == int13);
      assertTrue(int17 == int12);
      assertFalse(int17 == int9);
      assertTrue(int17 == int16);
      assertTrue(int17 == int7);
      assertTrue(int17 == int1);
      assertTrue(int17 == int4);
      assertFalse(rOI2.equals((Object)rOI3));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int17);
      assertNotSame(rOI2, rOI3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int18 = rOI2.ux();
      assertTrue(int18 == int13);
      assertTrue(int18 == int7);
      assertTrue(int18 == int17);
      assertTrue(int18 == int11);
      assertTrue(int18 == int15);
      assertTrue(int18 == int6);
      assertTrue(int18 == int5);
      assertFalse(int18 == int9);
      assertTrue(int18 == int1);
      assertTrue(int18 == int4);
      assertTrue(int18 == int10);
      assertTrue(int18 == int0);
      assertTrue(int18 == int3);
      assertTrue(int18 == int2);
      assertTrue(int18 == int14);
      assertTrue(int18 == int8);
      assertTrue(int18 == int12);
      assertTrue(int18 == int16);
      assertFalse(rOI2.equals((Object)rOI3));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int18);
      assertNotSame(rOI2, rOI3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      
      int int19 = rOI3.ly();
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(int19 == int1);
      assertFalse(int19 == int8);
      assertFalse(int19 == int3);
      assertFalse(int19 == int12);
      assertFalse(int19 == int16);
      assertFalse(int19 == int15);
      assertFalse(int19 == int2);
      assertFalse(int19 == int14);
      assertFalse(int19 == int4);
      assertFalse(int19 == int7);
      assertFalse(int19 == int13);
      assertFalse(int19 == int5);
      assertFalse(int19 == int6);
      assertFalse(int19 == int11);
      assertFalse(int19 == int18);
      assertTrue(int19 == int9);
      assertFalse(int19 == int10);
      assertFalse(int19 == int0);
      assertFalse(int19 == int17);
      assertEquals(921, int19);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      assertNotSame(rOI3, rOI1);
      assertEquals(5, rOI3.lx());
      assertEquals(6, rOI3.X());
      assertEquals(921, rOI3.ly());
      assertEquals(922, rOI3.Y());
      assertEquals(0, rOI3.uy());
      assertEquals(0, rOI3.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(colorImage0, rOI1, rOI3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(0, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int7 = rOI1.ly();
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(921, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      
      ColorImage colorImage0 = new ColorImage(921, 0);
      assertNotNull(colorImage0);
      assertEquals(921, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = colorImage0.copy();
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(921, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(921, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 1322;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        colorImage0.add(1322, 1322, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-3042), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertNotNull(colorImage0);
      assertEquals(8, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 8;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      assertArrayEquals(new int[] {0, 0, 8}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(8, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      
      ROI rOI0 = new ROI(5, 0, (-631), (-492));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals((-631), rOI0.ux());
      assertEquals(637, rOI0.X());
      assertEquals(493, rOI0.Y());
      assertEquals((-492), rOI0.uy());
      assertEquals(5, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals((-492), int0);
      assertEquals(0, rOI0.ly());
      assertEquals((-631), rOI0.ux());
      assertEquals(637, rOI0.X());
      assertEquals(493, rOI0.Y());
      assertEquals((-492), rOI0.uy());
      assertEquals(5, rOI0.lx());
      
      rOI0.setROI(5, 0, 8, (-1233));
      assertEquals(0, rOI0.ly());
      assertEquals(1234, rOI0.Y());
      assertEquals(4, rOI0.X());
      assertEquals(5, rOI0.ux());
      assertEquals((-1233), rOI0.uy());
      assertEquals(8, rOI0.lx());
      
      rOI0.setROI(0, 0, (-492), 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(493, rOI0.X());
      assertEquals((-492), rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-492), int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(493, rOI0.X());
      assertEquals((-492), rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-492), (-568), (-1233), 2688);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-184);
      intArray0[2] = (-184);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-184), (-184), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int7 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int1);
      assertFalse(int9 == int7);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertEquals(921, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(921, rOI1.ly());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-10), (-10), intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(165, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = interpolatedColorImage0.X();
      assertEquals(165, int0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 165;
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.subtract(165, 0, 165);
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedColorImage1.interpolationMethod = interpolationMethod0;
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      
      String string0 = interpolatedColorImage1.toString();
      assertNotNull(string0);
      assertEquals("165:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n165:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n165:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage0.divide((-1021), 165, (-1021));
      assertNotNull(interpolatedColorImage2);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(165, interpolatedColorImage2.X());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(165, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = interpolatedColorImage0.X();
      assertEquals(165, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 165;
      intArray0[1] = 165;
      intArray0[2] = 165;
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.divide(intArray0);
      assertNotNull(interpolatedColorImage1);
      assertArrayEquals(new int[] {165, 165, 165}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(165, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(165, interpolatedColorImage1.X());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 649;
      ColorImage colorImage0 = new ColorImage(649, 1658);
      assertNotNull(colorImage0);
      assertEquals(649, colorImage0.X());
      assertEquals(1658, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = (-640);
      // Undeclared exception!
      colorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 3572;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 16;
      intArray0[2] = 3572;
      intArray0[3] = (-1);
      intArray0[4] = 3572;
      intArray0[5] = (-1);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int6 = rOI0.lx();
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      
      int int7 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      
      int int8 = rOI0.uy();
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int9 = rOI0.ux();
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertFalse(int9 == int0);
      assertTrue(int9 == int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int9);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int10 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertFalse(int10 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(int10 == int2);
      assertFalse(int10 == int8);
      assertEquals(921, int10);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.X());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1), 3572, intArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1311);
      intArray0[1] = 8;
      intArray0[2] = (-1311);
      intArray0[3] = (-1311);
      intArray0[4] = (-1311);
      intArray0[5] = (-1311);
      intArray0[6] = (-1311);
      intArray0[7] = (-1311);
      intArray0[8] = (-1311);
      // Undeclared exception!
      try { 
        colorImage0.add((-1311), (-1311), intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      double double0 = 0.0;
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      Integer integer0 = new Integer((-1188));
      assertNotNull(integer0);
      assertEquals((-1188), (int)integer0);
      
      ROI rOI0 = new ROI(5, 1930, 1930, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.uy());
      assertEquals(1926, rOI0.X());
      assertEquals(1676, rOI0.Y());
      assertEquals(1930, rOI0.ly());
      assertEquals(1930, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(5, int0);
      assertEquals(255, rOI0.uy());
      assertEquals(1926, rOI0.X());
      assertEquals(1676, rOI0.Y());
      assertEquals(1930, rOI0.ly());
      assertEquals(1930, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(255, int1);
      assertEquals(255, rOI0.uy());
      assertEquals(1926, rOI0.X());
      assertEquals(1676, rOI0.Y());
      assertEquals(1930, rOI0.ly());
      assertEquals(1930, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, int2);
      assertEquals(255, rOI0.uy());
      assertEquals(1926, rOI0.X());
      assertEquals(1676, rOI0.Y());
      assertEquals(1930, rOI0.ly());
      assertEquals(1930, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1930, int3);
      assertEquals(255, rOI0.uy());
      assertEquals(1926, rOI0.X());
      assertEquals(1676, rOI0.Y());
      assertEquals(1930, rOI0.ly());
      assertEquals(1930, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.clip(5, 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(5, 921, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      int int6 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int7 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertEquals(921, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(922, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(6, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(921, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(5, 5, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI(0, (-132), 0, 0);
      assertNotNull(rOI0);
      assertEquals(133, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-132), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.max(1985, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1985
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = null;
      int int0 = 10;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(10, 10, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(236, 236, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 236
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int2 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int3 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int4 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int5 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int7 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      ROI rOI2 = new ROI(5, 921, 0, 0);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(6, rOI2.X());
      assertEquals(922, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(5, rOI2.lx());
      assertEquals(921, rOI2.ly());
      
      int int8 = rOI2.ux();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int8 == int2);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(6, rOI2.X());
      assertEquals(922, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(5, rOI2.lx());
      assertEquals(921, rOI2.ly());
      
      int int9 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertEquals(0, int9);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int10 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int10 == int9);
      assertTrue(int10 == int0);
      assertTrue(int10 == int6);
      assertTrue(int10 == int1);
      assertTrue(int10 == int7);
      assertTrue(int10 == int3);
      assertTrue(int10 == int5);
      assertTrue(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int4);
      assertEquals(0, int10);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int11 = rOI2.ly();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int11 == int8);
      assertFalse(int11 == int10);
      assertFalse(int11 == int3);
      assertFalse(int11 == int9);
      assertFalse(int11 == int0);
      assertFalse(int11 == int1);
      assertFalse(int11 == int7);
      assertFalse(int11 == int2);
      assertFalse(int11 == int6);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertEquals(921, int11);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(6, rOI2.X());
      assertEquals(922, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(5, rOI2.lx());
      assertEquals(921, rOI2.ly());
      
      int int12 = rOI2.ux();
      assertTrue(int12 == int8);
      assertFalse(int12 == int11);
      assertTrue(int12 == int9);
      assertTrue(int12 == int10);
      assertTrue(int12 == int3);
      assertTrue(int12 == int0);
      assertTrue(int12 == int7);
      assertTrue(int12 == int4);
      assertTrue(int12 == int1);
      assertTrue(int12 == int2);
      assertTrue(int12 == int6);
      assertTrue(int12 == int5);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, int12);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(6, rOI2.X());
      assertEquals(922, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(5, rOI2.lx());
      assertEquals(921, rOI2.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI((-332), 445, 128, 128);
      assertNotNull(rOI0);
      assertEquals(128, rOI0.lx());
      assertEquals(445, rOI0.ly());
      assertEquals(128, rOI0.uy());
      assertEquals(318, rOI0.Y());
      assertEquals((-332), rOI0.ux());
      assertEquals(461, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals((-332), int0);
      assertEquals(128, rOI0.lx());
      assertEquals(445, rOI0.ly());
      assertEquals(128, rOI0.uy());
      assertEquals(318, rOI0.Y());
      assertEquals((-332), rOI0.ux());
      assertEquals(461, rOI0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(128, int1);
      assertEquals(128, rOI0.lx());
      assertEquals(445, rOI0.ly());
      assertEquals(128, rOI0.uy());
      assertEquals(318, rOI0.Y());
      assertEquals((-332), rOI0.ux());
      assertEquals(461, rOI0.X());
      
      rOI0.setROI((-332), 128, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(129, rOI0.Y());
      assertEquals(128, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-332), rOI0.ux());
      assertEquals(333, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-332), int2);
      assertEquals(0, rOI0.lx());
      assertEquals(129, rOI0.Y());
      assertEquals(128, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-332), rOI0.ux());
      assertEquals(333, rOI0.X());
      
      int int3 = rOI0.ly();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(128, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(129, rOI0.Y());
      assertEquals(128, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-332), rOI0.ux());
      assertEquals(333, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(0, 445, 256, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Integer integer0 = new Integer((-2551));
      assertNotNull(integer0);
      assertEquals((-2551), (int)integer0);
      
      rOI0.setROI(2331, (-2551), 0, 2331);
      assertEquals(4883, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-2551), rOI0.uy());
      assertEquals(2331, rOI0.lx());
      assertEquals(2332, rOI0.X());
      assertEquals(2331, rOI0.ly());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(0, 1, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3167, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 3167;
      intArray0[1] = 0;
      intArray0[2] = 3167;
      intArray0[3] = 3167;
      ColorImage colorImage1 = colorImage0.multiply(intArray0);
      assertSame(colorImage0, colorImage1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[14];
      ColorImage colorImage0 = new ColorImage();
      ColorImage colorImage1 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage1.divide(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int[] intArray0 = new int[1];
      intArray0[0] = (-544);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      int int0 = 0;
      rOI0.uy();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(Integer.MIN_VALUE, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 0, 0, 0);
      rOI0.ly();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 128);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(2, 0, 0, (-1986), 3760, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2, 2);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      ColorModel colorModel0 = ColorModel.YIQ;
      interpolatedColorImage0.colorModel = colorModel0;
      int int0 = 661;
      ROI rOI0 = new ROI();
      rOI0.uy();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.interp(0.0F, (float) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI(0, 0, 0, (-1935));
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI1.setROI(3715, 0, 0, 0);
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = (-4);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(16, (-4), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.ux();
      Integer integer0 = new Integer(30);
      ColorImage colorImage0 = new ColorImage();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(30, 30);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(colorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(165, 0);
      int int0 = interpolatedColorImage0.X();
      assertEquals(165, int0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 165;
      ColorImage colorImage0 = interpolatedColorImage0.subtract(165, 0, 165);
      colorImage0.toString();
      assertEquals(165, interpolatedColorImage0.X());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      double double0 = 0.0;
      int[] intArray0 = new int[7];
      int int0 = 3;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((java.awt.Image) null, 3, 1625, 3, 3205);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 5;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(colorImage0, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      interpolatedColorImage0.max();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-902), 921, 0, 2075, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 921
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI(1455, 0, 1455, 1455);
      interpolatedColorImage0.plane(0);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.setPlane(0, (GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.lx();
      rOI0.setROI(0, 0, 0, 0);
      rOI0.setROI(0, 0, 1832, (-1968));
      int int0 = new Integer(0);
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      interpolatedColorImage0.copy();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = null;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1516, 637, (int[]) null, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(165, 0);
      interpolatedColorImage0.X();
      interpolatedColorImage0.min();
      int[] intArray0 = new int[1];
      intArray0[0] = 795;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(165, 795, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 795
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      ColorImage colorImage0 = interpolatedColorImage1.add(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 1913, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-245), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -245
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      ROI rOI0 = new ROI(1455, 0, 1455, 1455);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, (Integer[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI(0, 0, 0, 2);
      ROI rOI1 = new ROI(0, 204, 128, 0);
      rOI0.ux();
      rOI1.uy();
      rOI1.setROI(0, 2, 1, 0);
      rOI1.setROI(0, (-3338), 0, 204);
      rOI0.ux();
      rOI1.ly();
      colorImage0.X();
      ColorImage colorImage1 = null;
      try {
        colorImage1 = new ColorImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.ux();
      Integer integer0 = new Integer(0);
      ColorImage colorImage0 = new ColorImage();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(colorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) interpolatedColorImage0, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = (-3705);
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.clip((-3705), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(41, 41);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(41, 3816, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1333;
      intArray0[2] = (-132);
      // Undeclared exception!
      interpolatedColorImage1.addbuffer(1333, 1333, intArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      rOI1.ux();
      rOI0.setROI(1929, 5, 1455, (-546));
      rOI1.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      interpolatedColorImage0.plane(0);
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[12];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      int int0 = new Integer(0);
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(3367, 0, 0, 3367);
      rOI0.ux();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      rOI1.ux();
      rOI1.ly();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      interpolatedColorImage1.plane(0);
      interpolatedColorImage0.diff(interpolatedColorImage1);
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1, 1, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI(128, (-1489), 0, (-171));
      rOI0.ux();
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      rOI0.uy();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedColorImage1.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1489
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer[] integerArray0 = new Integer[1];
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(921, (-4722), 921, (-4722), (-4722), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      interpolatedColorImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI((-2163), 921, (-73), 2233);
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 86, 749, 688, 3, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[9];
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer((-2537), 1859, 0, 0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int int1 = 3;
      interpolatedColorImage0.divide(0, 6);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.plane(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorModel colorModel0 = ColorModel.HSV;
      interpolatedColorImage0.setColorModel(colorModel0);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(2147483627, 2147483627, 15, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.ly();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((java.awt.Image) null, 5, 0, 1885, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(0, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      ColorImage colorImage0 = new ColorImage(921, 0);
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = (-1457);
      ColorImage colorImage0 = new ColorImage();
      int int1 = (-3277);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-3277), 617, (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-138), (-138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI(10, 10, 10, 10);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ColorModel colorModel0 = ColorModel.HSV;
      interpolatedColorImage0.setColorModel(colorModel0);
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      interpolatedColorImage0.min();
      intArray0[4] = 0;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI(0, 0, (-3676), (-3676));
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.lx();
      ROI rOI1 = new ROI(3367, (-3676), (-3676), 3367);
      rOI0.ux();
      Integer integer0 = new Integer(0);
      rOI1.ux();
      rOI1.ly();
      int int0 = (-16777216);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-16777216), 3, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((java.awt.Image) null, 3, 1641, 3, (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, 0, (-2075), 1338, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = (-456);
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.max((-456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -456
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-3), (-3), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      ColorImage colorImage0 = new ColorImage(8, 0);
      int int2 = 0;
      int int3 = 255;
      colorImage0.max();
      int int4 = (-16777216);
      GrayImage[] grayImageArray0 = new GrayImage[5];
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)16;
      byteArray0[2] = (byte)16;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)16);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-105), (-105), integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[4];
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(5, 921, 0, 0);
      rOI1.ux();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      // Undeclared exception!
      try { 
        colorImage0.clip((-1195), 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[3];
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      int int0 = 5;
      ROI rOI1 = new ROI(921, 5, (-32768), (-32768));
      Integer integer1 = new Integer(0);
      rOI0.uy();
      rOI0.ux();
      Integer integer2 = new Integer(0);
      ColorImage colorImage0 = new ColorImage();
      ColorImage colorImage1 = new ColorImage(0, 0);
      colorImage1.multiply(colorImage0);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(2544, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      int int0 = 236;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2, 236, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-16777216), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorModel colorModel0 = ColorModel.HLS;
      interpolatedColorImage0.colorModel = colorModel0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      int int1 = (-136);
      ROI rOI0 = new ROI(0, (-136), 0, 0);
      int int2 = 0;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      integerArray0[0] = (Integer) 100;
      Integer.valueOf(3800);
      Integer.valueOf(0);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      integer1.byteValue();
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integer2.intValue();
      Integer integer3 = new Integer(128);
      integer3.floatValue();
      integerArray0[2] = integer3;
      Integer.parseInt("4");
      integerArray0[3] = (Integer) 4;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(8, 618, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      colorImage0.maxComponent();
      // Undeclared exception!
      try { 
        colorImage0.clear((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = interpolatedColorImage0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = (-640);
      ROI rOI0 = new ROI();
      rOI0.ly();
      colorImage0.clip((-640), 11);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = (-456);
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }
}
