* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Heap
* Starting Client-0
* Connecting to master process on port 21599
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Heap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 548
* Using seed 1550516461133
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 203 / 548
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.46875
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4406779661016949
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.40752351097178685
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21052631578947367
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.42857142857142855
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.423728813559322
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 298
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.578125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5084745762711864
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5141065830721003
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5714285714285714
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.5084745762711864
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 386
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.59375
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5254237288135594
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5329153605015674
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5714285714285714
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.5254237288135594
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 478
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.59375
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5254237288135594
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5329153605015674
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5714285714285714
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.5254237288135594
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 578
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5714285714285714
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 627
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* Search finished after 124s and 5 generations, 7920 statements, best individual has fitness: 230.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* Minimizing test suite
* Going to analyze the coverage criteria
[MASTER] 20:04:22.215 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 66%
* Total number of goals: 64
* Number of covered goals: 42
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 61%
* Total number of goals: 59
* Number of covered goals: 36
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 61%
* Total number of goals: 319
* Number of covered goals: 193
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 26%
* Total number of goals: 19
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 71%
* Total number of goals: 14
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 58%
* Total number of goals: 59
* Number of covered goals: 34
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* Generated 44 tests with total length 484
* Resulting test suite's coverage: 65% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:05:11.258 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8081166666666667% of time used, but only 6/44 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.567398119122257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* Compiling and checking tests
[MASTER] 20:05:44.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 20:05:44.715 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[0] = 0.0;
doubleArray0[1] = 0.0;
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[4] = 0.0;
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 2241.2445226151517;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
int int0 = 0;
activityBasedVariableComparator0.preferredTo(0, 0);
Heap heap0 = new Heap(activityBasedVariableComparator0);
heap0.heapProperty(int0);
heap0.ok(int0);
heap0.insert(int0);
int int1 = 2;
heap0.percolateDown(int1);

[MASTER] 20:05:46.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 20:05:46.736 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(activityBasedVariableComparator0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

boolean boolean0 = activityBasedVariableComparator0.preferredTo(0, 0);
assertFalse(boolean0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(heap0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

int int0 = 533;
heap0.setBounds(533);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(1);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

int int1 = 3021;
heap0.percolateUp(3021);

[MASTER] 20:05:47.688 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 20:05:47.689 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[0] = 0.0;
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[4] = 0.0;
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(activityBasedVariableComparator0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

boolean boolean0 = activityBasedVariableComparator0.preferredTo(0, 0);
assertFalse(boolean0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(heap0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.setBounds(533);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(1);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.percolateUp(3021);

[MASTER] 20:05:48.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 20:05:48.804 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[0] = 0.0;
doubleArray0[1] = 0.0;
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[4] = 0.0;
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(activityBasedVariableComparator0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

boolean boolean0 = activityBasedVariableComparator0.preferredTo(0, 0);
assertFalse(boolean0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(heap0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());

heap0.setBounds(533);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());

heap0.insert(1);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());

heap0.percolateUp(3021);

[MASTER] 20:05:52.353 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 20:05:52.356 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[0] = 0.0;
doubleArray0[1] = 0.0;
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(activityBasedVariableComparator0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

int int0 = 0;
boolean boolean0 = activityBasedVariableComparator0.preferredTo(0, 0);
assertFalse(boolean0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(heap0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());

heap0.heapProperty(int0);
heap0.heapProperty();
heap0.empty();

[MASTER] 20:05:57.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 20:05:57.678 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
doubleArray0[0] = 0.0;
doubleArray0[1] = 0.0;
doubleArray0[2] = 0.0;
doubleArray0[3] = (-398.8);
doubleArray0[4] = 0.0;
doubleArray0[5] = 2241.2445226151517;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
doubleArray0[8] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(activityBasedVariableComparator0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

boolean boolean0 = activityBasedVariableComparator0.preferredTo(0, 0);
assertFalse(boolean0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-398.8), 0.0, 2241.2445226151517, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertNotNull(heap0);
assertEquals(9, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());

int int0 = 0;
heap0.heapProperty(int0);

* Writing tests to file
* Writing JUnit test case 'Heap_ESTest' to evosuite-tests
* Done!

* Computation finished
