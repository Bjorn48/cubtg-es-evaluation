/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:03:45 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI(0, 16, 16, 0);
      rOI0.uy();
      int int0 = new Integer(16);
      rOI0.Y();
      binaryImage0.union(binaryImage0);
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)0;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(6, 6, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(1, 2085);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(12, 12);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(12, binaryImage0.Y());
      assertEquals(12, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      int int0 = binaryImage0.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(12, binaryImage0.Y());
      assertEquals(12, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        binaryImage0.get((-308), 2128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage1);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(0, (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      binaryImage1.shift(7, 3);
      try { 
        Byte.valueOf("a(W{dKLSuX5XG", 8);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a(W{dKLSuX5XG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.shift(8, 8);
      binaryImage0.min();
      binaryImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.ux();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      Byte byte0 = Byte.valueOf((byte)8);
      // Undeclared exception!
      try { 
        binaryImage0.set((-3515), (-403), byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -403
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 16);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.real();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      BinaryImage binaryImage1 = binaryImage0.shift(0, (-1643));
      binaryImage0.copy();
      binaryImage0.copy();
      Byte byte0 = Byte.valueOf((byte)71);
      // Undeclared exception!
      try { 
        binaryImage1.set(0, 0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      ROI rOI0 = new ROI(0, 0, 0, 0);
      binaryImage0.copy(rOI0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.shift(39, 0);
      ROI rOI1 = new ROI();
      binaryImage1.copy(rOI1);
      binaryImage1.union(binaryImage2);
      binaryImage0.difference(binaryImage1);
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(255, 255);
      // Undeclared exception!
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      binaryImage1.count();
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)1);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.set(1025, (-4365), byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage1);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(interpolatedGrayImage0);
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      binaryImage1.difference(binaryImage2);
      // Undeclared exception!
      try { 
        binaryImage2.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage0.count();
      BinaryImage binaryImage3 = new BinaryImage(230, 1);
      binaryImage3.copy();
      binaryImage3.getJavaImage();
      BinaryImage binaryImage4 = binaryImage2.intersection(binaryImage3);
      binaryImage4.X();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      ROI rOI0 = new ROI(0, 0, 0, 0);
      rOI0.setROI((byte)0, 1385, (-1), 2);
      rOI0.uy();
      rOI0.X();
      rOI0.setROI((byte)23, 0, (-1811), 3533);
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI((-15), (-15), (-15), (-15));
      int int0 = new Integer(16);
      rOI0.X();
      int int1 = new Integer(16);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 16);
      binaryImage1.toString();
      binaryImage0.max();
      binaryImage0.shift(16, (-10));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ROI rOI0 = new ROI();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)117;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 1);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage0.count();
      binaryImage1.copy();
      byte byte0 = (byte)37;
      BinaryImage binaryImage3 = new BinaryImage(0, 0);
      binaryImage3.Y();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 16;
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(16, 16, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(14, 979);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      binaryImage0.shift(1, 0);
      binaryImage0.max();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-2);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(9, 2281, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn((-681)).when(realGrayImage0).X();
      doReturn((-681)).when(realGrayImage0).Y();
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(90, 90);
      RealGrayImage realGrayImage0 = complexImage0.real();
      BinaryImage binaryImage0 = new BinaryImage(90, 90);
      binaryImage0.shift(90, (-1643));
      realGrayImage0.copy();
      binaryImage0.copy();
      Byte byte0 = new Byte((byte)0);
      byte0.byteValue();
      binaryImage0.set(3628, 3628, byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = Byte.valueOf((byte)48);
      // Undeclared exception!
      try { 
        binaryImage0.set(4, 4, byte0, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)27;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-16777216), 8, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1, 1, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      BinaryImage binaryImage1 = binaryImage0.shift(16, 16);
      binaryImage1.toString();
      binaryImage0.toString();
      BinaryImage binaryImage2 = new BinaryImage(1333, 62);
      // Undeclared exception!
      binaryImage2.shift(1333, 16);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(256, binaryImage0.count());
      assertEquals(16, binaryImage1.X());
      assertEquals(256, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertNotNull(binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      
      BinaryImage binaryImage3 = binaryImage0.compliment();
      assertNotNull(binaryImage3);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(256, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(16, binaryImage3.X());
      assertEquals(256, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(29, 29);
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2891, 2891);
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 1);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage0.count();
      binaryImage1.copy();
      int int0 = (-1);
      byte byte0 = (byte)37;
      // Undeclared exception!
      try { 
        binaryImage2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3834, 3834);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.shift((-2573), (-2573));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[3] = (byte)0;
      ComplexImage complexImage0 = mock(ComplexImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(complexImage0).X();
      doReturn(0).when(complexImage0).Y();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      magnitudeImage0.X();
      magnitudeImage0.Y();
      BinaryImage binaryImage0 = new BinaryImage(magnitudeImage0);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      binaryImage2.difference(binaryImage1);
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.real();
      BinaryImage binaryImage1 = new BinaryImage(realGrayImage0);
      binaryImage0.shift((-1277), (-1643));
      BinaryImage binaryImage2 = new BinaryImage();
      binaryImage2.copy();
      Byte.valueOf((byte)71);
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.getJavaImage();
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(36, 36);
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = binaryImage0.max();
      assertNotNull(byte1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      int int0 = 0;
      ROI rOI0 = new ROI(0, 0, 0, 0);
      rOI0.setROI((byte)0, (byte) (-103), Integer.MAX_VALUE, 5);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(26, 26);
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      binaryImage0.copy(rOI0);
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      binaryImage0.compliment();
      binaryImage1.union(binaryImage0);
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[3] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.shift(39, 0);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage3 = binaryImage1.union(binaryImage2);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        binaryImage3.set(2597, (int) (byte)0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2597
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[][] intArray0 = new int[13][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-115));
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set((-1), (-1), (Byte) (byte) (-115));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      BinaryImage binaryImage1 = new BinaryImage(16, 16);
      binaryImage0.copy();
      binaryImage1.getJavaImage();
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(26, 26);
      binaryImage0.shift(23, 23);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1941, 26);
      ComplexImage complexImage0 = mock(ComplexImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(complexImage0).X();
      doReturn(0).when(complexImage0).Y();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      magnitudeImage0.X();
      ROI rOI0 = new ROI(1941, 255, 1941, 17);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 1);
      // Undeclared exception!
      try { 
        binaryImage1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(14, 3544);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(48, 14, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.max();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.difference(binaryImage1);
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.getJavaImage();
      binaryImage0.compliment();
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage();
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage0);
      binaryImage3.getData();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      BinaryImage binaryImage1 = new BinaryImage(16, 16);
      binaryImage0.copy();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage2.shift((-474), 0);
      ROI rOI0 = new ROI();
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      int int0 = 234;
      int int1 = 0;
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      ROI rOI0 = new ROI(0, 0, 0, 0);
      binaryImage0.copy(rOI0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.shift(39, 0);
      ROI rOI1 = new ROI();
      binaryImage1.copy(rOI1);
      BinaryImage binaryImage3 = binaryImage1.union(binaryImage2);
      // Undeclared exception!
      try { 
        binaryImage3.set(1430, 39, (Byte) (byte)0, rOI1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1417, 16);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1417, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1417, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(1417, binaryImage2.X());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      // Undeclared exception!
      binaryImage0.difference(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(16, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertNotNull(binaryImage2);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(256, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage2.X());
      assertEquals(16, binaryImage2.Y());
      assertEquals(256, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertNotNull(binaryImage3);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Image image0 = binaryImage3.copy(rOI0);
      assertNotNull(image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(26, 26);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(26, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(26, binaryImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotNull(image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(26, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(26, binaryImage0.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertNotSame(binaryImage0, image0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      assertNotNull(binaryImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, (-1643));
      assertNotNull(binaryImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      
      Image image1 = binaryImage0.copy();
      assertNotNull(image1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, image1.Y());
      assertEquals(0, image1.X());
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(image1, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      
      Byte byte0 = Byte.valueOf((byte)71);
      assertNotNull(byte0);
      assertEquals((byte)71, (byte)byte0);
      
      BinaryImage binaryImage2 = binaryImage0.shift(2861, (-1643));
      assertNotNull(binaryImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image1);
      assertSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image1));
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image1);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)image0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotSame(binaryImage0, image0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((-1285), 2131);
      assertNotNull(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage2);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      int int0 = binaryImage2.count();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage1.shift(39, 39);
      assertNotNull(binaryImage3);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int6);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int7);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      
      int int8 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int8);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 90;
      ComplexImage complexImage0 = new ComplexImage(90, 90);
      assertNotNull(complexImage0);
      assertEquals(90, complexImage0.Y());
      assertEquals(90, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(90, complexImage0.Y());
      assertEquals(90, complexImage0.X());
      assertEquals(90, realGrayImage0.X());
      assertEquals(90, realGrayImage0.Y());
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(26, 26);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(26, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(26, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift(26, (-1558));
      assertNotNull(binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(26, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(26, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(26, binaryImage1.Y());
      assertEquals(26, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(16, 16);
      assertNotNull(binaryImage1);
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, image0.X());
      assertEquals(16, image0.Y());
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage2);
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage2.shift((-474), 0);
      assertNotNull(binaryImage3);
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      BinaryImage binaryImage4 = binaryImage3.shift(0, 0);
      assertNotNull(binaryImage4);
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(16, binaryImage4.Y());
      assertEquals(16, binaryImage4.X());
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, image0);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)image0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      BinaryImage binaryImage5 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage5);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(16, binaryImage5.X());
      assertEquals(16, binaryImage5.Y());
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, image0);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }
}
