[MASTER] 09:57:56.115 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMax>> : Invalid generic instance
[MASTER] 09:57:57.015 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureSingleWL>> : Invalid generic instance
[MASTER] 09:58:16.065 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 09:58:16.065 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 09:58:16.065 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 09:58:30.426 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:58:34.523 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:58:42.733 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:58:56.358 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:58:56.358 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.IVec<T> : Type points to itself
[MASTER] 09:59:50.191 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:59:54.597 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 10:01:56.373 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 10:01:58.473 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 10:02:23.141 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 10:02:23.309 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest_scaffolding.java]]
[MASTER] 10:02:23.310 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:02:23.310 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:02:23.332 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary>: 227
[MASTER] 10:02:23.332 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 10:02:23.332 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 10:02:23.333 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 10:02:23.333 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 10:02:23.343 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:02:23 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.lang.reflect.Array;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import org.sat4j.ExitCode;
16: import org.sat4j.MUSLauncher;
17: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
18: import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
19: import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
20: import org.sat4j.minisat.core.SearchParams;
21: import org.sat4j.minisat.core.Solver;
22: import org.sat4j.minisat.learning.FixedLengthLearning;
23: import org.sat4j.minisat.learning.NoLearningButHeuristics;
24: import org.sat4j.minisat.orders.SubsetVarOrder;
25: import org.sat4j.minisat.orders.TabuListDecorator;
26: import org.sat4j.minisat.restarts.LubyRestarts;
27: import org.sat4j.specs.IVecInt;
28: import org.sat4j.tools.ManyCore;
29: 
30: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
31: public class Solver_119_tmp__ESTest extends Solver_119_tmp__ESTest_scaffolding {
32: 
33:   @Test(timeout = 4000)
34:   public void test0()  throws Throwable  {
35:       FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(6);
36:       assertNotNull(fixedLengthLearning0);
37:       assertEquals(6, fixedLengthLearning0.getMaxLength());
38:       
39:       MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
40:       assertNotNull(mixedDataStructureDanielHT0);
41:       
42:       NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
43:       assertNotNull(noLearningButHeuristics0);
44:       
45:       CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
46:       assertNotNull(cardinalityDataStructureYanMax0);
47:       
48:       SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, (-1));
49:       assertNotNull(searchParams0);
50:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
51:       assertEquals((-1), searchParams0.getInitConflictBound());
52:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
53:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
54:       
55:       double double0 = searchParams0.getVarDecay();
56:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
57:       assertEquals((-1), searchParams0.getInitConflictBound());
58:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
59:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
60:       assertEquals(0.0, double0, 0.01);
61:       
62:       double double1 = searchParams0.getClaDecay();
63:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
64:       assertEquals((-1), searchParams0.getInitConflictBound());
65:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
66:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
67:       assertEquals(0.0, double1, 0.01);
68:       assertEquals(double1, double0, 0.01);
69:       
70:       int[] intArray0 = new int[2];
71:       intArray0[0] = 6;
72:       intArray0[1] = 6;
73:       SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
74:       assertNotNull(subsetVarOrder0);
75:       assertArrayEquals(new int[] {6, 6}, intArray0);
76:       assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
77:       assertEquals(2, intArray0.length);
78:       
79:       TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
80:       assertNotNull(tabuListDecorator0);
81:       assertArrayEquals(new int[] {6, 6}, intArray0);
82:       assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
83:       assertEquals(2, intArray0.length);
84:       
85:       LubyRestarts lubyRestarts0 = new LubyRestarts();
86:       assertNotNull(lubyRestarts0);
87:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
88:       assertEquals(1, lubyRestarts0.luby());
89:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
90:       assertTrue(lubyRestarts0.shouldRestart());
91:       assertEquals(32, lubyRestarts0.getFactor());
92:       
93:       Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0);
94:       assertNotNull(solver0);
95:       assertArrayEquals(new int[] {6, 6}, intArray0);
96:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
97:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
98:       assertEquals((-1), searchParams0.getInitConflictBound());
99:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
100:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
101:       assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
102:       assertEquals(1, lubyRestarts0.luby());
103:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
104:       assertTrue(lubyRestarts0.shouldRestart());
105:       assertEquals(32, lubyRestarts0.getFactor());
106:       assertFalse(solver0.isDBSimplificationAllowed());
107:       assertEquals(0, solver0.getPropagationLevel());
108:       assertEquals(0, solver0.currentDecisionLevel());
109:       assertFalse(solver0.isVerbose());
110:       assertEquals(2, solver0.newVar());
111:       assertEquals(0, solver0.decisionLevel());
112:       assertEquals("c ", solver0.getLogPrefix());
113:       assertEquals(2147483, solver0.getTimeout());
114:       assertFalse(solver0.isSolverKeptHot());
115:       assertEquals(2, solver0.realNumberOfVariables());
116:       assertEquals(2, solver0.nVars());
117:       assertEquals(0, solver0.nConstraints());
118:       assertEquals(2, intArray0.length);
119:       
120:       SearchParams searchParams1 = solver0.getSearchParams();
121:       assertNotNull(searchParams1);
122:       assertArrayEquals(new int[] {6, 6}, intArray0);
123:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
124:       assertSame(searchParams0, searchParams1);
125:       assertSame(searchParams1, searchParams0);
126:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
127:       assertEquals((-1), searchParams0.getInitConflictBound());
128:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
129:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
130:       assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
131:       assertEquals(1, lubyRestarts0.luby());
132:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
133:       assertTrue(lubyRestarts0.shouldRestart());
134:       assertEquals(32, lubyRestarts0.getFactor());
135:       assertEquals(4, solver0.nVars());
136:       assertFalse(solver0.isDBSimplificationAllowed());
137:       assertEquals(0, solver0.getPropagationLevel());
138:       assertEquals(0, solver0.currentDecisionLevel());
139:       assertFalse(solver0.isVerbose());
140:       assertEquals(0, solver0.decisionLevel());
141:       assertEquals("c ", solver0.getLogPrefix());
142:       assertEquals(2147483, solver0.getTimeout());
143:       assertEquals(4, solver0.realNumberOfVariables());
144:       assertFalse(solver0.isSolverKeptHot());
145:       assertEquals(4, solver0.newVar());
146:       assertEquals(0, solver0.nConstraints());
147:       assertEquals((-1), searchParams1.getInitConflictBound());
148:       assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
149:       assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
150:       assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
151:       assertEquals(2, intArray0.length);
152:       
153:       MUSLauncher mUSLauncher0 = new MUSLauncher();
154:       assertNotNull(mUSLauncher0);
155:       assertFalse(mUSLauncher0.isSilent());
156:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
157:       assertEquals(0L, mUSLauncher0.getBeginTime());
158:       
159:       mUSLauncher0.log("d");
160:       assertFalse(mUSLauncher0.isSilent());
161:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
162:       assertEquals(0L, mUSLauncher0.getBeginTime());
163:       
164:       mUSLauncher0.log("3(X");
165:       assertFalse(mUSLauncher0.isSilent());
166:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
167:       assertEquals(0L, mUSLauncher0.getBeginTime());
168:       
169:       mUSLauncher0.log("org.sat4j.minisat.constraints.cnf.LearntHTClause");
170:       assertFalse(mUSLauncher0.isSilent());
171:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
172:       assertEquals(0L, mUSLauncher0.getBeginTime());
173:       
174:       mUSLauncher0.log("3(X");
175:       assertFalse(mUSLauncher0.isSilent());
176:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
177:       assertEquals(0L, mUSLauncher0.getBeginTime());
178:       
179:       Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams1, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
180:       assertNotNull(solver1);
181:       assertArrayEquals(new int[] {6, 6}, intArray0);
182:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
183:       assertEquals(6, fixedLengthLearning0.getMaxLength());
184:       assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
185:       assertEquals((-1), searchParams0.getInitConflictBound());
186:       assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
187:       assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
188:       assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
189:       assertEquals(1, lubyRestarts0.luby());
190:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
191:       assertTrue(lubyRestarts0.shouldRestart());
192:       assertEquals(32, lubyRestarts0.getFactor());
193:       assertFalse(solver0.isDBSimplificationAllowed());
194:       assertEquals(6, solver0.realNumberOfVariables());
195:       assertEquals(6, solver0.nVars());
196:       assertEquals(0, solver0.getPropagationLevel());
197:       assertEquals(0, solver0.currentDecisionLevel());
198:       assertFalse(solver0.isVerbose());
199:       assertEquals(0, solver0.decisionLevel());
200:       assertEquals("c ", solver0.getLogPrefix());
201:       assertEquals(2147483, solver0.getTimeout());
202:       assertEquals(6, solver0.newVar());
203:       assertFalse(solver0.isSolverKeptHot());
204:       assertEquals(0, solver0.nConstraints());
205:       assertEquals((-1), searchParams1.getInitConflictBound());
206:       assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
207:       assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
208:       assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
209:       assertFalse(mUSLauncher0.isSilent());
210:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
211:       assertEquals(0L, mUSLauncher0.getBeginTime());
212:       assertEquals(2, solver1.realNumberOfVariables());
213:       assertEquals(0, solver1.decisionLevel());
214:       assertEquals(0, solver1.currentDecisionLevel());
215:       assertEquals("c ", solver1.getLogPrefix());
216:       assertEquals(0, solver1.getPropagationLevel());
217:       assertFalse(solver1.isVerbose());
218:       assertFalse(solver1.isDBSimplificationAllowed());
219:       assertEquals(2, solver1.nVars());
220:       assertEquals(2147483, solver1.getTimeout());
221:       assertEquals(0, solver1.nConstraints());
222:       assertFalse(solver1.isSolverKeptHot());
223:       assertEquals(2, solver1.newVar());
224:       assertEquals(2, intArray0.length);
225:       
226:       Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3);
227:       solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0;
228:   }
229: }
RegularFileObject[/tmp/EvoSuite_119_1550566943139/org/sat4j/minisat/core/Solver_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:02:23 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Solver_119_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.minisat.core.ConflictTimerAdapter",
82:       "org.sat4j.tools.ManyCore",
83:       "org.sat4j.specs.UnitPropagationListener",
84:       "org.sat4j.minisat.core.SizeComparator",
85:       "org.sat4j.tools.FullClauseSelectorSolver",
86:       "org.sat4j.reader.LecteurDimacs",
87:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
88:       "org.sat4j.tools.SolverDecorator",
89:       "org.sat4j.specs.Propagatable",
90:       "org.sat4j.minisat.core.Counter",
91:       "org.sat4j.minisat.core.Undoable",
92:       "org.sat4j.minisat.learning.FixedLengthLearning",
93:       "org.sat4j.ILauncherMode",
94:       "org.sat4j.minisat.constraints.cnf.Clauses",
95:       "org.sat4j.minisat.core.Pair",
96:       "org.sat4j.core.EmptyVecInt",
97:       "org.sat4j.ExitCode",
98:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
99:       "org.sat4j.specs.IVec",
100:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
101:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
102:       "org.sat4j.minisat.constraints.cnf.UnitClause",
103:       "org.sat4j.specs.Lbool",
104:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
105:       "org.sat4j.AbstractLauncher$2",
106:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
107:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
108:       "org.sat4j.AbstractLauncher$1",
109:       "org.sat4j.specs.IOptimizationProblem",
110:       "org.sat4j.specs.SearchListener",
111:       "org.sat4j.minisat.core.SimplificationType",
112:       "org.sat4j.minisat.learning.MiniSATLearning",
113:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
114:       "org.sat4j.minisat.core.SearchParams",
115:       "org.sat4j.tools.AbstractMinimalModel",
116:       "org.sat4j.minisat.core.Heap",
117:       "org.sat4j.specs.ILogAble$1",
118:       "org.sat4j.specs.TimeoutException",
119:       "org.sat4j.specs.Constr",
120:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
121:       "org.sat4j.minisat.core.ConflictTimerContainer",
122:       "org.sat4j.specs.ISolverService",
123:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
124:       "org.sat4j.minisat.core.LearningStrategy",
125:       "org.sat4j.minisat.constraints.cnf.WLClause",
126:       "org.sat4j.specs.IGroupSolver",
127:       "org.sat4j.opt.MaxSatDecorator",
128:       "org.sat4j.DecisionMode",
129:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
130:       "org.sat4j.specs.IteratorInt",
131:       "org.sat4j.specs.ISolver",
132:       "org.sat4j.minisat.orders.RandomWalkDecorator",
133:       "org.sat4j.specs.UnitClauseProvider$1",
134:       "org.sat4j.minisat.constraints.cnf.HTClause",
135:       "org.sat4j.minisat.core.CircularBuffer",
136:       "org.sat4j.minisat.learning.LimitedLearning",
137:       "org.sat4j.minisat.restarts.LubyRestarts",
138:       "org.sat4j.minisat.core.VoidTracing",
139:       "org.sat4j.minisat.core.ActivityListener",
140:       "org.sat4j.minisat.restarts.Glucose21Restarts",
141:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
142:       "org.sat4j.minisat.core.GlucoseLCDS",
143:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
144:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
145:       "org.sat4j.minisat.core.ILits",
146:       "org.sat4j.BasicLauncher",
147:       "org.sat4j.minisat.constraints.card.AtLeast",
148:       "org.sat4j.specs.ILogAble",
149:       "org.sat4j.specs.ContradictionException",
150:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
151:       "org.sat4j.reader.GroupedCNFReader",
152:       "org.sat4j.minisat.constraints.card.MinWatchCard",
153:       "org.sat4j.core.LiteralsUtils",
154:       "org.sat4j.minisat.learning.PercentLengthLearning",
155:       "org.sat4j.specs.IConstr",
156:       "org.sat4j.specs.IVecInt",
157:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
158:       "org.sat4j.core.ConstrGroup",
159:       "org.sat4j.tools.SolutionFoundListener",
160:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
161:       "org.sat4j.minisat.restarts.EMARestarts",
162:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
163:       "org.sat4j.OptimizationMode",
164:       "org.sat4j.minisat.core.Learner",
165:       "org.sat4j.tools.DimacsStringSolver",
166:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
167:       "org.sat4j.minisat.core.ActivityComparator",
168:       "org.sat4j.specs.MandatoryLiteralListener",
169:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
170:       "org.sat4j.specs.IProblem",
171:       "org.sat4j.minisat.restarts.MiniSATRestarts",
172:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
173:       "org.sat4j.core.VecInt",
174:       "org.sat4j.minisat.core.Solver",
175:       "org.sat4j.tools.xplain.HighLevelXplain",
176:       "org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy",
177:       "org.sat4j.minisat.constraints.cnf.Lits",
178:       "org.sat4j.minisat.core.Solver$2",
179:       "org.sat4j.minisat.core.Solver$1",
180:       "org.sat4j.specs.UnitClauseProvider",
181:       "org.sat4j.minisat.learning.AbstractLearning",
182:       "org.sat4j.AbstractLauncher",
183:       "org.sat4j.minisat.core.Solver$4",
184:       "org.sat4j.minisat.core.Solver$3",
185:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
186:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
187:       "org.sat4j.core.VecInt$1",
188:       "org.sat4j.core.ASolverFactory",
189:       "org.sat4j.core.Vec$1",
190:       "org.sat4j.reader.DimacsReader",
191:       "org.sat4j.minisat.core.DataStructureFactory",
192:       "org.sat4j.core.Vec",
193:       "org.sat4j.minisat.core.Solver$9",
194:       "org.sat4j.minisat.core.Glucose2LCDS",
195:       "org.sat4j.minisat.core.Solver$6",
196:       "org.sat4j.minisat.core.SolverStats",
197:       "org.sat4j.minisat.core.Solver$8",
198:       "org.sat4j.minisat.core.Solver$7",
199:       "org.sat4j.minisat.core.Solver$10",
200:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
201:       "org.sat4j.minisat.core.ConstrActivityListener",
202:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
203:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
204:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
205:       "org.sat4j.minisat.orders.SubsetVarOrder",
206:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
207:       "org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy",
208:       "org.sat4j.minisat.restarts.ArminRestarts",
209:       "org.sat4j.tools.GroupClauseSelectorSolver",
210:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
211:       "org.sat4j.specs.SearchListenerAdapter",
212:       "org.sat4j.tools.xplain.Xplain",
213:       "org.sat4j.reader.ParseFormatException",
214:       "org.sat4j.tools.AbstractClauseSelectorSolver",
215:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
216:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
217:       "org.sat4j.tools.OutcomeListener",
218:       "org.sat4j.minisat.core.ActivityLCDS",
219:       "org.sat4j.tools.AbstractOutputSolver",
220:       "org.sat4j.minisat.learning.ActiveLearning",
221:       "org.sat4j.MUSLauncher",
222:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
223:       "org.sat4j.minisat.orders.VarOrderHeap",
224:       "org.sat4j.minisat.constraints.xor.Xor",
225:       "org.sat4j.minisat.orders.NaturalStaticOrder",
226:       "org.sat4j.minisat.core.ISimplifier",
227:       "org.sat4j.reader.InstanceReader",
228:       "org.sat4j.minisat.core.ConflictTimer",
229:       "org.sat4j.minisat.core.VarActivityListener",
230:       "org.sat4j.specs.Constr$1",
231:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
232:       "org.sat4j.specs.VarMapper",
233:       "org.sat4j.specs.RandomAccessModel",
234:       "org.sat4j.minisat.SolverFactory",
235:       "org.sat4j.minisat.core.LBDConflictTimer",
236:       "org.sat4j.tools.DimacsOutputSolver",
237:       "org.sat4j.minisat.orders.TabuListDecorator",
238:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
239:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
240:       "org.sat4j.minisat.orders.PureOrder",
241:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
242:       "org.sat4j.minisat.core.SizeLCDS",
243:       "org.sat4j.minisat.core.RestartStrategy",
244:       "org.sat4j.minisat.core.AgeLCDS",
245:       "org.sat4j.tools.xplain.Explainer",
246:       "org.sat4j.reader.Reader",
247:       "org.sat4j.minisat.core.IOrder",
248:       "org.sat4j.minisat.orders.VariableComparator",
249:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
250:       "org.sat4j.minisat.core.ICDCL",
251:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
252:       "org.sat4j.minisat.restarts.NoRestarts",
253:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
254:       "org.sat4j.core.EmptyVecInt$1",
255:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
256:     );
257:   } 
258: 
259:   private static void resetClasses() {
260:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
261: 
262:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
263:       "org.sat4j.minisat.core.Solver$1",
264:       "org.sat4j.minisat.core.Solver",
265:       "org.sat4j.minisat.core.Solver$2",
266:       "org.sat4j.minisat.core.Solver$3",
267:       "org.sat4j.minisat.core.Solver$4",
268:       "org.sat4j.minisat.core.Solver$5",
269:       "org.sat4j.minisat.core.Solver$9",
270:       "org.sat4j.minisat.core.Solver$6",
271:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
272:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
273:       "org.sat4j.minisat.core.ConflictTimerAdapter",
274:       "org.sat4j.minisat.core.Solver$7",
275:       "org.sat4j.minisat.core.Solver$8",
276:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
277:       "org.sat4j.minisat.core.Solver$10",
278:       "org.sat4j.minisat.core.Solver$11",
279:       "org.sat4j.specs.ILogAble$1",
280:       "org.sat4j.specs.ILogAble",
281:       "org.sat4j.specs.UnitClauseProvider$1",
282:       "org.sat4j.specs.UnitClauseProvider",
283:       "org.sat4j.core.LiteralsUtils",
284:       "org.sat4j.specs.Lbool",
285:       "org.sat4j.core.EmptyVecInt",
286:       "org.sat4j.core.VecInt",
287:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
288:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
289:       "org.sat4j.core.Vec",
290:       "org.sat4j.minisat.constraints.cnf.Lits",
291:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
292:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
293:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
294:       "org.sat4j.minisat.restarts.LubyRestarts",
295:       "org.sat4j.minisat.core.ActivityComparator",
296:       "org.sat4j.minisat.core.VoidTracing",
297:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
298:       "org.sat4j.minisat.core.ActivityLCDS",
299:       "org.sat4j.minisat.core.LBDConflictTimer",
300:       "org.sat4j.minisat.core.GlucoseLCDS",
301:       "org.sat4j.minisat.core.Glucose2LCDS",
302:       "org.sat4j.minisat.core.AgeLCDS",
303:       "org.sat4j.minisat.core.SizeComparator",
304:       "org.sat4j.minisat.core.SizeLCDS",
305:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
306:       "org.sat4j.minisat.constraints.cnf.WLClause",
307:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
308:       "org.sat4j.minisat.orders.RandomWalkDecorator",
309:       "org.sat4j.minisat.restarts.ArminRestarts",
310:       "org.sat4j.minisat.learning.LimitedLearning",
311:       "org.sat4j.minisat.learning.PercentLengthLearning",
312:       "org.sat4j.minisat.learning.AbstractLearning",
313:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
314:       "org.sat4j.minisat.learning.MiniSATLearning",
315:       "org.sat4j.minisat.orders.PureOrder",
316:       "org.sat4j.minisat.learning.ActiveLearning",
317:       "org.sat4j.minisat.restarts.EMARestarts",
318:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
319:       "org.sat4j.minisat.learning.FixedLengthLearning",
320:       "org.sat4j.minisat.orders.SubsetVarOrder",
321:       "org.sat4j.minisat.orders.NaturalStaticOrder",
322:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
323:       "org.sat4j.minisat.restarts.MiniSATRestarts",
324:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
325:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
326:       "org.sat4j.minisat.constraints.card.AtLeast",
327:       "org.sat4j.minisat.restarts.Glucose21Restarts",
328:       "org.sat4j.minisat.core.CircularBuffer",
329:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
330:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
331:       "org.sat4j.minisat.restarts.NoRestarts",
332:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
333:       "org.sat4j.AbstractLauncher",
334:       "org.sat4j.BasicLauncher",
335:       "org.sat4j.AbstractLauncher$1",
336:       "org.sat4j.DecisionMode",
337:       "org.sat4j.ExitCode",
338:       "org.sat4j.OptimizationMode",
339:       "org.sat4j.ILauncherMode",
340:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
341:       "org.sat4j.tools.AbstractMinimalModel",
342:       "org.sat4j.specs.ContradictionException",
343:       "org.sat4j.minisat.orders.TabuListDecorator",
344:       "org.sat4j.MUSLauncher",
345:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
346:       "org.sat4j.core.Vec$1",
347:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
348:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
349:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
350:       "org.sat4j.tools.StatisticsSolver",
351:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
352:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
353:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
354:       "org.sat4j.minisat.core.Heap",
355:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
356:       "org.sat4j.tools.DimacsStringSolver",
357:       "org.sat4j.minisat.constraints.cnf.UnitClause",
358:       "org.sat4j.core.EmptyVecInt$1",
359:       "org.sat4j.core.VecInt$1",
360:       "org.sat4j.minisat.core.ConflictTimerContainer",
361:       "org.sat4j.minisat.constraints.cnf.HTClause",
362:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
363:       "org.sat4j.minisat.constraints.cnf.Clauses",
364:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
365:       "org.sat4j.tools.AbstractClauseSelectorSolver",
366:       "org.sat4j.tools.GroupClauseSelectorSolver",
367:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
368:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
369:       "org.sat4j.minisat.core.Counter",
370:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
371:       "org.sat4j.tools.CheckMUSSolutionListener",
372:       "org.sat4j.tools.ModelIterator",
373:       "org.sat4j.tools.ModelIteratorToSATAdapter",
374:       "org.sat4j.tools.Minimal4InclusionModel",
375:       "org.sat4j.tools.SolutionFoundListener$1",
376:       "org.sat4j.tools.SolutionFoundListener",
377:       "org.sat4j.core.ConstrGroup",
378:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
379:       "org.sat4j.minisat.orders.VarOrderHeap",
380:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
381:       "org.sat4j.minisat.core.SearchParams",
382:       "org.sat4j.minisat.core.SolverStats",
383:       "org.sat4j.specs.SearchListenerAdapter",
384:       "org.sat4j.minisat.core.Pair",
385:       "org.sat4j.specs.Constr$1",
386:       "org.sat4j.specs.Constr",
387:       "org.sat4j.tools.AbstractOutputSolver",
388:       "org.sat4j.specs.TimeoutException",
389:       "org.sat4j.core.ASolverFactory",
390:       "org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy",
391:       "org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy",
392:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
393:       "org.sat4j.tools.SolverDecorator",
394:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
395:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
396:       "org.sat4j.opt.MaxSatDecorator",
397:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
398:       "org.sat4j.minisat.constraints.card.MinWatchCard"
399:     );
400:   }
401: }

[MASTER] 10:02:23.376 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(6);
assertNotNull(fixedLengthLearning0);
assertEquals(6, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, (-1));
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, double1, 0.01);
assertEquals(double1, double0, 0.01);

int[] intArray0 = new int[2];
intArray0[0] = 6;
intArray0[1] = 6;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {6, 6}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {6, 6}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertArrayEquals(new int[] {6, 6}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.realNumberOfVariables());
assertEquals(2, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotNull(searchParams1);
assertArrayEquals(new int[] {6, 6}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(4, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals((-1), searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2, intArray0.length);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("d");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("3(X");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("org.sat4j.minisat.constraints.cnf.LearntHTClause");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("3(X");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams1, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
assertNotNull(solver1);
assertArrayEquals(new int[] {6, 6}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(6, fixedLengthLearning0.getMaxLength());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.realNumberOfVariables());
assertEquals(6, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals((-1), searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(2, intArray0.length);

Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 3);
solverArray0[0] = (Solver<MixedDataStructureDanielWLConciseBinary>) solverArray0;

[MASTER] 10:02:55.606 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
[MASTER] 10:02:58.464 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550566639414. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
