/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:01:53 GMT 2019
 */

package de.progra.charting.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.event.ChartDataModelListener;
import de.progra.charting.model.ChartDataModelConstraints;
import de.progra.charting.model.DefaultChartDataModelConstraints;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.ObjectChartDataModel;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChartDataModel_ESTest extends AbstractChartDataModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      String[] stringArray0 = new String[9];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      editableChartDataModel0.data = arrayList0;
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, stringArray0, stringArray0);
      boolean boolean0 = editableChartDataModel0.equals(objectChartDataModel0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      assertFalse(editableChartDataModel0.isManualScale());
      
      editableChartDataModel0.setManualScale(true);
      boolean boolean0 = editableChartDataModel0.isAutoScale();
      assertTrue(editableChartDataModel0.isManualScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      ChartDataModelConstraints chartDataModelConstraints0 = editableChartDataModel0.getChartDataModelConstraints(46);
      ((DefaultChartDataModelConstraints) chartDataModelConstraints0).model.setAutoScale(true);
      // Undeclared exception!
      try { 
        chartDataModelConstraints0.getMinimumColumnValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.isColumnNumeric();
      assertFalse(editableChartDataModel0.isAutoScale());
      assertFalse(editableChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      BigInteger bigInteger0 = BigInteger.TEN;
      objectChartDataModel0.setMinimumValue(bigInteger0);
      Number number0 = objectChartDataModel0.getManualMinimumValue();
      assertNotNull(number0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMinimumColumnValue(23.0);
      double double0 = editableChartDataModel0.getManualMinimumColumnValue();
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMinimumColumnValue((-5.0));
      double double0 = editableChartDataModel0.getManualMinimumColumnValue();
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMaximumColumnValue((short)1);
      double double0 = editableChartDataModel0.getManualMaximumColumnValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray0);
      objectChartDataModel0.getDataSetName(0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[1];
      String[] stringArray0 = new String[23];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      editableChartDataModel0.getAxisBinding(2);
      assertFalse(editableChartDataModel0.isManualScale());
      assertFalse(editableChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      // Undeclared exception!
      try { 
        editableChartDataModel0.getDataSetName(2522);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2522, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      // Undeclared exception!
      try { 
        objectChartDataModel0.getDataSetName(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("de.progra.charting.model.ObjectChartDataModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      // Undeclared exception!
      try { 
        editableChartDataModel0.getAxisBinding(1352);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1352, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      // Undeclared exception!
      try { 
        objectChartDataModel0.getAxisBinding(1921);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1921
         //
         verifyException("de.progra.charting.model.ObjectChartDataModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.listener = null;
      // Undeclared exception!
      try { 
        editableChartDataModel0.fireChartDataModelChangedEvent(objectChartDataModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.AbstractChartDataModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      // Undeclared exception!
      try { 
        editableChartDataModel0.fireChartDataModelChangedEvent((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, stringArray0, stringArray0);
      ObjectChartDataModel objectChartDataModel1 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray0);
      boolean boolean0 = objectChartDataModel0.equals(objectChartDataModel1);
      assertFalse(objectChartDataModel1.isAutoScale());
      assertFalse(boolean0);
      assertFalse(objectChartDataModel1.isManualScale());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, stringArray0, stringArray0);
      boolean boolean0 = objectChartDataModel0.equals(objectChartDataModel0);
      assertFalse(objectChartDataModel0.isManualScale());
      assertFalse(boolean0);
      assertFalse(objectChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C";
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      String[] stringArray1 = new String[9];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray1);
      boolean boolean0 = editableChartDataModel0.equals(objectChartDataModel0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(boolean0);
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      boolean boolean0 = editableChartDataModel0.equals(objectChartDataModel0);
      assertFalse(editableChartDataModel0.isAutoScale());
      assertFalse(editableChartDataModel0.isManualScale());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[2];
      String[] stringArray0 = new String[9];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      boolean boolean0 = editableChartDataModel0.equals(objectChartDataModel0);
      assertFalse(boolean0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      boolean boolean0 = editableChartDataModel0.equals((Object) null);
      assertFalse(editableChartDataModel0.isManualScale());
      assertFalse(boolean0);
      assertFalse(editableChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      ChartDataModelListener chartDataModelListener0 = mock(ChartDataModelListener.class, new ViolatedAssumptionAnswer());
      editableChartDataModel0.addChartDataModelListener(chartDataModelListener0);
      editableChartDataModel0.fireChartDataModelChangedEvent(objectChartDataModel0);
      assertFalse(editableChartDataModel0.isManualScale());
      assertFalse(editableChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray0);
      Object object0 = new Object();
      objectChartDataModel0.fireChartDataModelChangedEvent(object0);
      assertFalse(objectChartDataModel0.isManualScale());
      assertFalse(objectChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      double double0 = editableChartDataModel0.getManualMinimumColumnValue();
      assertEquals(0.0, double0, 0.01);
      assertFalse(editableChartDataModel0.isManualScale());
      assertFalse(editableChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      BigInteger bigInteger0 = BigInteger.TEN;
      objectChartDataModel0.setMaximumValue(bigInteger0);
      Number number0 = objectChartDataModel0.getManualMaximumValue();
      assertFalse(objectChartDataModel0.isAutoScale());
      assertNotNull(number0);
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      boolean boolean0 = objectChartDataModel0.isColumnNumeric();
      assertFalse(boolean0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray0[0], stringArray0);
      boolean boolean0 = editableChartDataModel0.isManualScale();
      assertFalse(editableChartDataModel0.isAutoScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      objectChartDataModel0.getColumnClass();
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      Object object0 = new Object();
      objectChartDataModel0.setValueAt(0, 0, object0);
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      objectChartDataModel0.getManualMinimumValue();
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String[] stringArray0 = new String[9];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, stringArray0, stringArray0);
      objectChartDataModel0.setAxisBinding(1, (-1033));
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      double double0 = objectChartDataModel0.getManualMaximumColumnValue();
      assertEquals(0.0, double0, 0.01);
      assertFalse(objectChartDataModel0.isManualScale());
      assertFalse(objectChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      objectChartDataModel0.getManualMaximumValue();
      assertFalse(objectChartDataModel0.isAutoScale());
      assertFalse(objectChartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      String[] stringArray0 = new String[9];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      editableChartDataModel0.removeChartDataModelListener((ChartDataModelListener) null);
      assertFalse(editableChartDataModel0.isAutoScale());
      assertFalse(editableChartDataModel0.isManualScale());
  }
}
