/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:30:58 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptToSatAdapter_ESTest extends OptToSatAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      int[] intArray0 = optToSatAdapter0.modelWithInternalVariables();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(optToSatAdapter0);
      optToSatAdapter0.findModel(iVecInt0);
      int[] intArray0 = optToSatAdapter0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      solver0.isSatisfiable((IVecInt) vecInt0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      boolean boolean0 = optToSatAdapter0.model(429);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      boolean boolean1 = optToSatAdapter0.model(429);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      int[] intArray0 = optToSatAdapter0.findModel((IVecInt) vecInt0);
      int[] intArray1 = optToSatAdapter0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(optToSatAdapter0);
      optToSatAdapter0.findModel(iVecInt0);
      int[] intArray0 = optToSatAdapter0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, (EncodingStrategyAdapter) null);
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0, vecInt0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(minimal4InclusionModel0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator1, solutionFoundListener0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      solver0.addBlockingClause(vecInt0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      minOneDecorator0.addParity(vecInt0, true);
      boolean boolean0 = optToSatAdapter0.isSatisfiable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel();
      IVecInt iVecInt0 = optToSatAdapter0.createBlockingClauseForCurrentModel();
      optToSatAdapter0.findModel(iVecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.toString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1, 1, 0.0, 1);
      PureOrder pureOrder0 = new PureOrder((-2684));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(30);
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIteratorToSATAdapter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(2501);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(23, 23, 23, 23);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.isSatisfiable();
      // Undeclared exception!
      try { 
        optToSatAdapter0.model((-3568));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3569
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      try { 
        optToSatAdapter0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(30);
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIteratorToSATAdapter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      VecInt vecInt0 = new VecInt();
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 1);
      PureOrder pureOrder0 = new PureOrder(1);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0);
      VecInt vecInt0 = new VecInt(0, (-1199));
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, false);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      LexicoDecorator<GroupClauseSelectorSolver<MaxSatDecorator>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(606);
      vecInt0.shrinkTo((-730));
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(28, 28, 28, 28);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(28, 28);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      optToSatAdapter0.isSatisfiable();
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(429);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, iVecInt0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(subModelIterator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      fixedPeriodRestarts0.setPeriod(429);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isOptimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      GateTranslator gateTranslator0 = new GateTranslator(statisticsSolver0);
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>(gateTranslator0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      try { 
        optToSatAdapter0.findModel(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(639, 2365);
      // Undeclared exception!
      optToSatAdapter0.findModel((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      minOneDecorator0.setTimeoutMs((-1092L));
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel((IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(1);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      minOneDecorator0.isSatisfiable((IVecInt) vecInt0);
      // Undeclared exception!
      optToSatAdapter0.findModel();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1, 0.0, 0.0, 3267);
      PureOrder pureOrder0 = new PureOrder(5655);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      minOneDecorator0.setTimeoutMs((-1155L));
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      fixedPeriodRestarts0.setPeriod(429);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      optToSatAdapter0.isSatisfiable();
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(3217);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(3217, 0.0, 3217, 3217);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      solver0.setVerbose(true);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model((-3568));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      int[] intArray0 = optToSatAdapter0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      solver0.addBlockingClause(vecInt0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      minOneDecorator0.addParity(vecInt0, true);
      optToSatAdapter0.findModel();
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(3217);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(3217, 0.0, 3217, 3217);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      VecInt vecInt1 = new VecInt(1, 2058);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      boolean boolean0 = optToSatAdapter0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(optToSatAdapter0, false);
      OptToSatAdapter optToSatAdapter1 = new OptToSatAdapter(maxSatDecorator0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter1.findModel((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      int[] intArray0 = optToSatAdapter0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      try { 
        optToSatAdapter0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      String string0 = optToSatAdapter0.toString("The subset of clauses in the MUS not containing clause ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0, 0.0, 0, 0);
      PureOrder pureOrder0 = new PureOrder(429);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(429, 429);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, true);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      assertTrue(minOneDecorator0.isOptimal());
      assertEquals(429, solver0.getPropagationLevel());
  }
}
