/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 16:44:19 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.RoundStatGenerator;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoundStatGenerator_ESTest extends RoundStatGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      HashMap<Combatant, CombatantState> hashMap0 = new HashMap<Combatant, CombatantState>();
      CombatantState combatantState0 = new CombatantState((Area) null, 60, (Area) null, false);
      hashMap0.put((Combatant) null, combatantState0);
      // Undeclared exception!
      try { 
        roundStatGenerator0.addRoundState(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.RoundStatGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      Map<CombatantSide, LabeledData> map0 = roundStatGenerator0.getHealthAmount();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      Map<CombatantSide, LabeledData> map0 = roundStatGenerator0.getLivingCounts();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      HashMap<Combatant, CombatantState> hashMap0 = new HashMap<Combatant, CombatantState>();
      roundStatGenerator0.addRoundState(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }
}
