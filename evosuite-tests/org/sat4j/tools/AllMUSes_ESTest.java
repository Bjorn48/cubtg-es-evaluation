/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:56:09 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractClauseSelectorSolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((SolutionFoundListener) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(43);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      Collection<Integer> collection0 = fullClauseSelectorSolver0.getAddedVars();
      int[] intArray0 = new int[6];
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(collection0, collection0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractClauseSelectorSolver<GateTranslator> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<GateTranslator>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(43);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      Collection<Integer> collection0 = fullClauseSelectorSolver0.getAddedVars();
      int[] intArray0 = new int[6];
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(collection0, collection0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(43);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      Collection<Integer> collection0 = fullClauseSelectorSolver0.getAddedVars();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3751);
      intArray0[1] = 0;
      intArray0[2] = 43;
      intArray0[3] = 43;
      intArray0[4] = 0;
      intArray0[5] = 43;
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(collection0, collection0, (Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0).when(abstractClauseSelectorSolver0).nVars();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMSS(solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt(0, 0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = 0;
      intArray0[2] = Integer.MIN_VALUE;
      AbstractClauseSelectorSolver<GateTranslator> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<GateTranslator>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, (Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("i.o 8").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(Integer.MIN_VALUE).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      allMUSes0.computeAllMSS();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(statisticsSolver0, solutionFoundListener0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(true, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) null, (SolutionFoundListener) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      VecInt vecInt0 = new VecInt(346, (-3811));
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.valueOf((-245));
      linkedList0.add(integer0);
      int[] intArray0 = new int[8];
      AbstractClauseSelectorSolver<GateTranslator> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<GateTranslator>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, (Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn("i.o 8").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(Integer.MIN_VALUE).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn((-2891)).when(abstractClauseSelectorSolver0).nVars();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(statisticsSolver0).model();
      doReturn((int[]) null).when(statisticsSolver0).modelWithInternalVariables();
      doReturn(893, 3574, (-1518)).when(statisticsSolver0).nVars();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractClauseSelectorSolver<ModelIteratorToSATAdapter> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn((-2891)).when(abstractClauseSelectorSolver0).nVars();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(statisticsSolver0).nVars();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertEquals(0, list0.size());
      
      List<IVecInt> list1 = allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      ASolverFactory<ModelIterator> aSolverFactory1 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
