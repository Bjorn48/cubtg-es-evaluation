/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:14:21 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.ConstrGroup;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstrGroup_ESTest extends ConstrGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      constrGroup0.add(constrGroup0);
      constrGroup0.add(constrGroup0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(697, 697);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(statisticsSolver0, vecInt0);
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>>(clausalCardinalitiesDecorator0, binary0);
      // Undeclared exception!
      try { 
        constrGroup0.removeFrom(clausalCardinalitiesDecorator1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(813.2225000517, 0);
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, (-475));
      constrGroup0.add(minWatchCard0);
      int int0 = constrGroup0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      constrGroup0.add((IConstr) null);
      // Undeclared exception!
      try { 
        constrGroup0.removeFrom((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.getConstr((-3805));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3805
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      boolean boolean0 = constrGroup0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      constrGroup0.removeFrom((ISolver) null);
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.add((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      constrGroup0.add((IConstr) null);
      // Undeclared exception!
      try { 
        constrGroup0.learnt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      int int0 = constrGroup0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      constrGroup0.clear();
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.get((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      boolean boolean0 = constrGroup0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      String string0 = constrGroup0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      IConstr iConstr0 = constrGroup0.getConstr(0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.toString((VarMapper) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      double double0 = constrGroup0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }
}
