/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:27:19 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Product product0 = new Product();
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-488);
      intArray0[2] = 1;
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0).when(singleSolutionDetector0).findModel();
      doReturn(intArray0).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(7, 1, 1, 7, 0).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      groupClauseSelectorSolver0.findModel();
      groupClauseSelectorSolver0.modelWithInternalVariables();
      groupClauseSelectorSolver0.findModel();
      Product product1 = new Product();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      groupClauseSelectorSolver0.addAtMost(iVecInt0, 2384);
      product0.addExactlyOne(abstractMinimalModel0, iVecInt0);
      product1.addAtMostOne(groupClauseSelectorSolver0, iVecInt0);
      product1.addExactly(abstractMinimalModel0, iVecInt0, 2384);
      product1.addAtMostNonOpt(groupClauseSelectorSolver0, iVecInt0, 2384);
      int[] intArray1 = new int[6];
      intArray1[0] = 7;
      intArray1[1] = 1;
      intArray1[2] = 7;
      intArray1[3] = 2280;
      intArray1[4] = 7;
      groupClauseSelectorSolver0.nVars();
      intArray1[5] = 3933;
      SingleSolutionDetector singleSolutionDetector1 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      product0.addAtMostNonOpt((ISolver) null, iVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        product0.addExactlyOne(iSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[8];
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) null, (Object) null).when(singleSolutionDetector0).findModel();
      doReturn((int[]) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      groupClauseSelectorSolver0.findModel();
      groupClauseSelectorSolver0.modelWithInternalVariables();
      groupClauseSelectorSolver0.findModel();
      Product product1 = new Product();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      groupClauseSelectorSolver0.addAtMost(iVecInt0, 2384);
      product0.addExactlyOne(abstractMinimalModel0, iVecInt0);
      IConstr iConstr0 = product1.addAtMostOne(groupClauseSelectorSolver0, iVecInt0);
      product1.addExactly(abstractMinimalModel0, iVecInt0, 2384);
      product1.addAtMostNonOpt(groupClauseSelectorSolver0, iVecInt0, 2384);
      SingleSolutionDetector singleSolutionDetector1 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(iConstr0).when(singleSolutionDetector1).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(2384, 2384, 2384, 2384, 0).when(singleSolutionDetector1).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1);
      AbstractMinimalModel abstractMinimalModel1 = new AbstractMinimalModel(groupClauseSelectorSolver1);
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel1);
      product0.addExactlyOne(abstractMinimalModel1, iVecInt1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        product0.addExactlyOne(maxSatDecorator0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        product0.addExactlyOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addExactly((ISolver) null, iVecInt0, 1307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        product0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(iSolver0, (IVecInt) null, 383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(7, 1, 1, 7, 392).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(abstractMinimalModel0, iVecInt0, (-3879));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((-1443)).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, false);
      VecInt vecInt0 = new VecInt(0);
      vecInt0.push(0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(7, 1, 1, 7, 392).when(singleSolutionDetector0).nVars();
      doReturn(7, 392, 7, 1, 693).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      product0.addAtMostOne(abstractMinimalModel0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(7, 1, 1, 7, 392).when(singleSolutionDetector0).nVars();
      doReturn(7, 392, 7, 1, 693).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      // Undeclared exception!
      product0.addAtMostNonOpt(abstractMinimalModel0, iVecInt0, 7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(7, 1, 1, 7, 392).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(groupClauseSelectorSolver0, iVecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(7, 1, 1, 7, 1).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      iVecInt0.push(1);
      IConstr iConstr0 = product0.addAtMostNonOpt(abstractMinimalModel0, iVecInt0, 0);
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(7, 1, 1, 7, 1).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      iVecInt0.push(1);
      IConstr iConstr0 = product0.addAtMostNonOpt(groupClauseSelectorSolver0, iVecInt0, 1);
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(7, 1, 1, 7, 392).when(singleSolutionDetector0).nVars();
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(abstractMinimalModel0, iVecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
