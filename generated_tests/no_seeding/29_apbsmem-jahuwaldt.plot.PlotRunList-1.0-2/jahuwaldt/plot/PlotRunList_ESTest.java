/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:31:18 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxURSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.RTriangle1Symbol;
import jahuwaldt.plot.RTriangle4Symbol;
import jahuwaldt.plot.TabUpSymbol;
import jahuwaldt.plot.ThinRect1Symbol;
import jahuwaldt.plot.Triangle2Symbol;
import jahuwaldt.plot.Triangle4Symbol;
import java.awt.Color;
import java.awt.Dialog;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRunList_ESTest extends PlotRunList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      PlotDatum[] plotDatumArray0 = new PlotDatum[6];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunList0.add(0, (Object) plotRun0);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      // Undeclared exception!
      try { 
        plotRunList0.setPlotSymbol(triangle2Symbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.ORANGE;
      PlotRun[] plotRunArray0 = new PlotRun[2];
      double[] doubleArray0 = new double[0];
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle1Symbol0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.setLineColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      double[] doubleArray0 = new double[7];
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, tabUpSymbol0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun[] plotRunArray0 = new PlotRun[1];
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.clone();
      assertTrue(object0.equals((Object)plotRunList0));
      assertNotSame(object0, plotRunList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      int int0 = plotRunList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotDatum[] plotDatumArray0 = new PlotDatum[3];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.set(0, plotRun0);
      assertSame(plotRun0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.remove(1);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, true);
      plotDatumArray0[0] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[0];
      plotRunArray0[3] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[7];
      double[] doubleArray0 = new double[1];
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, boxURSymbol0);
      plotRunArray0[0] = plotRun0;
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotDatum plotDatum0 = new PlotDatum(0.0, 545.91513684, true);
      plotDatumArray0[0] = plotDatum0;
      PlotDatum plotDatum1 = new PlotDatum(0.0, (-1733.98938297), true, boxURSymbol0);
      plotDatumArray0[1] = plotDatum1;
      PlotRun plotRun1 = new PlotRun(plotDatumArray0);
      plotRunArray0[1] = plotRun1;
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRunArray0[1];
      plotRunArray0[4] = plotRunArray0[2];
      plotRunArray0[5] = plotRunArray0[2];
      plotRunArray0[6] = plotRun1;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals((-1733.98938297), double0, 0.01);
      assertEquals(7, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      ArrayList<PlotRunList> arrayList0 = new ArrayList<PlotRunList>();
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRunArray0[0] = plotRun0;
      double[] doubleArray0 = new double[6];
      ThinRect1Symbol thinRect1Symbol0 = new ThinRect1Symbol();
      PlotRun plotRun1 = new PlotRun(doubleArray0, doubleArray0, false, thinRect1Symbol0);
      plotRunArray0[1] = plotRun1;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals(2, plotRunList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-1546.496161501);
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, triangle4Symbol0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals((-1546.496161501), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      ArrayList<PlotRunList> arrayList0 = new ArrayList<PlotRunList>();
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.get(0);
      assertNotNull(object0);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        plotRunList0.set(2116, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set((-2684), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.remove(4889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4889, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.remove((-1898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRunList0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get((-2290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.add((-1059), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1059, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((PlotRun[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[8];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      int int0 = plotRunList0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayDeque<PlotRun> arrayDeque0 = new ArrayDeque<PlotRun>();
      PlotRunList plotRunList0 = new PlotRunList(arrayDeque0);
      Iterator iterator0 = plotRunList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      Color color0 = Color.ORANGE;
      plotRunList0.setLineColor(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      plotRunList0.setPlotSymbol(rTriangle4Symbol0);
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMinY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun[] plotRunArray0 = new PlotRun[6];
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRun0;
      plotRunArray0[3] = plotRun0;
      plotRunArray0[4] = plotRun0;
      plotRunArray0[5] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMaxX();
      assertEquals(6, plotRunList0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      ArrayList<PlotRunList> arrayList0 = new ArrayList<PlotRunList>();
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayDeque<PlotRun> arrayDeque0 = new ArrayDeque<PlotRun>();
      PlotRun plotRun0 = new PlotRun();
      arrayDeque0.offer(plotRun0);
      PlotRunList plotRunList0 = new PlotRunList(arrayDeque0);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      PlotRunList plotRunList0 = new PlotRunList(linkedHashSet0);
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.clear();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      // Undeclared exception!
      try { 
        plotRunList0.add(1, (Object) dialog_ModalExclusionType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Dialog$ModalExclusionType cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set(10, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      PlotRunList plotRunList1 = new PlotRunList(plotRunList0);
      assertEquals(3, plotRunList1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.remove(1);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.get(1);
      assertEquals(3, plotRunList0.size());
  }
}
