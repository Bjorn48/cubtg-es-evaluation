/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:09:48 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2H#ew!@iLz,R|,D3~z", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.clone();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":+TCTJu");
      wall0.setLeftSideColor((Integer) null);
      wall0.isTrapezoidal();
      wall0.containsPoint(0.01F, (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      float float0 = (-404.395F);
      wall0.setYEnd((-404.395F));
      Float float1 = new Float((-4261.0F));
      wall0.setArcExtent(float1);
      float float2 = (-2152.511F);
      Float float3 = new Float((-2152.511F));
      float float4 = 1207.867F;
      float float5 = 0.15431067F;
      wall0.intersectsRectangle(float5, float4, float0, float2);
      wall0.clone();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = new Wall(0.0F, 0.0F, (-1220.1086F), (-1220.1086F), 0.0F, 0.0F);
      wall1.intersectsRectangle(0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      wall1.containsPoint(0.0F, 645.33F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall1.setArcExtent(float0);
      Float float1 = new Float((-1947.0F));
      wall1.containsPoint((-1220.1086F), (-1947.0F), (-1947.0F));
      wall0.getXArcCircleCenter();
      wall0.getHeightAtEnd();
      Float.isFinite(0.0F);
      wall1.getArcExtent();
      Float float2 = new Float(1161.474F);
      wall1.setArcExtent(float2);
      Float float3 = new Float(645.33F);
      wall0.setHeight(float3);
      Float float4 = new Float(2102.2824320477866);
      wall0.setHeightAtEnd(float4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.intersectsRectangle(645.33F, 0.0F, 573.10944F, 0.0F);
      Wall wall2 = new Wall(0.0F, (-1.0F), 476.0892F, 476.0892F, (-2620.3F), 573.10944F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Wall.Property.values();
      wall2.getLevel();
      wall0.getYEnd();
      Wall wall3 = new Wall(0.7239136F, 527.253F, 381.12F, 381.12F, 0.0F, 381.12F);
      Integer integer0 = new Integer(13);
      wall3.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1932.0F), (-1932.0F));
      Integer integer0 = new Integer((-1262));
      wall0.containsPoint((-1.0F), (-1.0F), 3318.583F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1488665.0996938348);
      Float.isFinite((-2821.91F));
      Float float1 = new Float((-2218.0));
      wall0.setYEnd(2.0F);
      wall0.setArcExtent(float1);
      Float float2 = new Float((-1.0F));
      Float float3 = new Float((-2821.91F));
      wall0.setHeight(float3);
      wall0.getLevel();
      wall0.containsPoint((-1932.0F), (-108.0F), (-2404.931F));
      wall0.getYArcCircleCenter();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-316.6F), 0.49999616F, (-316.6F), (-1487.5927F), (-316.6F), (-316.6F));
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME", "NAME", (Content) null, 0.49999616F, (-114.7158F), "NAME", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.getRightSideColor();
      Float float0 = Float.valueOf((-114.7158F));
      Float.sum((-114.7158F), 2.2344332F);
      wall0.setArcExtent(float0);
      wall0.getLeftSideShininess();
      HomeTexture homeTexture1 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        wall0.setLeftSideTexture(homeTexture1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      Object object0 = new Object();
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "", object1, object0);
      Integer integer0 = new Integer(7);
      propertyChangeEvent0.setPropagationId(integer0);
      propertyChangeEvent0.toString();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getYArcCircleCenter();
      wall0.intersectsRectangle((-1.0F), 0.0F, (-1979.04F), 0.0F);
      wall0.getThickness();
      wall0.setXEnd(0.0F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-687.9722F), 0.1F, (-687.9722F), 1.0F, 0.0F, 4214.82F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      wall0.containsWallStartAt((-1.0F), 0.0F, (-2591.0F));
      Integer integer2 = Integer.getInteger("LEFT_SIDE_COLOR", integer1);
      wall0.setRightSideColor(integer0);
      wall0.setYStart((-2591.0F));
      wall0.getArcExtent();
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.clone();
      wall1.setLeftSideShininess((-860.43F));
      wall0.getXEnd();
      Wall wall2 = wall1.clone();
      wall0.getLeftSideTexture();
      wall1.getStartPointToEndPointDistance();
      wall0.setXEnd(2592.0F);
      wall1.setRightSideColor(integer2);
      wall0.getXArcCircleCenter();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall2.setRightSideShininess(952.0139F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall2.setPattern((TextureImage) null);
      wall1.setThickness(1.0F);
      wall2.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1220.1086F), (-1220.1086F), 2.0F, 0.0F, (-1751.0F));
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall0.containsWallStartAt(573.10944F, 2637.0F, 185.3116F);
      wall1.containsPoint((-1.0F), 573.10944F, (-1220.1086F));
      wall2.getXArcCircleCenter();
      Float float0 = new Float((double) (-1.0F));
      Float.isFinite((-1.0F));
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float float2 = new Float((-282.49F));
      wall1.setHeight(float0);
      wall1.getLevel();
      wall2.containsPoint((-2404.931F), (-1.0F), 1059.3522F);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(0.0F, (-1220.1086F), 573.10944F, (-1220.1086F));
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      wall1.getXArcCircleCenter();
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(1158.20015539);
      Float float2 = new Float(0.0F);
      wall1.setHeightAtEnd(float2);
      wall0.getHeightAtEnd();
      wall0.getWallAtStart();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.min(2.0F, 2550.9644F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(0.0);
      wall1.setYEnd(2.0F);
      Float float2 = new Float(0.01F);
      Float float3 = new Float(94.96332574);
      wall1.setArcExtent(float3);
      Float float4 = new Float((-927.33F));
      Float float5 = new Float(0.0F);
      Wall wall2 = wall1.getWallAtStart();
      wall2.setHeight(float3);
      wall0.getLevel();
      wall0.containsPoint(152.63123F, (-3152.2988F), 1351.5542F);
      wall1.getYArcCircleCenter();
      Float float6 = new Float((double) (-3152.2988F));
      wall0.setHeightAtEnd(float6);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      Object object0 = new Object();
      wall0.setYEnd(2457.403F);
      wall0.setRightSideColor((Integer) null);
      Float float0 = new Float(1927.4719F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(1927.4719F);
      Float float2 = new Float((-1506.244F));
      Float float3 = new Float((-1.0F));
      wall0.setHeight(float3);
      wall0.getLevel();
      wall0.setXStart(1287.8364F);
      wall0.containsPoint(1287.8364F, 2457.403F, 745.1285F);
      wall0.getYArcCircleCenter();
      Wall wall1 = new Wall((-3000.2F), (-1105.3573F), (-1105.3573F), 479.51328F, (-3000.2F), (-2.272667F));
      wall1.setHeightAtEnd(float2);
      wall0.getLength();
      wall1.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(7);
      Integer.getInteger("Super class isn't cloneable");
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint(1927.4719F, (-1979.04F), 384.0F);
      wall0.getYStart();
      wall0.getLevel();
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-915.9879F), 2.0F, (-915.9879F), 2.0F, (-915.9879F), 2.0F);
      wall0.getWallAtStart();
      wall0.setWallAtEnd((Wall) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 3.0F, 0.0F, Float.NEGATIVE_INFINITY);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      Wall wall2 = new Wall(3.0F, 0.15452854F, 0.01F, (-0.15452854F), 0.01F);
      wall2.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float.min(0.1F, 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1201.217015232828));
      wall0.setYEnd(3.0F);
      Float float1 = new Float(1679.9208F);
      Wall wall3 = wall1.getWallAtStart();
      wall0.getLevel();
      wall3.isAtLevel((Level) null);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F));
      wall0.containsWallStartAt(4206.2134F, 4206.2134F, 4206.2134F);
      Wall wall1 = new Wall(1.0F, (-1.0F), (-1.0F), (-2665.481F), (-1088.0F), 1138.0F);
      wall1.containsWallStartAt((-1088.0F), (-1088.0F), (-5332.716F));
      wall0.containsPoint(1.0F, 536.9608F, (-2665.481F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float(2175.2);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float((double) 0.0F);
      Float.sum(0.0F, (-1.0F));
      wall0.setLevel((Level) null);
      wall1.getLeftSideColor();
      wall0.containsWallStartAt((-1415.389F), 1.0F, (-1.0F));
      wall0.setHeight(float1);
      float float2 = new Float((-1415.389F));
      wall0.setHeight(float1);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(1498.887F, 1498.887F, 68.151794F, (-1262.0F), (-1262.0F));
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = 2.0F;
      float float1 = 2802.4854F;
      Wall wall0 = new Wall(2.0F, 2802.4854F, 2.0F, 2.0F, (-1.0F));
      wall0.getYStart();
      wall0.setRightSideShininess(2802.4854F);
      wall0.setXEnd(2802.4854F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      int int0 = (-545);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      linkedList0.pollFirst();
      // Undeclared exception!
      try { 
        linkedList0.addAll((-545), (Collection<? extends Wall>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -545, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      Object object0 = new Object();
      wall0.setYEnd((-1979.04F));
      wall0.setRightSideColor((Integer) null);
      Wall wall1 = new Wall(1.0F, 1927.4719F, 1.0F, 1927.4719F, 2457.403F);
      wall0.setWallAtEnd(wall0);
      Float.sum(2.0F, 2457.403F);
      wall1.getLevel();
      Float float0 = new Float(2.0F);
      wall0.getHeightAtEnd();
      Float float1 = new Float(2459.403F);
      wall0.getPoints();
      Float float2 = new Float(0.009999999776482582);
      wall1.getLeftSideColor();
      wall1.getRightSideTexture();
      Float float3 = new Float((double) 745.1285F);
      wall1.setHeightAtEnd(float3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.containsWallStartAt(573.10944F, 645.33F, 0.0F);
      Float float0 = new Float((-777.2521F));
      wall1.setArcExtent(float0);
      wall0.containsWallEndAt((-1220.1086F), 1564.3196F, (-1220.1086F));
      wall1.setHeight(float0);
      wall1.getXArcCircleCenter();
      Float float1 = new Float(1564.3196F);
      wall1.setHeight(float1);
      wall1.getYEnd();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      wall1.setYEnd(0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      Float float1 = new Float((double) 0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-2485.2664F), (-630.5F), (-1279.0F));
      Wall wall1 = new Wall((-2485.2664F), 0.0F, (-1.0F), (-1667.2368F), (-630.5F));
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-630.5F));
      wall1.clone();
      Wall wall2 = wall0.getWallAtEnd();
      wall1.setWallAtEnd(wall2);
      wall0.isTrapezoidal();
      Float float0 = new Float((-42.318F));
      Wall wall3 = wall2.clone();
      wall3.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-1.0F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.isTrapezoidal();
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-1.0F));
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), (-3886.468F));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      level0.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("E,yTo(Y8,", uRLContent0, 0.0F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      Float.min(745.1285F, 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-843.86732964));
      wall0.setYEnd(745.1285F);
      Float float1 = new Float(0.42449036F);
      Float float2 = new Float(1764.1775F);
      wall0.setArcExtent(float2);
      Float float3 = new Float(1405.491F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float4 = new Float((-1920.6223F));
      Float.isFinite(2.0F);
      wall0.setHeight(float4);
      wall0.getLevel();
      wall0.containsPoint((-460.1F), 745.1285F, 1.0F);
      wall0.getYArcCircleCenter();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      wall0.getPoints();
      Level level0 = new Level("X_END", (-2665.481F), (-2665.7568F), (-2665.7568F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Object object0 = new Object();
      Wall wall2 = wall1.getWallAtStart();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall2, "", "", float0);
      Object object1 = new Object();
      propertyChangeEvent0.setPropagationId(object1);
      propertyChangeEvent0.toString();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float.isFinite(573.10944F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("java.beans.PropertyChangeEvent[propertyName=; oldValue=; newValue=1.0; propagationId=java.lang.Object@4639369; source=com.eteks.sweethome3d.model.Wall@1]", propertyChangeListenerProxy0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      Wall wall3 = wall0.clone();
      Wall wall4 = wall3.clone();
      wall4.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getYArcCircleCenter();
      wall0.intersectsRectangle(0.11F, (-1.0F), 0.0F, (-5330.962F));
      wall4.getThickness();
      wall1.setXEnd((-1.0F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), 0.1F, 880.173F);
      wall0.isTrapezoidal();
      wall0.containsWallStartAt((-2665.7568F), 3671.9F, 0.1F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", 2457.403F, (-3886.468F), 2240.5F);
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = new Level("", 2674.432F, (-3886.468F), 2674.432F);
      level0.setElevation(2240.5F);
      level0.setFloorThickness((-0.15339087F));
      wall0.isAtLevel(level1);
      Float float0 = Float.valueOf(0.01F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), 212.38269F, (-2665.7568F), 212.38269F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-2665.7568F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getWallAtStart();
      Float float1 = new Float(212.38269F);
      wall0.setArcExtent(float1);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall0.setRightSideShininess(0.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      wall1.setYEnd(0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall1.containsWallEndAt(0.1F, (-1220.1086F), 0.0F);
      wall1.intersectsRectangle(0.1F, (-3152.2988F), 0.0F, (-1220.1086F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.6066F), 0.0F, (-1220.6066F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float.min((-1220.6066F), (-3152.2988F));
      wall1.setYEnd(0.0F);
      Float float0 = new Float((-1220.6066F));
      wall0.intersectsRectangle(0.0F, (-1220.6066F), 0.0F, 0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.4209630826371968E7);
      Float.min((-1407.36F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(1.0);
      wall0.setYEnd(1.0F);
      Float float2 = new Float(0.0F);
      Float float3 = new Float(1.0F);
      wall0.setArcExtent(float3);
      Float float4 = new Float(1.0F);
      Float float5 = new Float(641.003F);
      Float float6 = new Float((-1642.65F));
      Float.max(641.003F, 3888.768F);
      wall0.setHeight(float6);
      wall0.getLevel();
      wall0.containsPoint(1.0F, (-303.43005F), (-1407.36F));
      wall0.getYArcCircleCenter();
      Float float7 = new Float((double) 1.0F);
      wall0.setHeightAtEnd(float7);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), 0.01F, (-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F));
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.getXArcCircleCenter();
      wall0.getXArcCircleCenter();
      Float float0 = new Float(0.7046352633319763);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      Float float1 = new Float((-2501.5298F));
      Wall wall1 = wall0.clone();
      wall1.setHeight(float1);
      wall0.getXArcCircleCenter();
      wall0.getArcExtent();
      Float float2 = new Float(1.0F);
      wall1.setHeight(float2);
      wall1.getYEnd();
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getLeftSideColor();
      wall0.getArcExtent();
      wall0.getPoints();
      wall0.getStartPointToEndPointDistance();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-3152.2988F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("HEIGHT_AT_END", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness(0.0F);
      wall0.getHeight();
      wall1.getHeight();
      Float.sum((-1220.1086F), (-1220.1086F));
      wall0.getLevel();
      Float.min((-2341.1F), (-1357.05F));
      wall0.getHeightAtEnd();
      wall1.getHeight();
      wall0.getPoints();
      wall0.getArcExtent();
      wall0.setArcExtent((Float) null);
      wall0.containsWallEndAt((-2341.1F), 1795.4065F, (-3084.42F));
      wall1.getStartPointToEndPointDistance();
      Float float0 = new Float(2322.39612);
      Float float1 = new Float((-3152.2988F));
      wall1.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1221.4788F), 0.0F, (-1221.4788F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      Float float0 = wall1.getHeight();
      wall1.setArcExtent(float0);
      Float float1 = new Float(573.10944F);
      wall1.containsPoint((-832.5242F), (-1221.4788F), 2250.0F);
      wall1.getArcExtent();
      wall0.getPoints();
      wall1.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-1243));
      wall0.setLeftSideColor(integer0);
      wall0.isTrapezoidal();
      wall0.containsPoint((-1243), 151.63F, (-1.0F));
      wall0.getYEnd();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.intersectsRectangle((-1.0F), (-1243), 0.0F, 0.0F);
      wall0.clone();
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1262));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((float) (-1262));
      wall0.isTrapezoidal();
      wall0.containsWallStartAt((-1.0F), (-687.9722F), 2457.403F);
      Float.isFinite(584.0F);
      wall0.setHeight(float0);
      wall0.getXArcCircleCenter();
      wall0.setHeight(float0);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(2585.8F, (-827.806F), (-1700.88F), 1503.3F, (-966.8F));
      wall0.getRightSideTexture();
      Level level0 = new Level((String) null, 2126.15F, 1503.3F, (-966.8F));
      wall0.move((-82.7585F), 197.01595F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setYEnd(1503.3F);
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      wall0.setHeight(float0);
      Float float1 = new Float(1.0F);
      Float.sum(0.0F, 1.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-1.0F));
      wall0.setArcExtent(float1);
      wall0.move(2.0F, 470.766F);
      wall0.getHeightAtEnd();
      wall0.getXEnd();
      wall0.setLeftSideShininess(2.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(3);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, "", float0, integer1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(propertyChangeListenerProxy0, "com.eteks.sweethome3d.model.TexturesCategory", wall0, "com.eteks.sweethome3d.model.TexturesCategory");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall((-915.9879F), 3313.95F, 291.05786F, (-1645.0F), 1.0F);
      wall0.setLevel((Level) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move(80.54593F, 291.05786F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setXStart(0.0F);
      wall0.setXEnd(1.0F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      wall0.setLeftSideColor(integer1);
      wall0.containsPoint((-1220.1086F), 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setXEnd((-1.0F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
      wall0.getHeight();
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-1268.409F), (-879.34576F), 0.0F, (-1268.409F), 0.0F);
      Wall wall1 = new Wall((-1268.409F), (-1268.409F), (-1268.409F), 1.0F, (-1268.409F), 0.0F);
      wall1.getPoints();
      wall1.getLeftSideTexture();
      wall0.setXEnd(1515.398F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      wall0.getPoints();
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(123.494446F);
      wall1.setYEnd(883.8374F);
      wall0.intersectsRectangle(0.0F, (-1.0F), 0.0F, (-1268.409F));
      Wall.Property.values();
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt((-879.34576F), (-1.0F), (-879.34576F));
      wall0.containsPoint(0.0F, 0.0F, (-879.34576F));
      wall1.getXArcCircleCenter();
      Float float0 = new Float((double) (-1268.409F));
      Float.isFinite((-1268.409F));
      wall1.setArcExtent(float0);
      wall0.setHeight(float0);
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1243));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((float) (-1243));
      wall0.isTrapezoidal();
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 3.0F, Float.NEGATIVE_INFINITY);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.isTrapezoidal();
      wall1.containsPoint(0.1F, 3.7107988E-8F, 502.904F);
      wall1.getYEnd();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallEndAt((-1.0F), (-1262), (-1262));
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), (-1.0F));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      wall0.getLevel();
      Level level1 = new Level("LEFT_SIDE_SHININESS", 2457.403F, 0.0F, 4912.786F);
      level1.setElevation(0.0F);
      wall0.getWallAtStart();
      wall0.isAtLevel(level1);
      Wall.Property.valueOf("LEFT_SIDE_SHININESS");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1221.4788F), 0.0F, (-1221.4788F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(0.0F, (-1221.4788F), 573.10944F, (-1221.4788F));
      wall0.isTrapezoidal();
      wall1.getLevel();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-687.9722F), 0.1F, (-687.9722F), 1.0F, 0.0F, 4214.82F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      wall0.containsWallStartAt((-1.0F), 0.0F, (-2591.0F));
      Integer integer2 = Integer.getInteger("LEFTSIDE_COLOR", integer1);
      wall0.setRightSideColor(integer0);
      wall0.setYStart((-2591.0F));
      wall0.getArcExtent();
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Wall wall2 = wall1.clone();
      wall1.setLeftSideShininess((-860.43F));
      wall0.getXEnd();
      Wall wall3 = wall1.clone();
      wall0.getLeftSideTexture();
      wall1.getStartPointToEndPointDistance();
      wall0.setXEnd(2592.0F);
      wall1.setRightSideColor(integer2);
      wall0.getXArcCircleCenter();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall3.setRightSideShininess(952.0139F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall2.getLevel();
      wall2.isAtLevel((Level) null);
      wall3.getYStart();
      wall2.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall0.getLevel();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-1.2334995F), (-1.2334995F), (-1.2334995F), (-1.2334995F), (-1.2334995F), (-1.2334995F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1.2334995F));
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.setArcExtent(float0);
      wall1.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.pollLast();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
      wall0.getHeightAtEnd();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 0.0F);
      wall1.containsPoint((-1.0F), 0.0F, (-1220.1086F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.getLeftSideColor();
      wall1.getRightSideTexture();
      wall1.containsWallStartAt((-768.1F), 0.0F, 2457.403F);
      wall1.setHeight(float1);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.4209630826371968E7);
      Float.min((-1407.36F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(1.0);
      wall0.setYEnd(1.0F);
      Float float2 = new Float(0.0F);
      Float float3 = new Float(1.0F);
      wall0.setArcExtent(float3);
      Float float4 = new Float((-1359.41F));
      Float float5 = new Float(641.003F);
      Float float6 = new Float((-1642.65F));
      wall0.setHeight(float6);
      wall0.getLevel();
      wall0.containsPoint(1.0F, (-303.43005F), (-1407.36F));
      wall0.getYArcCircleCenter();
      Float float7 = new Float((double) (-1359.41F));
      wall0.setHeightAtEnd(float7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2546.6907F), (-1.0F), (-1.0F), 687.5919F);
      wall0.containsWallStartAt(1.0F, (-1.0F), 645.33F);
      wall0.containsPoint(687.5919F, (-2546.6907F), (-9.45F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-1853.0F));
      wall0.getArcExtent();
      Float.sum((-1.0F), 554.9713F);
      Float float1 = new Float((-1.0F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(1.0F);
      Float float3 = new Float(100.802F);
      wall0.setHeight(float3);
      wall0.getLevel();
      Float float4 = wall0.getArcExtent();
      wall0.setHeightAtEnd(float4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Wall wall2 = wall1.clone();
      Float.min(220.0F, (-3152.2988F));
      wall2.setWallAtEnd(wall0);
      wall1.isTrapezoidal();
      wall1.containsPoint(631.438F, 0.0F, (-2214.0208F));
      wall2.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.setWallAtEnd((Wall) null);
      wall0.move(0.0F, 2997.958F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(2997.958F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.intersectsRectangle(745.0091F, 0.0F, 122.598946F, 0.0F);
      wall0.getLength();
      Float float0 = new Float((-1849.2));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 133.86513F, 0.0F, 0.1F, 133.86513F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall wall1 = new Wall((-1181.1396F), (-1393.1521F), (-1181.1396F), 0.0F, 0.0F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.intersectsRectangle(0.0F, 3135.39F, 0.0F, 0.0F);
      Wall.Property.values();
      wall1.getLevel();
      wall1.getPattern();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall((-0.113438375F), (-0.113438375F), (-0.113438375F), (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.containsWallStartAt(573.10944F, 645.33F, 0.0F);
      Float float0 = new Float((-777.2521F));
      wall1.setArcExtent(float0);
      wall0.containsWallEndAt((-1220.1086F), 1564.3196F, (-1220.1086F));
      wall1.setHeight(float0);
      Float float1 = new Float(2845.097F);
      wall1.intersectsRectangle((-0.113438375F), (-0.113438375F), 2845.097F, 1228.571F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.getXArcCircleCenter();
      Float.min((-1220.1086F), (-3152.2988F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.setYEnd(0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.setArcExtent(float0);
      wall0.containsWallEndAt((-4501.7144F), (-3152.2988F), (-4501.7144F));
      Float float1 = new Float(763.03625F);
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((float) (-1243));
      wall0.isTrapezoidal();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.0F, (-0.012987013F), 0.0F, 1.0F);
      wall0.setThickness(1.0F);
      wall0.getLevel();
      Integer integer0 = new Integer(1917);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-9.200577F), (-1220.1086F), (-1220.1086F), (-9.200577F), (-9.200577F));
      wall0.containsPoint((-9.200577F), 0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float float0 = new Float((-9.200577F));
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getXArcCircleCenter();
      Level level0 = new Level("LEFT_SIDE_SHININESS", 0.0F, (-301.8F), 0.0F);
      wall0.setLevel(level0);
      Wall.Property.values();
      Level level1 = wall0.getLevel();
      Level level2 = new Level("S9s\"{ue", 0.0F, 0.011767191F, (-528.2F));
      level2.setElevation((-301.8F));
      Level level3 = level1.clone();
      level3.setFloorThickness((-528.2F));
      wall0.getWallAtStart();
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 133.5739F, 0.0F, 0.1F, 133.5739F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(2801.128F, 2801.128F, 2801.128F, 2801.128F, 2801.128F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.containsPoint(2801.128F, 2801.128F, 2801.128F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) (-1220.1086F));
      wall1.setArcExtent(float0);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(0.0F, (-1220.1086F), 573.10944F, (-1220.1086F));
      wall0.isTrapezoidal();
      wall1.getLevel();
      wall1.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-2821.91F), (-2821.91F), (-3274.9F), (-1039.0F), 2395.3884F, (-467.0F));
      Wall wall1 = wall0.clone();
      wall1.setThickness((-467.0F));
      wall1.getPoints();
      wall0.setXEnd((-467.0F));
      wall0.setYEnd((-246.32756F));
      wall1.containsWallEndAt((-2821.91F), (-533.7524F), (-246.32756F));
      wall1.addPropertyChangeListener((PropertyChangeListener) null);
      wall1.setYStart(2395.3884F);
      wall1.getLength();
      wall1.getYStart();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.toArray();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      wall0.getLevel();
      linkedList0.add(wall1);
      wall1.getHeightAtEnd();
      wall0.getArcExtent();
      Wall.clone(list1);
      wall0.getStartPointToEndPointDistance();
      wall1.getRightSideShininess();
      wall0.isAtLevel((Level) null);
      wall1.setArcExtent((Float) null);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, 2395.3884F, 2.0F, "");
      wall1.setPattern(catalogTexture0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float.min(34.0F, 2.0F);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      Float float0 = new Float(0.009999999776482582);
      Wall wall2 = new Wall((-3889.6125F), (-4823.1436F), 0.1F, (-3603.0352F), (-4823.1436F));
      wall2.getLeftSideColor();
      wall0.getRightSideTexture();
      wall2.containsWallStartAt(0.0F, (-2834.74F), 645.33F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((-11.38965F));
      Float float1 = new Float(0.0F);
      wall0.setHeightAtEnd(float1);
      wall0.setHeight(float1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      wall0.getArcExtent();
      Float float2 = wall0.getHeightAtEnd();
      wall0.setHeightAtEnd(float2);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 3.0F, 0.0F, Float.NEGATIVE_INFINITY);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Wall wall1 = new Wall(0.0F, (-1357.05F), (-1357.05F), 0.01F, 0.01F);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness(0.01F);
      Float float0 = wall0.getHeight();
      wall0.getHeight();
      Float.sum((-99.17542F), Float.NEGATIVE_INFINITY);
      wall0.getLevel();
      wall0.containsWallEndAt((-1.0F), (-621.2773F), Float.NEGATIVE_INFINITY);
      Float.min(2.0F, 3.0F);
      wall0.getHeightAtEnd();
      wall1.getHeight();
      wall0.getPoints();
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(0.0F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float1 = new Float(1576.521011850527);
      wall0.setHeightAtEnd(float1);
      CatalogTexture catalogTexture0 = new CatalogTexture("/>*X~3LwIn=z_DCw", (Content) null, 2.0F, 2.0F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 3485.5593F, (-295.55923F), 0.0F);
      wall0.getLeftSideColor();
      wall0.getRightSideShininess();
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1243));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((float) (-1243));
      wall0.isTrapezoidal();
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.containsWallStartAt(1.0F, 2997.958F, 2812.5637F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-1782.07F), (-1782.07F), (-1220.1086F), (-498.544F), (-1220.1086F), (-498.544F));
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall((-1782.07F), (-1782.07F), 5516.51F, 1405.491F, 0.0F);
      wall2.setWallAtStart(wall0);
      wall0.setWallAtStart(wall2);
      wall2.intersectsRectangle(0.0F, 573.10944F, 573.10944F, (-1220.1086F));
      Float float0 = new Float(2218.0);
      wall0.getLeftSideColor();
      wall1.getRightSideTexture();
      wall1.containsWallStartAt(631.9751F, 1795.1F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-965.55615F), (-965.55615F), (-965.55615F), 464.6706F, 298.2737F);
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "1f,cF:]EAX0l");
      URLContent uRLContent0 = new URLContent(uRL1);
      CatalogTexture catalogTexture0 = new CatalogTexture("1f,cF:]EAX0l", uRLContent0, 3518.056F, 1019.39984F, true);
      wall0.setPattern(catalogTexture0);
      wall0.setYStart(1019.39984F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$VALUES");
      wall0.containsPoint((-786.8433F), 1927.4719F, 298.2737F);
      Wall wall1 = wall0.clone();
      wall1.setYStart((-2897.27F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2144.818F), (-1.0F), (-2144.818F), (-1.0F), (-2144.818F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float float0 = new Float((-777.2521F));
      wall1.setArcExtent(float0);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall1.getPoints();
      Float float1 = new Float((-1.0));
      wall1.getLeftSideColor();
      wall1.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(1973.9227F, 1973.9227F, (-911.03F), 528.04236F, (-1.0F));
      Wall wall1 = new Wall(1.0F, 1973.9227F, (-911.03F), 1973.9227F, 1973.9227F);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      Wall wall2 = new Wall((-911.03F), 1.0F, 528.04236F, 1973.9227F, 1973.9227F);
      wall0.setWallAtStart(wall2);
      wall2.getXArcCircleCenter();
      Float.min((-3978.4736F), 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float(0.01F);
      Float float1 = new Float((-256.21558358809017));
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 3.0F, 0.0F, Float.NEGATIVE_INFINITY);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Wall wall1 = new Wall(0.0F, 3518.056F, 3518.056F, 0.01F, 0.01F);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("R!>:JfI5o2%qd?@6", "R!>:JfI5o2%qd?@6", wall1, propertyChangeListenerProxy0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness(0.01F);
      Float float0 = wall0.getHeight();
      wall0.getHeight();
      Float.sum(0.01F, Float.NEGATIVE_INFINITY);
      wall0.getLevel();
      Float.sum((-1937.4664F), 151.929F);
      Float.min(2.0F, 3.0F);
      wall0.getHeightAtEnd();
      wall1.getHeight();
      wall0.getPoints();
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(0.0F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float1 = new Float((double) 3518.056F);
      wall0.setHeightAtEnd(float1);
      wall1.getStartPointToEndPointDistance();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLevel((Level) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.1F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setXStart(0.0F);
      wall0.setXEnd(0.0F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(1564);
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint(384.0F, 0.01F, 1564);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setLeftSideTexture((HomeTexture) null);
      Float float0 = new Float((-1.0F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall((-104.32211F), (-104.32211F), (-104.32211F), (-104.32211F), (-104.32211F));
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = 1927.4719F;
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      Object object0 = new Object();
      wall0.setYEnd(2457.403F);
      wall0.setRightSideColor((Integer) null);
      Wall wall1 = new Wall((-1979.04F), (-16.932396F), 745.1285F, 1356.69F, (-1979.04F), 1.0F);
      wall0.setWallAtEnd(wall1);
      Float.sum(2.0F, 2457.403F);
      wall1.getLevel();
      Float.min(2.0F, 2457.403F);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      Float float1 = new Float(2802.4854F);
      wall1.setArcExtent(float1);
      // Undeclared exception!
      wall1.containsWallEndAt(2802.4854F, 1927.4719F, 294.2F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move(573.10944F, (-2665.481F));
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.0091F);
      wall0.setYEnd((-2665.481F));
      wall0.setRightSideColor((Integer) null);
      wall0.intersectsRectangle(2022.0721F, 892.51306F, 2802.4854F, 2802.4854F);
      Wall.Property.values();
      wall0.getLevel();
      Level level0 = new Level("x{'N.D", (-827.806F), (-3425.107F), 0.0F);
      level0.setFloorThickness((-827.806F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(445.0F, 445.0F, 1.0F, 0.01F, 445.0F);
      wall0.getPoints();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(1973.9227F, 1973.9227F, (-911.03F), 528.04236F, (-1.0F));
      Wall wall1 = new Wall(1.0F, 1973.9227F, (-911.03F), 1973.9227F, 1973.9227F);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      Wall wall2 = new Wall((-911.03F), 1.0F, 528.04236F, 1973.9227F, 1973.9227F);
      wall0.setWallAtStart(wall2);
      wall2.getXArcCircleCenter();
      Float.min((-3978.4736F), 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-256.21558358809017));
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-8.434736F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall0.setHeight(float2);
      wall0.getLevel();
      wall0.containsPoint(0.11F, 0.0F, 0.0F);
      wall0.getXEnd();
      wall0.containsWallEndAt((-1220.1086F), (-2075.0F), 2.0F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt((-2665.481F), 500.99734F, 0.1F);
      wall0.containsPoint(541.68176F, (-232.5312F), 1776.1757F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) (-2665.481F));
      Float.isFinite((-1.0F));
      Float float1 = Float.valueOf((-508.427F));
      Float.sum(645.33F, 573.10944F);
      wall0.setArcExtent(float1);
      Float float2 = new Float((-1.0F));
      wall1.setHeight(float1);
      wall1.getLevel();
      wall0.containsPoint((-508.427F), (-2665.481F), 0.01F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "+`2I$VIhaY5";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+`2I$VIhaY5");
      Wall wall0 = new Wall(1471.5619F, 1471.5619F, (-16.0907F), (-16.0907F), 1068.7F, 1471.5619F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Wall wall1 = new Wall((-16.0907F), (-328.0F), 2106.3188F, (-16.0907F), (-328.0F), (-970.035F));
      float float0 = (-1.0F);
      wall1.setLeftSideShininess((-1.0F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtEnd();
      float float1 = 1278.2247F;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wall2.setLeftSideShininess(1278.2247F);
      wall2.getWallAtEnd();
      Wall wall3 = wall0.getWallAtEnd();
      wall3.getPattern();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float float0 = new Float(1.0);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.containsWallStartAt(0.0F, (-1.0F), (-224.0F));
      wall1.getXStart();
      wall1.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.1285F);
      wall0.setYEnd((-2665.481F));
      wall0.intersectsRectangle(2022.0721F, 892.51306F, 2802.4854F, 2802.4854F);
      Wall.Property.values();
      Level level0 = new Level("x{'N.D", (-528.2F), (-3998.2163F), 0.0F);
      wall0.isAtLevel(level0);
      wall0.getXStart();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Wall wall0 = new Wall(1.0F, 2106.3188F, 2106.3188F, 2106.3188F, 0.2F, (-2367.759F));
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      Float float0 = new Float(0.01F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1636.7241F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-2821.91F), (-2821.91F), (-3274.9F), (-1039.0F), 2395.3884F, (-467.0F));
      Wall wall1 = wall0.clone();
      wall1.setThickness((-467.0F));
      wall1.getPoints();
      wall0.setXEnd((-467.0F));
      wall0.setYEnd((-246.32756F));
      wall1.containsWallEndAt((-2821.91F), (-533.7524F), (-246.32756F));
      wall1.addPropertyChangeListener((PropertyChangeListener) null);
      wall1.setYStart(2395.3884F);
      wall1.getLength();
      wall1.getYStart();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.setRightSideShininess((-3274.9F));
      linkedList0.toArray();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      wall0.getLevel();
      linkedList0.add(wall1);
      wall1.getHeightAtEnd();
      wall0.getArcExtent();
      Wall.clone(list1);
      wall0.getStartPointToEndPointDistance();
      wall1.getRightSideShininess();
      wall0.isAtLevel((Level) null);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, 2395.3884F, 2.0F, "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall1.setLeftSideTexture(homeTexture0);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.isTrapezoidal();
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), (-3886.468F));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = new Level("LEFT_SIDE_SHININESS", (-3886.468F), 0.0F, 0.0F);
      level1.setElevation(0.0F);
      level0.setFloorThickness(808.5F);
      Wall wall1 = new Wall((-3886.468F), (-1.0F), 0.0F, (-1262), 0.0F, (-1.0F));
      wall1.getLevel();
      wall0.isAtLevel((Level) null);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1053.4F), 0.0F, 0.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Q/|\"i#\"N2", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("2!E.;]ATXGyC", propertyChangeListener1);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("2!E.;]ATXGyC", "2!E.;]ATXGyC", object0, "2!E.;]ATXGyC");
      propertyChangeListenerProxy1.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy1);
      Integer integer0 = new Integer(33);
      wall0.setRightSideColor(integer0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setHeight((Float) null);
      wall1.setXStart((-1220.1086F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float.min(34.0F, 2.0F);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      Float float0 = new Float(0.009999999776482582);
      Wall wall2 = new Wall((-3889.6125F), (-4823.1436F), 0.1F, (-3603.0352F), (-4823.1436F));
      wall2.getLeftSideColor();
      wall0.getRightSideTexture();
      wall2.containsWallStartAt(0.0F, (-2834.74F), 645.33F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall((-687.9722F), 0.1F, (-687.9722F), 1.0F, 0.0F, 4214.82F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      wall0.containsWallStartAt((-1.0F), 0.0F, 1.0F);
      Integer integer2 = Integer.getInteger("LEFTSIDE_COLOR", integer1);
      wall0.setRightSideColor(integer0);
      wall0.setYStart(0.1F);
      wall0.getArcExtent();
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.clone();
      wall1.setLeftSideShininess((-860.43F));
      Wall wall2 = wall1.clone();
      wall0.getLeftSideTexture();
      wall1.getStartPointToEndPointDistance();
      wall0.setXEnd(0.9F);
      wall1.setRightSideColor(integer2);
      wall0.getXArcCircleCenter();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall2.setRightSideShininess((-343.5361F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall2.setPattern((TextureImage) null);
      wall1.setThickness(1.0F);
      wall2.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 3.0F, 0.0F, Float.NEGATIVE_INFINITY);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Wall wall1 = new Wall(0.0F, 3518.056F, 3518.056F, 0.01F, 0.01F);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("R!>:JfI5o2%qd?@6", "R!>:JfI5o2%qd?@6", wall1, propertyChangeListenerProxy0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness(0.01F);
      Float float0 = wall0.getHeight();
      wall0.getHeight();
      Float.sum((-99.17542F), Float.NEGATIVE_INFINITY);
      wall0.getLevel();
      Float.min(2.0F, 3.0F);
      wall0.getHeightAtEnd();
      wall1.getHeight();
      wall0.getPoints();
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(0.0F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float1 = new Float(1576.521011850527);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall0.setHeight(float2);
      wall1.setXStart(0.0F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Wall wall0 = new Wall((-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1.6000354F));
      Float.max((-756.6F), (-756.6F));
      wall0.setRightSideShininess((-756.6F));
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.setArcExtent(float0);
      wall0.getLength();
      wall0.setHeightAtEnd(float0);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.min(0.0F, (-3152.2988F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(1503.300048828125);
      wall1.setYEnd(0.0F);
      Wall wall2 = wall0.getWallAtStart();
      wall2.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall2.intersectsRectangle(0.11F, 0.01F, (-807.0F), 1806.236F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F));
      wall0.setWallAtEnd((Wall) null);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      Float.sum((-77.687454F), (-2665.481F));
      wall0.getLevel();
      Float.min((-2687.3F), (-0.26498887F));
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      wall0.setArcExtent((Float) null);
      wall0.containsWallEndAt(469.719F, (-2687.3F), 2126.14F);
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((double) 2126.14F);
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      Float float0 = new Float((-2665.7568F));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall0.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      wall0.setHeight(float1);
      wall0.getLevel();
      wall0.containsPoint(0.11F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1268.409F), 0.0F, (-879.34576F), 0.0F, 0.0F);
      Wall wall1 = new Wall((-1268.409F), (-1268.409F), (-1268.409F), 1.0F, (-1268.409F), 0.0F);
      wall1.getPoints();
      wall1.getLeftSideTexture();
      wall0.setXEnd(1515.398F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      wall0.getPoints();
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(757.699F);
      wall1.setYEnd(883.8374F);
      wall0.intersectsRectangle(0.0F, (-1.0F), 0.0F, (-1268.409F));
      Wall.Property.values();
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt((-879.34576F), (-1.0F), (-879.34576F));
      wall0.containsPoint(0.0F, 0.0F, (-879.34576F));
      wall1.getXArcCircleCenter();
      Float float0 = new Float((double) (-1268.409F));
      Float.isFinite((-1268.409F));
      wall1.setArcExtent(float0);
      wall0.setHeight(float0);
      wall1.getLevel();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F));
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.intersectsRectangle((-2024.089F), (-1910.612F), 1024.7F, (-0.26498887F));
      wall0.containsPoint(4212.1797F, (-0.26498887F), 745.1285F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) (-0.26498887F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      Wall wall1 = new Wall(1509.0F, 745.1285F, 2.0F, 1.0F, 0.0F);
      wall1.containsWallStartAt(2733.1274F, 2457.403F, (-224.0F));
      wall0.getLength();
      Float float1 = new Float(1378.5759F);
      wall0.setArcExtent(float1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.0091F);
      wall0.setYEnd((-2665.481F));
      wall0.intersectsRectangle(2022.0721F, 892.51306F, 2802.4854F, 2802.4854F);
      Wall.Property.values();
      Float float0 = new Float(1721.0F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-3998.2163F));
      wall0.setHeight(float2);
      Wall wall1 = wall0.clone();
      wall1.getLevel();
      wall1.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      wall0.containsWallStartAt(0.0F, 573.10944F, 0.0F);
      wall1.containsPoint((-1.0F), 0.0F, 0.0F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      wall1.setLevel((Level) null);
      wall1.getLeftSideColor();
      Wall wall2 = new Wall(0.0F, 0.0F, (-1421.2F), 1476.84F, (-1421.2F));
      wall2.containsWallStartAt(1.0F, 1892.0F, 822.0F);
      wall2.getRightSideTexture();
      wall1.containsWallStartAt(573.10944F, (-224.0F), 0.0F);
      wall2.getLength();
      Float float2 = new Float(0.0F);
      wall0.setArcExtent(float1);
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getXArcCircleCenter();
      Float.min((-277.2618F), (-277.2618F));
      wall1.setYEnd((-1.0F));
      Float float0 = new Float((-2665.7568F));
      wall0.intersectsRectangle(1.176187F, 1.176187F, (-2190.886F), 3207.6194F);
      Wall wall2 = wall0.getWallAtStart();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-1782.07F), (-1782.07F), (-1220.1086F), (-498.544F), (-1220.1086F), (-498.544F));
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall((-1782.07F), (-1782.07F), 0.0F, 1405.491F, 0.0F);
      wall2.setWallAtStart(wall0);
      wall0.setWallAtStart(wall2);
      wall2.intersectsRectangle(0.0F, 573.10944F, 573.10944F, (-1220.1086F));
      Float float0 = new Float(2218.0);
      wall0.getLeftSideColor();
      wall1.containsWallStartAt(631.9751F, 1795.1F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall((-687.9722F), 0.1F, (-687.9722F), 1.0F, 0.0F, 4214.82F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = Integer.getInteger("LEFT_SIDE_COLOR", integer1);
      wall0.setRightSideColor(integer0);
      wall0.setYStart((-2591.0F));
      wall0.getArcExtent();
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Wall wall2 = wall1.clone();
      wall1.setLeftSideShininess((-860.43F));
      wall0.getXEnd();
      Wall wall3 = wall1.clone();
      wall0.getLeftSideTexture();
      wall1.getStartPointToEndPointDistance();
      wall0.setXEnd(2592.0F);
      wall1.setRightSideColor(integer2);
      wall0.getXArcCircleCenter();
      wall3.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall2.getHeightAtEnd();
      Wall wall4 = new Wall((-687.9722F), 0.0F, 2592.0F, (-860.43F), (-860.43F));
      wall4.setYStart((-510.36578F));
      wall3.getPattern();
      wall3.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      float float0 = 0.1F;
      Float.min(1.0F, 0.1F);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall wall0 = new Wall((-2697.794F), 2458.5068F, 0.1F, 0.1F, 2458.5068F);
      wall0.setYEnd(1.0F);
      Float float1 = new Float((-1244.0F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(1076.8809F);
      float float3 = 1207.867F;
      float float4 = (-1.0F);
      // Undeclared exception!
      wall0.intersectsRectangle(float3, float3, float4, float0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      wall0.containsWallStartAt(0.0F, 573.10944F, 0.0F);
      wall1.containsPoint((-1.0F), 0.0F, 0.0F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      wall1.setLevel((Level) null);
      wall1.getLeftSideColor();
      wall1.containsWallStartAt((-768.1F), 0.0F, 2457.403F);
      wall1.setHeight(float1);
      wall0.getXArcCircleCenter();
      wall1.setHeight(float1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-1268.409F), 1.0F, 554.9713F, (-2665.481F), 0.0F);
      wall0.getRightSideTexture();
      Level level0 = new Level("PATTERN", 554.9713F, (-1268.409F), 1.0F);
      wall0.move((-1420.9282F), (-486.818F));
      level0.clone();
      wall0.setLevel(level0);
      Float float0 = new Float((double) 1.0F);
      wall0.getLevel();
      wall0.isTrapezoidal();
      Float float1 = new Float(554.9713F);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.0091F);
      wall0.setYEnd((-2665.481F));
      wall0.intersectsRectangle(2022.0721F, 892.51306F, 2802.4854F, 2802.4854F);
      Wall.Property.values();
      wall0.getLevel();
      Level level0 = new Level("x{'N.D", (-827.806F), (-3998.2163F), 0.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      Object object0 = new Object();
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "", object1, object0);
      Integer integer0 = new Integer(7);
      propertyChangeEvent0.setPropagationId(integer0);
      propertyChangeEvent0.toString();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getYArcCircleCenter();
      wall0.intersectsRectangle((-1.0F), 2192.4375F, (-1979.04F), 0.0F);
      wall0.getThickness();
      wall0.setXEnd(0.0F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1.6000354F));
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setPattern((TextureImage) null);
      wall0.setRightSideShininess(745.0091F);
      wall0.setYEnd((-2665.481F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.intersectsRectangle(892.51306F, (-636.0F), 0.01F, 745.0091F);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
      wall0.getLeftSideTexture();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1932.0F), (-1932.0F));
      Integer integer0 = new Integer((-1262));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((-1250.01624));
      wall0.getLevel();
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = Integer.getInteger("p$I5t%3]b", 1429);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(3296.149F, 3296.149F, (-21.44F), (-1520.189F), (-1520.189F));
      Float float0 = new Float((-21.44F));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float.min(0.0F, (-3152.2988F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float(1503.300048828125);
      wall1.setYEnd(0.0F);
      Float float1 = new Float(0.0F);
      Float.min(0.0F, (-3152.2988F));
      wall0.setArcExtent(float1);
      wall1.intersectsRectangle(114.0F, (-668.0F), (-689.89923F), Float.NEGATIVE_INFINITY);
      wall1.getWallAtStart();
      wall1.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setYEnd(0.01F);
      wall0.setXEnd((-1783.6385F));
      wall0.setWallAtEnd((Wall) null);
      wall0.setLevel((Level) null);
      wall0.setLeftSideShininess(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("vo<JL", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.move((-2665.481F), 0.1F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setXStart(0.0F);
      wall0.setXEnd(0.0F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(1564);
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint(384.0F, 0.01F, 1564);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1522.0F), (-1522.0F), (-1.0F));
      wall0.getRightSideShininess();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2546.6907F), (-1.0F), (-1.0F), 687.5919F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(")SV9Zo@8JpQOC!ASj", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall1 = new Wall((-1.0F), 1.0F, (-1.0F), 0.0F, 2877.776F, (-1.0F));
      wall0.getPoints();
      wall0.getLeftSideTexture();
      wall0.setXEnd(0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      wall1.setLeftSideShininess(971.0397F);
      wall1.getXEnd();
      Wall wall2 = wall1.clone();
      wall2.setXStart((-1262.0F));
      wall2.setXEnd(10.141504F);
      wall1.isTrapezoidal();
      Integer integer0 = new Integer(1564);
      Integer integer1 = new Integer(2144591999);
      wall1.setLeftSideColor(integer1);
      wall2.containsPoint(0.1F, (-1268.409F), 1.0F);
      wall2.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1932.0F), (-1932.0F));
      Integer integer0 = new Integer((-1262));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((-1250.01624));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = (-16.56834F);
      float float1 = 0.0F;
      Wall wall0 = new Wall((-16.56834F), 0.0F, (-1053.4F), 0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer(1167);
      wall0.getWallAtEnd();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, "2!E.;]ATXGyC", (Object) null, (Object) null);
      Object object0 = new Object();
      propertyChangeEvent0.setPropagationId(object0);
      propertyChangeEvent0.toString();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.getRightSideColor();
      PropertyChangeEvent propertyChangeEvent1 = null;
      try {
        propertyChangeEvent1 = new PropertyChangeEvent((Object) null, "java.beans.PropertyChangeEvent[propertyName=2!E.;]ATXGyC; oldValue=null; newValue=null; propagationId=java.lang.Object@412d7b14; source=1167]", integer0, propertyChangeEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint(0.0F, 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      wall0.setWallAtEnd(wall1);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      Level level0 = new Level("+,7@qgG2P<", (-288.7085F), 573.10944F, 0.0F);
      wall1.isAtLevel(level0);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-1220.6066F), (-1220.6066F), 0.0F, (-1220.6066F), (-1220.6066F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      wall1.setYEnd((-610.3033F));
      Float float0 = new Float((-1220.6066F));
      wall0.intersectsRectangle(0.0F, (-1220.6066F), 0.0F, 0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(1564);
      wall1.setLeftSideColor(integer0);
      wall1.containsPoint(0.1F, 384.0F, 573.10944F);
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1636.7241F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(0.0F, 0.0F, 573.10944F, 0.0F);
      wall0.isTrapezoidal();
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.isTrapezoidal();
      wall0.getYEnd();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideColor((Integer) null);
      wall0.isTrapezoidal();
      wall0.containsPoint(0.01F, (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      wall0.setYEnd(Float.NEGATIVE_INFINITY);
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(3100.1F);
      // Undeclared exception!
      try { 
        wall0.intersectsRectangle(Float.NEGATIVE_INFINITY, (-1523.1F), 3100.1F, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Wall wall0 = new Wall((-722.2F), 0.1F, (-722.2F), (-2693.8F), 0.0F);
      wall0.setXStart(0.1F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Level level0 = new Level("", 139.226F, 1866.4684F, (-2693.8F));
      Wall wall1 = wall0.clone();
      Level level1 = new Level("", 2942.6096F, 2.0F, 2942.6096F);
      wall0.setLevel(level1);
      wall0.setLevel(level0);
      Integer integer0 = new Integer(2922);
      Wall wall2 = wall0.clone();
      wall2.setRightSideShininess(5227.36F);
      wall2.getPattern();
      wall2.setPattern((TextureImage) null);
      Integer.min(2922, 4);
      wall0.setLeftSideColor(integer0);
      wall0.setHeight((Float) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      wall1.getArcExtent();
      Wall.Property.values();
      wall0.isTrapezoidal();
      Wall.clone(list0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-1.0F));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.containsWallStartAt(0.0F, (-1.0F), (-224.0F));
      wall1.getLength();
      Float float1 = new Float((-224.0F));
      wall0.setArcExtent(float1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.0091F);
      wall0.setYEnd((-2665.481F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.intersectsRectangle(892.51306F, (-636.0F), 0.01F, 745.0091F);
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(1396.1F, 706.0F, 2592.0F, 1396.1F, 706.0F, 2.0F);
      Float float0 = new Float(706.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-1220.1086F), 0.0F, 1806.236F, 0.0F, (-2893.9421F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-2893.9421F));
      wall1.setArcExtent(float1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.isTrapezoidal();
      wall0.containsPoint((-1243), 151.63F, (-1.0F));
      wall0.getYEnd();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.min(0.01F, (-3152.2988F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(1503.300048828125);
      wall1.setYEnd(0.0F);
      Float float2 = new Float(0.0F);
      wall0.setArcExtent(float2);
      Float float3 = new Float(0.0F);
      Float float4 = new Float(1.0F);
      wall0.setHeight(float0);
      wall0.getLevel();
      wall0.containsPoint(1.0F, 0.0F, (-108.0F));
      wall0.getYArcCircleCenter();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 0.0F);
      wall1.containsPoint((-1.0F), 0.0F, (-1220.1086F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.getLeftSideColor();
      wall1.containsWallStartAt((-768.1F), 0.0F, 2457.403F);
      wall1.setHeight(float1);
      wall0.getXArcCircleCenter();
      wall1.setHeight(float1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall((-23.69113F), (-23.69113F), (-23.69113F), (-23.69113F), (-23.69113F));
      wall0.setYStart((-23.69113F));
      wall0.setWallAtStart(wall0);
      Float float0 = new Float((-23.69113F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(2714.8389F);
      wall0.containsPoint(2714.8389F, 2196.0254F, (-2665.471F));
      Float float2 = wall0.getArcExtent();
      wall0.setHeightAtEnd(float2);
      wall0.getLeftSideTexture();
      wall0.getHeightAtEnd();
      wall0.getHeightAtEnd();
      Integer integer0 = new Integer((-3396));
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("temp", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2546.6907F), (-1.0F), (-1.0F), 687.5919F);
      Wall wall1 = new Wall((-1.0F), 1.0F, (-1.0F), 0.0F, 2877.776F, (-1.0F));
      wall0.getPoints();
      wall0.getLeftSideTexture();
      wall0.setXEnd((-1.0F));
      wall1.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      wall1.getPoints();
      wall1.getXArcCircleCenter();
      wall1.setRightSideShininess(2.0F);
      wall1.setYEnd(3895.0F);
      wall0.intersectsRectangle((-1.0F), (-1.0F), 1194.2484F, 3145.2756F);
      Wall.Property.values();
      wall1.getLevel();
      wall0.isAtLevel((Level) null);
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, (-438.405F), (-438.405F), 0.0F, (-1015.8F));
      wall0.getWallAtEnd();
      linkedList0.add((Wall) null);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.setYEnd((-3152.2988F));
      wall0.getHeight();
      Float.min(0.1F, (-882.07F));
      wall0.setArcExtent((Float) null);
      Float float0 = new Float((-2665.7568F));
      wall0.setArcExtent(float0);
      float float1 = 0.1F;
      // Undeclared exception!
      try { 
        wall0.containsWallEndAt((-2880.7092F), (-2880.7092F), (-2665.7568F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-2774));
      wall0.setXStart((-1.0F));
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint((-2774), (-2774), (-1.0F));
      Integer integer1 = new Integer((-2774));
      wall0.setLeftSideColor(integer0);
      Random.setNextRandom((-2774));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float float0 = new Float((-777.2521F));
      wall1.setArcExtent(float0);
      wall0.containsWallEndAt((-1220.1086F), 1564.3196F, (-1220.1086F));
      Wall wall2 = wall0.clone();
      wall2.getStartPointToEndPointDistance();
      Float float1 = new Float((double) 645.33F);
      Float float2 = new Float((double) (-1.0F));
      Float float3 = new Float(238.47715382);
      wall0.setHeightAtEnd(float3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall((-1268.409F), 1.0F, 554.9713F, (-2665.481F), 0.0F);
      wall0.getRightSideTexture();
      wall0.containsPoint((-1185.0F), 1.0F, 541.68176F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 1503.3F);
      Float.isFinite(2689.5706F);
      Float.valueOf((-2607.852F));
      Float.sum(1503.3F, 1.0F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(2467.0F);
      wall0.setHeight(float0);
      Float.max(945.6F, 1.0F);
      wall0.getLevel();
      wall0.containsPoint(7.0F, 0.0F, 1323.1375F);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), 2457.403F);
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = new Level("LEFT_SIDE_SHININESS", (-2367.759F), 0.0F, 0.0F);
      level0.setElevation((-1007.3F));
      level1.setFloorThickness((-1.0F));
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-486.818F), 1503.3F, 0.0F, (-508.427F), (-1.0F));
      wall0.getRightSideTexture();
      Level level0 = new Level((String) null, 3348.2627F, (-827.806F), (-1.0F));
      wall0.move(2.0F, 2.0F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.getLevel();
      wall0.isTrapezoidal();
      wall0.setXStart((-2303.3442F));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideColor((Integer) null);
      wall0.isTrapezoidal();
      wall0.containsPoint(0.01F, (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      Float float0 = new Float(0.01F);
      wall0.setHeightAtEnd(float0);
      wall0.setHeight(float0);
      Float float1 = new Float((double) 0.01F);
      wall0.getLength();
      Wall wall1 = wall0.clone();
      wall1.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall((-3866.2405F), 3228.428F, (-3866.2405F), (-1.0F), (-1.0F));
      wall0.setThickness((-3866.2405F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = new Wall(0.0F, 0.0F, (-1220.1086F), (-1220.1086F), 0.0F, 0.0F);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint(0.0F, 645.33F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall1.setArcExtent(float0);
      Float float1 = new Float((-1947.0F));
      Float float2 = new Float(573.10944F);
      wall0.setHeight(float0);
      wall1.getLevel();
      wall0.setXStart(0.0F);
      wall1.containsPoint((-2614.9465F), 0.0F, (-632.9944F));
      wall0.getYArcCircleCenter();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall0, "", "|MrVAvnO!}`a,bai", object0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall2 = new Wall(1.0F, (-1947.0F), 1229.3551F, 5122.387F, (-2614.9465F), (-1997.5844F));
      wall2.setHeightAtEnd(float2);
      wall1.getLength();
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideShininess(0.0F);
      wall0.move((-2665.481F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(745.1285F);
      wall0.setYEnd((-2665.481F));
      wall0.intersectsRectangle(2022.0721F, 892.51306F, 2802.4854F, 2802.4854F);
      Level level0 = new Level("", (-2665.481F), 2.0F, 0.0F);
      wall0.setLevel(level0);
      Wall.Property.values();
      wall0.getLevel();
      Level level1 = new Level("x{'N.D", (-528.2F), (-3998.2163F), 0.0F);
      level1.setElevation((-528.2F));
      level1.setFloorThickness((-2665.481F));
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getHeight();
      wall0.getHeight();
      Float float0 = new Float((-2665.7568F));
      Float.isFinite(500.639F);
      wall0.setArcExtent(float0);
      Float float1 = new Float((-2665.7568F));
      wall0.intersectsRectangle((-2665.7568F), 3258.4856F, 180.852F, 3258.4856F);
      wall0.getArcExtent();
      wall0.setHeightAtEnd(float1);
      wall0.getLevel();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(2105.638F, 758.1352F, 758.1352F, 573.10944F, 0.1F);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setYEnd((-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      Float float0 = new Float((-2665.7568F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(4508.04F, 4508.04F, 0.0F, (-1.0F), (-1393.6475F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float((-1.0F));
      wall1.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 133.5739F, 0.0F, 0.1F, 133.5739F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getYArcCircleCenter();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      Wall wall1 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((-777.2521F));
      Float.sum(2951.7046F, (-516.1036F));
      wall1.setArcExtent(float0);
      wall0.containsWallEndAt((-1220.1086F), 1564.3196F, (-1220.1086F));
      Wall wall2 = wall0.clone();
      wall2.getStartPointToEndPointDistance();
      Float float1 = new Float((double) 645.33F);
      Float float2 = new Float((double) (-1.0F));
      Float float3 = new Float(236.93894683634096);
      wall0.setHeightAtEnd(float3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((float) (-1262));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
      wall0.clone();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setHeight((Float) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1243));
      Float.min((-1243), (-5055.0F));
      wall0.setYEnd((-5055.0F));
      Float float0 = new Float(292.9F);
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt((-1276.2142F), 292.9F, 156.062F);
      wall0.intersectsRectangle((-5055.0F), 156.062F, (-5055.0F), (-149.24F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((float) (-1262));
      wall0.isTrapezoidal();
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), (-3886.468F));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      wall0.getLevel();
      Level level1 = new Level("LEFT_SIDE_SHININESS", (-3886.468F), 0.0F, 4912.786F);
      level1.setElevation(0.0F);
      level1.setFloorThickness((-1.0F));
      Wall wall1 = new Wall((-2367.759F), (-1.0F), 0.0F, (-1262), 0.0F);
      wall0.isAtLevel(level1);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("22NY!5MR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.22NY!5MR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float float0 = 1927.4719F;
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      wall0.setYEnd(2457.403F);
      wall0.setRightSideColor((Integer) null);
      Wall wall1 = new Wall((-1979.04F), (-16.932396F), 745.1285F, 1356.69F, (-1979.04F), 1.0F);
      wall0.setWallAtEnd(wall1);
      Float.sum(2.0F, 2457.403F);
      Wall wall2 = wall1.clone();
      wall2.getLevel();
      Float.min(2.0F, 2457.403F);
      wall2.getHeightAtEnd();
      wall2.getHeight();
      wall0.getPoints();
      Float float1 = new Float(2802.4854F);
      wall1.setArcExtent(float1);
      // Undeclared exception!
      wall1.containsWallEndAt(2802.4854F, 1927.4719F, 294.2F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.07524374F, 3.0F, 0.07524374F, Float.NEGATIVE_INFINITY);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.clone();
      wall0.setThickness(0.01F);
      Float float0 = wall0.getHeight();
      wall0.getHeight();
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.07524374F);
      wall0.containsPoint(3.0F, 0.01F, 3.0F);
      wall0.getArcExtent();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F);
      Integer integer0 = Integer.getInteger("Super class isn't cloneable", 1435);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float(2.0782909E-5F);
      wall0.setHeightAtEnd(float0);
      wall0.setHeight(float0);
      Float float1 = new Float(2.0782909E-5F);
      wall0.setHeightAtEnd(float0);
      wall0.setLeftSideColor((Integer) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(2801.128F, 2801.128F, 2801.128F, 2801.128F, 2801.128F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.containsWallEndAt(2801.128F, 2801.128F, 2801.128F);
      wall0.move(2801.128F, 0.01F);
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 195.9914F, (-1262.0F), 2063.915F);
      Wall wall1 = new Wall((-1262.0F), (-23.69113F), 0.01F, 2954.0F, (-2316.0527F));
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.getWallAtStart();
      Wall wall3 = wall2.clone();
      wall1.setWallAtStart(wall3);
      wall1.setLeftSideTexture((HomeTexture) null);
      wall3.clone();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1043.0F), 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer0 = new Integer((-15));
      Integer.compareUnsigned(0, 0);
      wall0.setRightSideColor(integer0);
      wall0.getRightSideShininess();
      wall0.containsPoint((-15), 1043.01F, (-1870.256F));
      wall0.intersectsRectangle(1043.01F, 0.0F, 1869.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall0.getPoints();
      Float float0 = wall1.getHeight();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.getPoints();
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(1323.24F, (-234.59468F), 573.10944F);
      wall1.getStartPointToEndPointDistance();
      Float float1 = new Float(0.0F);
      wall1.setRightSideShininess((-150.597F));
      wall1.setHeightAtEnd(float1);
      wall1.isTrapezoidal();
      wall0.getPoints();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1932.0F), (-1932.0F));
      Integer integer0 = new Integer((-1262));
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((-1250.01624));
      wall0.getLevel();
      wall0.isTrapezoidal();
      wall0.getLevel();
      Wall wall1 = new Wall((-825.806F), (-1262), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      wall0.setHeight(float0);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setLeftSideShininess(0.0F);
      wall0.clone();
      wall0.isTrapezoidal();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 3.0F, 0.0F, Float.NEGATIVE_INFINITY);
      Integer integer0 = new Integer((-1198));
      Wall wall1 = new Wall(1.0F, 1051.8157F, 0.0F, Float.NEGATIVE_INFINITY, 0.1F);
      wall1.setLeftSideColor(integer0);
      wall0.containsPoint((-1388.6F), 0.01F, (-1123.0F));
      Integer integer1 = new Integer(783);
      Wall wall2 = new Wall(2379.0151F, (-2678.83F), (-627.14F), (-1243), 0.1F, (-3459.4482F));
      wall2.setLeftSideColor(integer1);
      Integer integer2 = new Integer(783);
      wall2.setRightSideColor(integer2);
      wall2.getXStart();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F, 2800.4456F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getStartPointToEndPointDistance();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      wall0.setHeight(float0);
      Float float1 = new Float(1.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-1.0F));
      wall0.setArcExtent(float1);
      wall0.move(2.0F, 470.766F);
      wall0.getHeightAtEnd();
      wall0.getXEnd();
      wall0.setLeftSideShininess(2.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(3);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, "", float0, integer1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(propertyChangeListenerProxy0, "com.eteks.sweethome3d.model.TexturesCategory", wall0, "com.eteks.sweethome3d.model.TexturesCategory");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallEndAt((-1.0F), (-1.0F), (-1262));
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-1262));
      Level level0 = new Level("LEFT_SIDE_SHININESS", 2802.4854F, 0.0F, (-1262));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = wall0.getLevel();
      Level level2 = new Level("LEFT_SIDE_SHININESS", 2802.4854F, 0.0F, 2457.403F);
      level2.setElevation((-1.0F));
      wall0.getWallAtStart();
      wall0.isAtLevel(level1);
      Wall.Property.valueOf("LEFT_SIDE_SHININESS");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-510.36578F), (-485.818F), (-485.818F), (-1933.0F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall1);
      wall0.intersectsRectangle(1079.24F, (-1933.0F), 1079.24F, 1831.341F);
      wall0.containsPoint(1831.341F, 3183.9563F, 1831.341F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((-1338.4849));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall2 = wall0.clone();
      wall2.getLeftSideColor();
      wall1.getRightSideTexture();
      wall2.containsWallStartAt((-992.831F), 0.0F, (-255.18289F));
      wall0.getLength();
      Float float1 = new Float((-510.36578F));
      Wall wall3 = wall0.getWallAtStart();
      Float float2 = new Float(954.2287123724564);
      wall3.setArcExtent(float2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F), (-2665.481F));
      wall0.containsWallStartAt(4206.2134F, 4206.2134F, 4206.2134F);
      Wall wall1 = new Wall(1.0F, (-1.0F), (-1.0F), (-2665.481F), (-1088.0F), 1138.0F);
      wall1.containsWallStartAt((-1088.0F), (-1088.0F), (-5332.716F));
      wall0.containsPoint(1.0F, 536.9608F, (-2665.481F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float(2175.2);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float((double) 0.0F);
      Float.sum(0.0F, (-1.0F));
      wall0.setLevel((Level) null);
      wall1.getLeftSideColor();
      wall0.containsWallStartAt((-1415.389F), 1.0F, (-1.0F));
      wall0.setHeight(float1);
      Float float2 = new Float((-1415.389F));
      wall0.setHeight(float1);
      Wall.Property.values();
      wall0.getArcExtent();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      wall0.setHeight(float0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-340));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "gdsm70b", "gdsm70b", integer0);
      Integer integer1 = new Integer(7);
      Object object1 = new Object();
      propertyChangeEvent0.setPropagationId(object1);
      propertyChangeEvent0.toString();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("java.beans.PropertyChangeEvent[propertyName=gdsm70b; oldValue=gdsm70b; newValue=-340; propagationId=java.lang.Object@5b44a2e4; source=java.lang.Object@5ee96311]", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      Wall wall1 = wall0.clone();
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getYArcCircleCenter();
      wall0.intersectsRectangle(0.0F, 0.0F, 7, 0.0F);
      wall1.getThickness();
      wall1.setXEnd(7);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      wall0.containsWallEndAt((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      Wall wall1 = new Wall(0.0F, 0.0F, (-1267.409F), 2.0F, 0.0F, 0.01F);
      wall1.getPoints();
      wall1.getLeftSideTexture();
      wall0.setXEnd(2.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      wall1.getPoints();
      wall0.getXArcCircleCenter();
      Wall wall2 = new Wall(0.01F, (-1331.7405F), (-227.3223F), (-227.3223F), 0.0F);
      wall2.setRightSideShininess((-354.0F));
      wall2.setYEnd(0.01F);
      wall2.intersectsRectangle((-227.3223F), (-1.0F), 0.0F, 0.1F);
      Wall.Property.values();
      wall2.getLevel();
      wall2.isAtLevel((Level) null);
      wall1.setRightSideShininess(0.0F);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(1032.3103F, 1101.282F, 1101.282F, 684.79F, 684.79F, 0.01F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Float float0 = new Float(1.0E-10);
      Float.sum(0.01F, 684.79F);
      Float.sum(1032.3103F, 2341.0347F);
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideTexture();
      Integer integer0 = new Integer(552);
      Integer.max(5, 552);
      wall0.setYStart(3373.345F);
      wall0.setLeftSideColor(integer0);
      wall0.getRightSideShininess();
      wall0.isAtLevel((Level) null);
      wall0.getLevel();
      wall0.getLeftSideColor();
      wall0.getPoints();
      wall0.getStartPointToEndPointDistance();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Wall wall1 = new Wall((-1.0F), (-2851.532F), (-1.0F), 0.0F, 0.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      Wall wall2 = wall1.getWallAtStart();
      wall2.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall2.getXArcCircleCenter();
      Float.min((-74.279F), (-74.279F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-2087.699F));
      Float float1 = new Float((-1.0));
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall0.setHeight(float2);
      wall0.getLevel();
      wall1.setHeightAtEnd(float2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-23.69113F), (-23.69113F), (-23.69113F), (-23.69113F), (-23.69113F));
      wall0.setYStart((-23.69113F));
      wall0.setWallAtStart(wall0);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallEndAt((-1.0F), (-1262), (-1262));
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), (-1.0F));
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = new Level("", 4558.2935F, 0.0F, (-2367.759F));
      level1.setElevation((-1837.2592F));
      Level level2 = new Level("LEFT_SIDE_SHININESS", (-1.0F), 108.521F, 4218.03F);
      level2.setFloorThickness(580.584F);
      Wall wall1 = new Wall(4218.03F, 108.521F, 1.0F, (-1.0F), 4218.03F, (-1.6000354F));
      wall0.isAtLevel(level2);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      Float float1 = Float.valueOf(0.0F);
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall0.setHeight(float2);
      wall0.getLevel();
      wall0.containsPoint(0.11F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getXArcCircleCenter();
      Float.min(0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setYEnd(0.0F);
      wall0.getPoints();
      wall0.getWallAtStart();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = new Wall(0.0F, 0.0F, (-1220.1086F), (-1220.1086F), 0.0F, 0.0F);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint(0.0F, 645.33F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall1.setArcExtent(float0);
      Float float1 = new Float((-1947.0F));
      Float float2 = new Float(573.10944F);
      wall0.setHeight(float0);
      wall1.getLevel();
      wall0.setXStart(0.0F);
      wall1.containsPoint((-2614.9465F), 0.0F, (-632.9944F));
      wall0.getYArcCircleCenter();
      Wall wall2 = new Wall(1.0F, (-1947.0F), 1229.3551F, 5122.387F, (-2614.9465F), (-1997.5844F));
      wall2.setHeightAtEnd(float2);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall((-1979.04F), 2457.403F, 2457.403F, 1927.4719F, (-1979.04F));
      wall0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      Object object0 = new Object();
      wall0.setYEnd(2457.403F);
      wall0.setRightSideColor((Integer) null);
      Wall wall1 = new Wall(3318.583F, (-16.932396F), 745.1285F, 1356.69F, (-1979.04F), 1.0F);
      wall0.setWallAtEnd(wall1);
      wall0.intersectsRectangle(440.4378F, 440.4378F, (-77.4923F), 0.0F);
      Wall.Property.values();
      wall0.getLevel();
      Level level0 = new Level((String) null, 0.0F, 2802.4854F, (-77.4923F));
      level0.setFloorThickness((-77.4923F));
      Wall wall2 = new Wall(2457.403F, 645.33F, (-827.806F), 2802.4854F, (-1979.04F), (-2456.1917F));
      wall2.isAtLevel(level0);
      wall2.getYStart();
      wall2.getHeightAtEnd();
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      wall0.setWallAtStart(wall0);
      wall0.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 573.10944F);
      Integer integer0 = new Integer(187);
      wall0.setLeftSideColor(integer0);
      Float.isFinite(2198.814F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(2198.814F);
      wall0.setHeight(float0);
      wall0.getLevel();
      wall0.containsPoint(185.3116F, 0.0F, 1387.02F);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-2774));
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint((-2774), (-2774), (-1.0F));
      wall0.setLeftSideColor(integer0);
      Random.setNextRandom((-2774));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      Float float0 = new Float((-2665.7568F));
      wall0.setHeightAtEnd(float0);
      wall0.setHeight(float0);
      float float1 = new Float((-2665.7568F));
      Wall wall1 = wall0.clone();
      wall1.setHeightAtEnd(float0);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall((-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F), (-1.6000354F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1.6000354F));
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.setArcExtent(float0);
      wall0.getLength();
      wall0.setHeightAtEnd(float0);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall((-1749.3F), 0.026202975F, (-1749.3F), (-1445.9047F), 530.87F, 864.5182F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      wall0.getXArcCircleCenter();
      Float.min(864.5182F, 391.50412F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall2 = new Wall(391.50412F, 7.0F, 530.87F, 1.0F, 530.87F);
      wall2.setYEnd(1020.65576F);
      Float float0 = new Float((-1749.3F));
      Wall wall3 = wall1.clone();
      wall3.setArcExtent(float0);
      Float float1 = new Float(864.5182F);
      Wall wall4 = new Wall((-4261.0F), (-1445.9047F), (-1040.8595F), 0.0F, 0.1F);
      wall4.intersectsRectangle((-1445.9047F), 0.0F, (-1.0F), (-4261.0F));
      Wall wall5 = wall0.getWallAtStart();
      wall5.clone();
      wall5.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.containsWallStartAt((-1.0F), 2457.403F, 2457.403F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", (-1.0F), (-2367.759F), 2457.403F);
      wall0.setLevel(level0);
      wall0.getPoints();
      Wall.Property.values();
      Level level1 = new Level("LEFT_SIDE_SHININESS", (-2367.759F), 0.0F, 0.0F);
      level1.setElevation(0.0F);
      level1.setFloorThickness((-1.0F));
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 0.0F);
      wall1.containsPoint((-1.0F), 0.0F, (-1220.1086F));
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) 0.0F);
      Float.isFinite((-2404.931F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.0F);
      wall0.setHeight(float1);
      wall0.getLevel();
      wall0.containsPoint(0.11F, 0.0F, 0.0F);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall((-2665.481F), (-2665.481F), 0.01F, 0.01F, 0.01F);
      Wall wall1 = wall0.clone();
      wall0.containsWallStartAt((-2665.481F), 500.99734F, 0.1F);
      wall0.containsPoint(541.68176F, (-232.5312F), 1776.1757F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float((double) (-2665.481F));
      Float.isFinite((-1.0F));
      Float float1 = Float.valueOf((-508.427F));
      Float.sum(645.33F, 573.10944F);
      wall0.setArcExtent(float1);
      Float float2 = new Float((-1.0F));
      wall1.setHeight(float1);
      wall1.getLevel();
      wall0.containsPoint((-508.427F), (-2665.481F), 0.01F);
      wall0.getLeftSideShininess();
      wall0.containsWallEndAt((-1332.7355F), (-1.0F), (-467.0F));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall((-687.9722F), 0.1F, (-687.9722F), 1.0F, 0.0F, 4214.82F);
      wall0.containsWallEndAt(4214.82F, 1.0F, 0.1F);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = Integer.getInteger("LEFT_SIDE_COLOR", integer1);
      wall0.setRightSideColor(integer0);
      wall0.setYStart((-2591.0F));
      wall0.getArcExtent();
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.clone();
      wall1.setLeftSideShininess((-860.43F));
      wall0.getXEnd();
      Wall wall2 = wall1.clone();
      wall0.getLeftSideTexture();
      wall1.getStartPointToEndPointDistance();
      wall0.setXEnd(2592.0F);
      wall1.setRightSideColor(integer2);
      wall0.getXArcCircleCenter();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("LEFT_SIDE_COLOR", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall2.setRightSideShininess((-508.427F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall2.getLeftSideColor();
      wall2.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1243));
      Integer.toUnsignedLong(9978);
      wall0.setLeftSideColor(integer0);
      wall0.containsWallStartAt((-850.395F), (-224.0F), (-687.9722F));
      Float.isFinite((-224.0F));
      Float float0 = new Float(3318.583F);
      wall0.setHeight(float0);
      wall0.getXArcCircleCenter();
      wall0.getArcExtent();
      wall0.setHeight((Float) null);
      wall0.getYEnd();
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), (-1220.1086F), (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(645.33F, (-1220.1086F), 573.10944F, (-1220.1086F));
      Float float0 = new Float((-777.2521F));
      wall1.setArcExtent(float0);
      wall0.getHeightAtEnd();
      wall0.getHeight();
      wall1.getPoints();
      Float float1 = new Float((-1.0));
      Float float2 = new Float(993.21225882);
      wall1.setHeightAtEnd(float2);
      wall1.getLength();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = (-1932.0F);
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1932.0F), (-1932.0F));
      Integer integer0 = new Integer((-1262));
      wall0.containsPoint((-1.0F), (-1.0F), 3318.583F);
      wall0.getXArcCircleCenter();
      Float float1 = new Float(1488665.0996938348);
      float float2 = (-2404.931F);
      Float.isFinite((-2821.91F));
      wall0.setYEnd((-1932.0F));
      wall0.setArcExtent(float1);
      Float float3 = new Float((-1.0F));
      Float float4 = new Float((-2821.91F));
      wall0.setHeight(float4);
      wall0.getLevel();
      float float5 = (-108.0F);
      // Undeclared exception!
      wall0.containsPoint(float0, float5, float2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall(468.0F, 468.0F, 468.0F, 468.0F, 468.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.listIterator();
      wall0.intersectsRectangle(468.0F, 468.0F, 468.0F, 468.0F);
      List<Wall> list0 = new LinkedList<Wall>();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = new Wall(0.0F, 0.0F, (-1220.1086F), (-1220.1086F), 0.0F, 0.0F);
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt((-1220.1086F), 573.10944F, 645.33F);
      wall1.containsPoint((-1.0F), 0.0F, 645.33F);
      wall0.getXArcCircleCenter();
      Float float0 = new Float(1.0);
      Float.isFinite((-2404.931F));
      wall0.getArcExtent();
      Float.sum((-282.49F), (-282.49F));
      wall0.setArcExtent((Float) null);
      Float float1 = new Float(0.0F);
      wall0.setHeight(float1);
      wall0.getLevel();
      wall1.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2665.7568F));
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getYEnd();
      wall0.clone();
      Wall wall2 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall((-352.08194F), (-352.08194F), (-352.08194F), (-352.08194F), 1846.9979F, 1846.9979F);
      wall0.getLeftSideColor();
      Float float0 = new Float(1846.9979F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall((-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideShininess((-1387.4009F));
      wall0.setWallAtEnd(wall1);
      wall0.isTrapezoidal();
      wall0.containsPoint((-2665.7568F), (-2665.7568F), (-2665.7568F));
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Wall wall1 = new Wall(0.0F, 2826.27F, (-1208.076F), 0.0F, 0.01F, 928.89856F);
      Wall wall2 = wall1.clone();
      Wall wall3 = wall2.clone();
      wall1.setWallAtStart(wall3);
      Wall wall4 = new Wall(3551.7F, 0.01F, (-1.0F), 0.01F, (-1208.076F), 0.0F);
      wall3.setWallAtStart(wall4);
      wall0.getXArcCircleCenter();
      Float.min(2826.27F, (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall5 = wall2.clone();
      wall5.setWallAtStart(wall1);
      wall5.setYEnd(0.01F);
      Float float0 = new Float(3283.42F);
      Float float1 = new Float(2826.27F);
      wall1.setArcExtent(float1);
      Float float2 = new Float((-1028.3013F));
      wall1.intersectsRectangle((-1618.7706F), (-1.0F), (-2861.7F), (-1618.7706F));
      wall1.setHeightAtEnd(float2);
      wall3.getLevel();
      wall0.getPoints();
      wall3.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Wall wall0 = new Wall((-936.49F), (-936.49F), (-936.49F), (-1220.6066F), (-936.49F), (-1220.6066F));
      Wall wall1 = wall0.clone();
      wall1.move(0.01F, 2354.0579F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getXArcCircleCenter();
      Float.min((-1220.6066F), (-3152.299F));
      wall1.setYEnd((-936.49F));
      Float float0 = new Float((-936.49F));
      Float.isFinite((-3152.299F));
      wall0.setArcExtent(float0);
      Float float1 = new Float((-1220.6066F));
      wall0.intersectsRectangle((-936.49F), (-1220.6066F), (-936.49F), (-936.49F));
      wall1.getPoints();
      assertEquals(1417.5679F, wall1.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1220.1086F), 0.0F, (-1220.1086F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setRightSideShininess(745.1285F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      wall1.setYEnd(0.0F);
      wall1.intersectsRectangle(0.1F, (-2367.759F), (-1220.1086F), 0.0F);
      Level level0 = new Level("LEFT_SIDE_SHININESS", 892.51306F, (-2367.759F), (-1220.1086F));
      wall0.setLevel(level0);
      Wall.Property.values();
      wall0.getLevel();
      Level level1 = new Level("x{'N.D", (-528.2F), 2022.0721F, 0.0F);
      level0.setElevation(0.1F);
      level1.setFloorThickness(2022.0721F);
      Wall wall2 = wall1.getWallAtStart();
      boolean boolean0 = wall2.isAtLevel(level1);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.1086F), wall2.getYEnd(), 0.01F);
      assertFalse(boolean0);
  }
}
