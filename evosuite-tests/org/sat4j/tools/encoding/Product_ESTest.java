/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:54:07 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      IConstr iConstr0 = product0.addAtMostNonOpt((ISolver) null, iVecInt0, (-326));
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(solutionCounter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 0).when(solutionCounter0).nVars();
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(optToSatAdapter0);
      IConstr iConstr0 = product0.addExactly(minimal4CardinalityModel0, iVecInt0, 2811);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        product0.addExactlyOne(iSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        product0.addExactly(iSolver0, iVecInt0, 2811);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      try { 
        product0.addExactly(dimacsStringSolver0, (IVecInt) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt((ISolver) null, (IVecInt) null, 1990);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      IConstr iConstr0 = product0.addAtMostOne(dimacsOutputSolver0, iVecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      IConstr iConstr0 = product0.addAtMostNonOpt(dimacsOutputSolver0, iVecInt0, 3079);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      IConstr iConstr0 = product0.addAtMostNonOpt(clausalCardinalitiesDecorator0, iVecInt0, 0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        product0.addExactly(dimacsOutputSolver0, iVecInt0, (-2647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 2647
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      IConstr iConstr0 = product0.addExactlyOne(clausalCardinalitiesDecorator0, iVecInt0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }
}
