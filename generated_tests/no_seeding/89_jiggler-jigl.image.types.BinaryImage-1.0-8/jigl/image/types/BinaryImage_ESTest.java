/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:23:03 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 2668;
      RealGrayImage realGrayImage0 = new RealGrayImage(2668, 506);
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
      Byte byte0 = new Byte((byte) (-21));
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)14);
      Byte byte1 = new Byte((byte)14);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)14, (int) (byte)14, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.count();
      Byte byte0 = new Byte((byte)6);
      Byte.toUnsignedInt((byte)6);
      ROI rOI0 = new ROI();
      int int1 = 32767;
      rOI0.setROI(6, 1743, 6, 32767);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2245, 2245);
      binaryImage0.toString();
      Image image0 = new GrayImage(2245, 2245);
      // Undeclared exception!
      try { 
        binaryImage0.get(2245, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2245
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = binaryImage0.shift((-2), (byte)0);
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      Byte.toUnsignedLong((byte)0);
      binaryImage1.X();
      binaryImage3.difference(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage2.union(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(2668, 507);
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.get(2668, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage1.shift((-4394), (-4394));
      binaryImage2.toString();
      binaryImage1.compliment();
      binaryImage1.Y();
      int int0 = 8;
      int int1 = 2212;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 8);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.shift(1286, 1286);
      binaryImage0.toString();
      Integer integer0 = new Integer(1286);
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage1);
      binaryImage2.max();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage3.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-28);
      byte byte0 = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byte byte1 = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-23);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(3951, 3951, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.max();
      ROI rOI0 = new ROI();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1494, 1494);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-589.2733F), 7);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
      binaryImage0.count();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(3135, 0);
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(0, 0);
      BinaryImage binaryImage1 = new BinaryImage(magnitudeImage1);
      Byte byte0 = binaryImage1.max();
      binaryImage0.count();
      // Undeclared exception!
      try { 
        binaryImage0.set((-359), 0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -359
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      Byte byte0 = new Byte((byte) (-8));
      Byte byte1 = new Byte((byte) (-8));
      Byte byte2 = new Byte((byte) (-8));
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-8), 227, byte2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 227
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-17));
      Byte byte1 = new Byte((byte) (-17));
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-17), (int) (byte) (-17), byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-589.2733F), 7);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      // Undeclared exception!
      try { 
        binaryImage0.union((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2245, 2245);
      binaryImage0.toString();
      binaryImage0.copy();
      Byte byte0 = new Byte((byte)9);
      Byte byte1 = new Byte((byte)9);
      Byte byte2 = new Byte((byte)9);
      ROI rOI0 = new ROI();
      binaryImage0.get(20, 8);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.shift(16, 16);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.copy();
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.min();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.shift((-435), (-892));
      binaryImage0.copy();
      binaryImage0.toString();
      binaryImage1.X();
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.shift(1016, (byte)0);
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      BinaryImage binaryImage2 = new BinaryImage();
      binaryImage2.toString();
      binaryImage2.getJavaImage();
      Byte byte0 = new Byte((byte)16);
      BinaryImage binaryImage3 = new BinaryImage(1494, 1494);
      binaryImage0.X();
      BinaryImage binaryImage4 = binaryImage1.difference(binaryImage3);
      // Undeclared exception!
      try { 
        binaryImage3.intersection(binaryImage4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.X();
      Byte byte0 = new Byte((byte) (-17));
      // Undeclared exception!
      try { 
        binaryImage1.set(1177, 0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2245, 2245);
      binaryImage0.toString();
      binaryImage0.copy();
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.get((-1845), (-1845));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[1];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1, 2972, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2972
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      binaryImage2.toString();
      Byte byte1 = new Byte((byte)4);
      // Undeclared exception!
      try { 
        binaryImage1.set((int) (byte) (-61), 8, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      BinaryImage binaryImage2 = binaryImage0.shift(1287, (byte)5);
      binaryImage0.copy();
      binaryImage1.getJavaImage();
      binaryImage1.toString();
      binaryImage1.X();
      binaryImage2.difference(binaryImage0);
      binaryImage1.min();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[][] byteArray0 = new byte[6][0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1138, 1138);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(506, 2668, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-600.70184F), 7);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.max();
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage1.intersection((BinaryImage) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte byte0 = new Byte((byte) (-71));
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.count();
      Byte byte0 = new Byte((byte) (-127));
      Byte byte1 = new Byte((byte)34);
      Byte byte2 = new Byte((byte) (-4));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.get((-2658), (byte) (-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = binaryImage1.shift((byte)0, 0);
      binaryImage2.toString();
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage1);
      Byte.toUnsignedLong((byte)0);
      Integer integer0 = new Integer(0);
      binaryImage0.intersection(binaryImage3);
      binaryImage0.compliment();
      binaryImage0.max();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      int int0 = 98;
      binaryImage0.toString();
      int int1 = 255;
      binaryImage1.toString();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.shift((-3715), 0);
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ImageKernel imageKernel0 = new ImageKernel((byte)4, (byte)4);
      BinaryImage binaryImage1 = new BinaryImage(imageKernel0);
      binaryImage1.max();
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = new BinaryImage((byte)0, (byte)0);
      binaryImage1.X();
      // Undeclared exception!
      try { 
        binaryImage1.difference(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1132, 1132);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(3766, 3766, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2231, 2231);
      binaryImage0.toString();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      ROI rOI0 = new ROI();
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = binaryImage1.shift((byte)0, 0);
      binaryImage0.X();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage1.difference(binaryImage3);
      binaryImage2.Y();
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2668;
      RealGrayImage realGrayImage0 = new RealGrayImage(2668, 506);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = binaryImage0.shift(11, (byte)0);
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage2);
      Byte.toUnsignedLong((byte)0);
      binaryImage1.X();
      BinaryImage binaryImage4 = binaryImage3.difference(binaryImage0);
      binaryImage2.union(binaryImage1);
      binaryImage4.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2245;
      BinaryImage binaryImage0 = new BinaryImage(2245, 2245);
      binaryImage0.toString();
      binaryImage0.copy();
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      Byte byte0 = new Byte((byte)0);
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      binaryImage1.X();
      binaryImage1.difference(binaryImage2);
      // Undeclared exception!
      try { 
        binaryImage2.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byte byte1 = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.toString();
      binaryImage1.getJavaImage();
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-589.2733F), 7);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte) (-61), (byte) (-61), byteArray0[0]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[][] byteArray0 = new byte[20][0];
      byte[] byteArray1 = new byte[1];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-589.2733F), 7);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.max();
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = new BinaryImage(1494, 2965);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2965, binaryImage2.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      int int0 = binaryImage2.X();
      assertEquals(1494, int0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2965, binaryImage2.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage2);
      assertNotNull(binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2965, binaryImage2.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      
      // Undeclared exception!
      try { 
        binaryImage2.intersection(binaryImage3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-2947), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      Integer integer0 = new Integer((-25));
      assertEquals((-25), (int)integer0);
      assertNotNull(integer0);
      
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(3, imageKernel0.X());
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(3, imageKernel0.Y());
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(6.0F, imageKernel0.absSum(), 0.01F);
      
      BinaryImage binaryImage2 = new BinaryImage(imageKernel0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(3, imageKernel0.X());
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(3, imageKernel0.Y());
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(6.0F, imageKernel0.absSum(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(3, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      assertEquals(3, binaryImage2.count());
      
      String string1 = binaryImage1.toString();
      assertNotNull(string1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertTrue(string1.equals((Object)string0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      // Undeclared exception!
      try { 
        binaryImage2.difference(binaryImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.shift((-25), (-25));
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      int int0 = new Integer((-25));
      assertEquals((-25), int0);
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        binaryImage2.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage0);
      assertEquals(1494, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1494, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1494, binaryImage1.Y());
      assertEquals(1494, binaryImage1.X());
      
      // Undeclared exception!
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      BinaryImage binaryImage0 = new BinaryImage(0, 1298, byteArray0);
      assertNotNull(binaryImage0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-50), (byte) (-7), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1298, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift(8, Integer.MIN_VALUE);
      assertNotNull(binaryImage1);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-50), (byte) (-7), (byte)0}, byteArray0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1298, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1298, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(1536, 1536, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage1.set(1040, 1040, byte0, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      byte byte0 = (byte) (-47);
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte byte1 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)0;
      long long0 = Byte.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BinaryImage binaryImage0 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage0);
      assertEquals(1494, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1494, binaryImage0.X());
      
      binaryImage0.shift(1494, (-2191));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1138, 1138);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1138, interpolatedGrayImage0.X());
      assertEquals(1138, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      BinaryImage binaryImage0 = new BinaryImage(8, 1138);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(8, binaryImage0.X());
      assertEquals(1138, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(8, binaryImage0.X());
      assertEquals(1138, binaryImage0.Y());
      assertEquals(1138, binaryImage1.Y());
      assertEquals(8, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(2668, 506);
      assertNotNull(realGrayImage0);
      assertEquals(2668, realGrayImage0.X());
      assertEquals(506, realGrayImage0.Y());
      
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-108);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      
      Integer integer0 = new Integer(707);
      assertEquals(707, (int)integer0);
      assertNotNull(integer0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(8, binaryImage2.X());
      
      Byte byte0 = binaryImage2.max();
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(8, binaryImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, image0.X());
      assertEquals(1, image0.Y());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte)0, 0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(3, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(3, binaryImage3.X());
      assertEquals(1, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      long long0 = Byte.toUnsignedLong((byte)5);
      assertEquals(5L, long0);
      
      int int0 = binaryImage0.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      
      BinaryImage binaryImage4 = binaryImage1.union(binaryImage1);
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals(3, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(2, binaryImage4.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      BinaryImage binaryImage5 = binaryImage3.difference(binaryImage4);
      assertNotNull(binaryImage5);
      assertSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(3, binaryImage5.X());
      assertEquals(0, binaryImage5.count());
      assertEquals(1, binaryImage5.Y());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(3, binaryImage3.X());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(3, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-61);
      BinaryImage binaryImage0 = new BinaryImage((byte)0, (byte)0, byteArray0);
      assertNotNull(binaryImage0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.difference((BinaryImage) null);
      assertNotNull(binaryImage1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      String string1 = binaryImage2.toString();
      assertNotNull(string1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      int int0 = binaryImage1.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage3 = binaryImage1.difference(binaryImage2);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage3.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals(3, binaryImage3.count());
      
      BinaryImage binaryImage4 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(3, binaryImage4.X());
      assertEquals(3, binaryImage4.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, binaryImage4.Y());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte)0, 0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(3, binaryImage2.count());
      
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(3, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      
      long long0 = Byte.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      int int0 = binaryImage0.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      
      BinaryImage binaryImage4 = binaryImage3.difference(binaryImage0);
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(3, binaryImage4.X());
      
      BinaryImage binaryImage5 = binaryImage3.union(binaryImage4);
      assertNotNull(binaryImage5);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertSame(binaryImage5, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(3, binaryImage4.X());
      assertEquals(3, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      
      ImageProducer imageProducer1 = binaryImage3.getJavaImage();
      assertNotNull(imageProducer1);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals(1, byteArray0.length);
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      
      BinaryImage binaryImage6 = binaryImage4.intersection(binaryImage1);
      assertNotNull(binaryImage6);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage6);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage6);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage6);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage6, binaryImage2);
      assertSame(binaryImage6, binaryImage0);
      assertSame(binaryImage6, binaryImage1);
      assertSame(binaryImage6, binaryImage3);
      assertSame(binaryImage6, binaryImage4);
      assertSame(binaryImage6, binaryImage5);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(3, binaryImage4.X());
      assertEquals(0, binaryImage6.count());
      assertEquals(1, binaryImage6.Y());
      assertEquals(3, binaryImage6.X());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals((byte)1, (byte)binaryImage6.max());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.shift(2, 2);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage1.shift(6, (-3394));
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      Byte byte0 = binaryImage0.min();
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byte[][] byteArray0 = new byte[1][5];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)4;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(8, binaryImage0.X());
      assertEquals(8, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(8, binaryImage0.X());
      assertEquals(8, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(8, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(8, binaryImage1.count());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(8, binaryImage0.X());
      assertEquals(8, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(8, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(8, binaryImage1.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift((-25), (-25));
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift(2, 2);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      
      BinaryImage binaryImage2 = binaryImage1.shift(16, (-3380));
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      Byte byte0 = binaryImage0.min();
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      int int0 = 0;
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ROI rOI0 = new ROI(5029, 0, 5029, 1040);
      assertNotNull(rOI0);
      assertEquals(5029, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(5029, rOI0.lx());
      assertEquals(1040, rOI0.ly());
      assertEquals(1041, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      int int0 = (-435);
      Byte byte0 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(7, (-435));
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      long long0 = Byte.toUnsignedLong((byte) (-49));
      assertEquals(207L, long0);
      
      byte byte1 = (byte)19;
      Byte byte2 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      // Undeclared exception!
      try { 
        binaryImage2.set((-892), 2, byte2, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)0;
      byte byte0 = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)47;
      byteArray0[2] = byteArray3;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte) (-8), 0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(3, binaryImage2.X());
      
      int int0 = binaryImage0.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage3);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      
      BinaryImage binaryImage4 = binaryImage1.difference(binaryImage3);
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage4);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(3, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(3, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      
      int int1 = binaryImage2.Y();
      assertEquals(1, int1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage4);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(int1 == int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(3, binaryImage2.X());
      
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1494, binaryImage2.X());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      int int0 = binaryImage1.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertEquals(3, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      // Undeclared exception!
      try { 
        binaryImage2.set((-1726), 3, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1726
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift((byte)0, (byte)0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte)4);
      assertEquals(4L, long0);
      
      binaryImage1.set((int) (byte)0, (int) (byte)0, byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      assertEquals(3, binaryImage2.count());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      int int0 = binaryImage1.X();
      assertEquals(3, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage3 = binaryImage1.difference(binaryImage2);
      assertNotNull(binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(3, binaryImage3.count());
      assertEquals(3, binaryImage3.X());
      assertEquals(1, binaryImage3.Y());
      
      BinaryImage binaryImage4 = binaryImage1.intersection(binaryImage2);
      assertNotNull(binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(3, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(18.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-2.0F), imageKernel0.min(), 0.01F);
      assertEquals(12.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      
      BinaryImage binaryImage2 = new BinaryImage(imageKernel0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(18.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-2.0F), imageKernel0.min(), 0.01F);
      assertEquals(12.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, binaryImage2.X());
      assertEquals(3, binaryImage2.Y());
      assertEquals(6, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertEquals(18.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-2.0F), imageKernel0.min(), 0.01F);
      assertEquals(12.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, binaryImage2.X());
      assertEquals(3, binaryImage2.Y());
      assertEquals(6, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(6, binaryImage3.count());
      assertEquals(3, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(3, binaryImage3.X());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)12;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage4 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage4);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(3, binaryImage4.X());
      assertEquals(2, binaryImage4.count());
      
      BinaryImage binaryImage5 = binaryImage4.union(binaryImage2);
      assertNotNull(binaryImage5);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(3, binaryImage4.X());
      assertEquals(3, binaryImage4.count());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(3, binaryImage5.X());
      assertEquals(3, binaryImage5.count());
      assertEquals(1, binaryImage5.Y());
      assertEquals(18.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-2.0F), imageKernel0.min(), 0.01F);
      assertEquals(12.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, binaryImage2.X());
      assertEquals(3, binaryImage2.Y());
      assertEquals(6, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte)5, (byte) (-61));
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      
      BinaryImage binaryImage3 = binaryImage1.union(binaryImage0);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(3, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      long long0 = Byte.toUnsignedLong((byte)5);
      assertEquals(5L, long0);
      
      int int0 = binaryImage0.X();
      assertEquals(3, int0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage4 = new BinaryImage();
      assertNotNull(binaryImage4);
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      BinaryImage binaryImage5 = binaryImage4.union(binaryImage0);
      assertNotNull(binaryImage5);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(0, binaryImage5.X());
      assertEquals(0, binaryImage5.count());
      assertEquals(0, binaryImage5.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      BinaryImage binaryImage6 = binaryImage4.difference(binaryImage2);
      assertNotNull(binaryImage6);
      assertNotSame(binaryImage6, binaryImage1);
      assertNotSame(binaryImage6, binaryImage0);
      assertNotSame(binaryImage6, binaryImage2);
      assertNotSame(binaryImage6, binaryImage3);
      assertSame(binaryImage6, binaryImage4);
      assertSame(binaryImage6, binaryImage5);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage6);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage3);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(0, binaryImage6.Y());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(0, binaryImage6.count());
      assertEquals(0, binaryImage6.X());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      assertNotNull(binaryImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int1 = Byte.toUnsignedInt((byte)6);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      long long0 = Byte.toUnsignedLong((byte)6);
      assertEquals(6L, long0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      byte byte3 = (byte) (-1);
      long long1 = Byte.toUnsignedLong((byte) (-1));
      assertEquals(255L, long1);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        binaryImage1.set((int) (byte) (-1), (int) (byte) (-1), byte1, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      assertNotNull(binaryImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      BinaryImage binaryImage2 = binaryImage1.union(binaryImage0);
      assertNotNull(binaryImage2);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte byte0 = binaryImage0.min();
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage2 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      int int0 = binaryImage1.X();
      assertEquals(3, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage3 = binaryImage1.difference(binaryImage2);
      assertNotNull(binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(3, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(3, binaryImage3.X());
      assertEquals(3, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      BinaryImage binaryImage4 = binaryImage1.intersection(binaryImage2);
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1494, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1494, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(3, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byte byte0 = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte)0, 0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage2.Y());
      assertEquals(3, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(3, binaryImage3.X());
      assertEquals(2, binaryImage3.count());
      
      long long0 = Byte.toUnsignedLong((byte)5);
      assertEquals(5L, long0);
      
      // Undeclared exception!
      try { 
        binaryImage1.set((int) (byte)0, (-1415), (Byte) (byte)5, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1494, 1494);
      assertNotNull(binaryImage0);
      assertEquals(1494, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1494, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      binaryImage0.shift(1494, 1494);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(8, binaryImage0.count());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(8, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(8, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(8, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(8, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(8, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage2 = binaryImage0.shift((byte)93, 0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(3, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.Y());
      
      BinaryImage binaryImage3 = new BinaryImage(0, 0, byteArray1);
      assertNotNull(binaryImage3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift((-25), (-25));
      binaryImage1.toString();
      Integer integer0 = new Integer((-25));
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage2 = new BinaryImage(imageKernel0);
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage2.count();
      Byte byte0 = new Byte((byte) (-19));
      // Undeclared exception!
      try { 
        binaryImage3.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-589.2733F), 0);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      int int0 = binaryImage1.count();
      assertEquals(0, binaryImage1.X());
      assertEquals(0, int0);
      assertEquals(0, binaryImage1.Y());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      binaryImage1.compliment();
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift((-25), (-25));
      binaryImage1.toString();
      Integer integer0 = new Integer((-25));
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      Byte byte0 = new Byte((byte)11);
      // Undeclared exception!
      try { 
        binaryImage1.set((-1073741823), (-1554), byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      byte[][] byteArray0 = new byte[7][8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-37);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-111);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)88;
      byteArray2[6] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-111);
      byteArray3[1] = (byte) (-111);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)88;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-37);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-37);
      byteArray5[1] = (byte) (-37);
      byteArray5[2] = (byte) (-111);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte) (-111);
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)0;
      byteArray6[3] = (byte) (-37);
      byteArray6[4] = (byte) (-37);
      byteArray6[5] = (byte)0;
      byteArray6[6] = (byte) (-111);
      byteArray6[7] = (byte)88;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte) (-37);
      byteArray7[1] = (byte) (-37);
      byteArray7[2] = (byte) (-37);
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte)0;
      byteArray7[5] = (byte)0;
      byteArray7[6] = (byte)0;
      byteArray0[6] = byteArray7;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }
}
