[MASTER] 06:34:07.758 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 06:39:00.627 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_162_1550554740528/org/sat4j/core/VecInt_162_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_162_1550554740528/org/sat4j/core/VecInt_162_tmp__ESTest_scaffolding.java]]
[MASTER] 06:39:00.627 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 06:39:00.627 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 06:39:00.672 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 62
[MASTER] 06:39:00.672 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 72
[MASTER] 06:39:00.673 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_162_1550554740528/org/sat4j/core/VecInt_162_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 05:39:00 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.evosuite.runtime.EvoRunner;
11: import org.evosuite.runtime.EvoRunnerParameters;
12: import org.junit.runner.RunWith;
13: import org.sat4j.core.VecInt;
14: import org.sat4j.specs.IVecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_162_tmp__ESTest extends VecInt_162_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       int[] intArray0 = new int[8];
22:       int int0 = 1;
23:       VecInt vecInt0 = new VecInt(intArray0);
24:       assertNotNull(vecInt0);
25:       assertEquals(8, intArray0.length);
26:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
27:       assertEquals(8, vecInt0.size());
28:       assertEquals(0, vecInt0.last());
29:       assertFalse(vecInt0.isEmpty());
30:       
31:       VecInt vecInt1 = new VecInt(intArray0);
32:       assertNotNull(vecInt1);
33:       assertEquals(8, intArray0.length);
34:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
35:       assertEquals(8, vecInt1.size());
36:       assertEquals(0, vecInt1.last());
37:       assertFalse(vecInt1.isEmpty());
38:       assertTrue(vecInt1.equals((Object)vecInt0));
39:       
40:       boolean boolean0 = vecInt1.equals(vecInt0);
41:       assertTrue(boolean0);
42:       assertEquals(8, intArray0.length);
43:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
44:       assertEquals(8, vecInt0.size());
45:       assertEquals(0, vecInt0.last());
46:       assertFalse(vecInt0.isEmpty());
47:       assertEquals(8, vecInt1.size());
48:       assertEquals(0, vecInt1.last());
49:       assertFalse(vecInt1.isEmpty());
50:       assertTrue(vecInt0.equals((Object)vecInt1));
51:       assertTrue(vecInt1.equals((Object)vecInt0));
52:       assertNotSame(vecInt0, vecInt1);
53:       assertNotSame(vecInt1, vecInt0);
54:       
55:       VecInt vecInt2 = new VecInt(0, 0);
56:       assertNotNull(vecInt2);
57:       assertTrue(vecInt2.isEmpty());
58:       assertEquals(0, vecInt2.size());
59:       assertFalse(vecInt2.equals((Object)vecInt1));
60:       assertFalse(vecInt2.equals((Object)vecInt0));
61:       
62:       int int1 = VecInt.access$000(vecInt2);
63:       assertEquals(0, int1);
64:       assertTrue(vecInt2.isEmpty());
65:       assertEquals(0, vecInt2.size());
66:       assertFalse(vecInt2.equals((Object)vecInt1));
67:       assertFalse(vecInt2.equals((Object)vecInt0));
68:       assertFalse(int1 == int0);
69:       assertNotSame(vecInt2, vecInt1);
70:       assertNotSame(vecInt2, vecInt0);
71:       
72:       int[] intArray1 = VecInt.access$100(vecInt2);
73:       assertNotNull(intArray1);
74:       assertEquals(0, intArray1.length);
75:       assertArrayEquals(new int[] {}, intArray1);
76:       assertTrue(vecInt2.isEmpty());
77:       assertEquals(0, vecInt2.size());
78:       assertFalse(vecInt2.equals((Object)vecInt1));
79:       assertFalse(vecInt2.equals((Object)vecInt0));
80:       assertFalse(intArray1.equals((Object)intArray0));
81:       assertNotSame(vecInt2, vecInt1);
82:       assertNotSame(vecInt2, vecInt0);
83:       assertNotSame(intArray1, intArray0);
84:       
85:       int int2 = (-1787);
86:       int int3 = vecInt2.containsAt(int2, int0);
87:       assertEquals((-1), int3);
88:       assertTrue(vecInt2.isEmpty());
89:       assertEquals(0, vecInt2.size());
90:       assertFalse(int0 == int1);
91:       assertFalse(int0 == int2);
92:       assertFalse(vecInt2.equals((Object)vecInt1));
93:       assertFalse(vecInt2.equals((Object)vecInt0));
94:       assertFalse(int2 == int0);
95:       assertFalse(int2 == int1);
96:       assertFalse(int3 == int0);
97:       assertFalse(int3 == int1);
98:       assertFalse(int3 == int2);
99:       assertNotSame(vecInt2, vecInt1);
100:       assertNotSame(vecInt2, vecInt0);
101:       
102:       VecInt vecInt3 = new VecInt();
103:       assertNotNull(vecInt3);
104:       assertTrue(vecInt3.isEmpty());
105:       assertEquals(0, vecInt3.size());
106:       assertTrue(vecInt3.equals((Object)vecInt2));
107:       assertFalse(vecInt3.equals((Object)vecInt1));
108:       assertFalse(vecInt3.equals((Object)vecInt0));
109:       
110:       vecInt2.sortUnique();
111:       assertTrue(vecInt2.isEmpty());
112:       assertEquals(0, vecInt2.size());
113:       assertFalse(vecInt2.equals((Object)vecInt1));
114:       assertTrue(vecInt2.equals((Object)vecInt3));
115:       assertFalse(vecInt2.equals((Object)vecInt0));
116:       assertNotSame(vecInt2, vecInt1);
117:       assertNotSame(vecInt2, vecInt3);
118:       assertNotSame(vecInt2, vecInt0);
119:       
120:       VecInt vecInt4 = new VecInt();
121:       assertNotNull(vecInt4);
122:       assertEquals(0, vecInt4.size());
123:       assertTrue(vecInt4.isEmpty());
124:       assertFalse(vecInt4.equals((Object)vecInt0));
125:       assertFalse(vecInt4.equals((Object)vecInt1));
126:       assertTrue(vecInt4.equals((Object)vecInt3));
127:       assertTrue(vecInt4.equals((Object)vecInt2));
128:       
129:       vecInt0.copyTo((IVecInt) vecInt2);
130:       assertEquals(8, intArray0.length);
131:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
132:       assertEquals(8, vecInt0.size());
133:       assertEquals(0, vecInt0.last());
134:       assertFalse(vecInt0.isEmpty());
135:       assertEquals(0, vecInt2.last());
136:       assertEquals(8, vecInt2.size());
137:       assertFalse(vecInt2.isEmpty());
138:       assertFalse(intArray0.equals((Object)intArray1));
139:       assertTrue(vecInt0.equals((Object)vecInt2));
140:       assertFalse(vecInt0.equals((Object)vecInt3));
141:       assertFalse(vecInt0.equals((Object)vecInt4));
142:       assertTrue(vecInt0.equals((Object)vecInt1));
143:       assertFalse(vecInt2.equals((Object)vecInt4));
144:       assertTrue(vecInt2.equals((Object)vecInt1));
145:       assertTrue(vecInt2.equals((Object)vecInt0));
146:       assertFalse(vecInt2.equals((Object)vecInt3));
147:       assertNotSame(intArray0, intArray1);
148:       assertNotSame(vecInt0, vecInt1);
149:       assertNotSame(vecInt0, vecInt3);
150:       assertNotSame(vecInt0, vecInt4);
151:       assertNotSame(vecInt0, vecInt2);
152:       assertNotSame(vecInt2, vecInt4);
153:       assertNotSame(vecInt2, vecInt1);
154:       assertNotSame(vecInt2, vecInt3);
155:       assertNotSame(vecInt2, vecInt0);
156:       
157:       boolean boolean1 = vecInt0.isSubsetOf(vecInt3);
158:       assertTrue(boolean1);
159:       assertEquals(8, intArray0.length);
160:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
161:       assertEquals(8, vecInt0.size());
162:       assertEquals(0, vecInt0.last());
163:       assertFalse(vecInt0.isEmpty());
164:       assertTrue(vecInt3.isEmpty());
165:       assertEquals(0, vecInt3.size());
166:       assertFalse(intArray0.equals((Object)intArray1));
167:       assertTrue(vecInt0.equals((Object)vecInt2));
168:       assertFalse(vecInt0.equals((Object)vecInt3));
169:       assertFalse(vecInt0.equals((Object)vecInt4));
170:       assertTrue(vecInt0.equals((Object)vecInt1));
171:       assertFalse(vecInt3.equals((Object)vecInt2));
172:       assertFalse(vecInt3.equals((Object)vecInt1));
173:       assertFalse(vecInt3.equals((Object)vecInt0));
174:       assertTrue(vecInt3.equals((Object)vecInt4));
175:       assertTrue(boolean1 == boolean0);
176:       assertNotSame(intArray0, intArray1);
177:       assertNotSame(vecInt0, vecInt1);
178:       assertNotSame(vecInt0, vecInt3);
179:       assertNotSame(vecInt0, vecInt4);
180:       assertNotSame(vecInt0, vecInt2);
181:       assertNotSame(vecInt3, vecInt2);
182:       assertNotSame(vecInt3, vecInt4);
183:       assertNotSame(vecInt3, vecInt1);
184:       assertNotSame(vecInt3, vecInt0);
185:   }
186: }
RegularFileObject[/tmp/EvoSuite_162_1550554740528/org/sat4j/core/VecInt_162_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 05:39:00 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_162_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_162_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_162_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 06:39:00.675 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[8];
int int0 = 1;
VecInt vecInt0 = new VecInt(intArray0);
assertNotNull(vecInt0);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(8, vecInt0.size());
assertEquals(0, vecInt0.last());
assertFalse(vecInt0.isEmpty());

VecInt vecInt1 = new VecInt(intArray0);
assertNotNull(vecInt1);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(8, vecInt1.size());
assertEquals(0, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertTrue(vecInt1.equals((Object)vecInt0));

boolean boolean0 = vecInt1.equals(vecInt0);
assertTrue(boolean0);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(8, vecInt0.size());
assertEquals(0, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(8, vecInt1.size());
assertEquals(0, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt1.equals((Object)vecInt0));
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);

VecInt vecInt2 = new VecInt(0, 0);
assertNotNull(vecInt2);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));

int int1 = VecInt.access$000(vecInt2);
assertEquals(0, int1);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(int1 == int0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);

int[] intArray1 = VecInt.access$100(vecInt2);
assertNotNull(intArray1);
assertEquals(0, intArray1.length);
assertArrayEquals(new int[] {}, intArray1);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertNotSame(intArray1, intArray0);

int int2 = (-1787);
int int3 = vecInt2.containsAt(int2, int0);
assertEquals((-1), int3);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(int0 == int1);
assertFalse(int0 == int2);
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(int3 == int0);
assertFalse(int3 == int1);
assertFalse(int3 == int2);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);

VecInt vecInt3 = new VecInt();
assertNotNull(vecInt3);
assertTrue(vecInt3.isEmpty());
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt1));
assertFalse(vecInt3.equals((Object)vecInt0));

vecInt2.sortUnique();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt3));
assertFalse(vecInt2.equals((Object)vecInt0));
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt0);

VecInt vecInt4 = new VecInt();
assertNotNull(vecInt4);
assertEquals(0, vecInt4.size());
assertTrue(vecInt4.isEmpty());
assertFalse(vecInt4.equals((Object)vecInt0));
assertFalse(vecInt4.equals((Object)vecInt1));
assertTrue(vecInt4.equals((Object)vecInt3));
assertTrue(vecInt4.equals((Object)vecInt2));

vecInt0.copyTo((IVecInt) vecInt2);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(8, vecInt0.size());
assertEquals(0, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(0, vecInt2.last());
assertEquals(8, vecInt2.size());
assertFalse(vecInt2.isEmpty());
assertFalse(intArray0.equals((Object)intArray1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt0.equals((Object)vecInt3));
assertFalse(vecInt0.equals((Object)vecInt4));
assertTrue(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt4));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)vecInt3));
assertNotSame(intArray0, intArray1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt4);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt2, vecInt4);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt0);

boolean boolean1 = vecInt0.isSubsetOf(vecInt3);
assertTrue(boolean1);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(8, vecInt0.size());
assertEquals(0, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertTrue(vecInt3.isEmpty());
assertEquals(0, vecInt3.size());
assertFalse(intArray0.equals((Object)intArray1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt0.equals((Object)vecInt3));
assertFalse(vecInt0.equals((Object)vecInt4));
assertTrue(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt1));
assertFalse(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt4));
assertTrue(boolean1 == boolean0);
assertNotSame(intArray0, intArray1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt4);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt4);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, vecInt0);


