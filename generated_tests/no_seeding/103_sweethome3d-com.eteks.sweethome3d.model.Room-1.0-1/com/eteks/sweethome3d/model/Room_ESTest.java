/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:06:38 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(4184.5273F);
      room0.isAreaCenterPointAt(4184.5273F, 730.2F, 4184.5273F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(3973.3896F);
      room0.isAreaCenterPointAt(3931.7769F, (-3088.726F), 3931.7769F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.move((-1142.95F), (-1839.9F));
      room0.isAreaCenterPointAt((-1076.8179F), (-1839.9F), (-162.747F));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(0.0F);
      room0.isNameCenterPointAt(0.0F, 2345.89F, 2345.89F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1922.96F));
      room0.isNameCenterPointAt((-1922.96F), (-133.11617F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.move((-1623.5488F), 3931.7769F);
      room0.isNameCenterPointAt((-1312.9F), 1.0F, 2144836681);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 82.1075F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.getPointIndexAt(1630.2804F, 1.0F, (-872.827F));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      float[] floatArray1 = new float[8];
      floatArray1[1] = (-1.0F);
      float[] floatArray2 = new float[5];
      floatArray2[0] = (-1.0F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray2;
      Room room0 = new Room(floatArray0);
      room0.isClockwise();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-40.0F);
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[4] = floatArray0[1];
      Room room0 = new Room(floatArray0);
      room0.isClockwise();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[9];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.isAreaCenterPointAt((-1.0F), 2974.0F, 2959.1F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(3437.0F);
      room0.setAreaAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.removePoint(2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 1075.314F, 1);
      room0.setPoint(0.0F, 0.0F, 1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 3108.7126F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.setPoint(0, (-1.0F), 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(0.0F, (-40.0F), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(1372.348F, 2959.1F, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.addPoint(202.3F, 608.39734F);
      assertEquals(3, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(3781.937F);
      room0.setNameAngle((-360.9653F));
      assertEquals(3.4594462F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-332.2769F));
      assertEquals((-332.2769F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[6][1];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      room0.setName("");
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 422.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[1] = 2515.5F;
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 422.0F;
      floatArray4[1] = 2515.5F;
      floatArray0[4] = floatArray4;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      room0.move(1399.7F, 1399.7F);
      float float0 = room0.getYCenter();
      assertEquals(1399.7F, room0.getXCenter(), 0.01F);
      assertEquals(1399.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.move((-1142.95F), (-1839.9F));
      float float0 = room0.getYCenter();
      assertEquals((-1142.95F), room0.getXCenter(), 0.01F);
      assertEquals((-1839.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 82.1075F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(41.05375F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(1693.1692F, 1693.1692F, 1693.1692F);
      assertEquals(0, int0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F, false, false);
      room0.setNameStyle(textStyle0);
      TextStyle textStyle1 = room0.getNameStyle();
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle((-1003.832F), true, true);
      room0.setNameStyle(textStyle0);
      TextStyle textStyle1 = room0.getNameStyle();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertNotNull(textStyle1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      String string0 = room0.getName();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(string0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2143714258);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2145770799));
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(3.4594462F);
      float float0 = room0.getCeilingShininess();
      assertEquals(3.4594462F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-795.6297F));
      float float0 = room0.getCeilingShininess();
      assertEquals((-795.6297F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2862);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-1));
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-284.35828F));
      float float0 = room0.getAreaYOffset();
      assertEquals((-284.35828F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(3276.2466F);
      float float0 = room0.getAreaXOffset();
      assertEquals(3276.2466F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-284.35828F));
      float float0 = room0.getAreaAngle();
      assertEquals(4.6682477F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[6];
      floatArray1[1] = (-415.4647F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 2.0F;
      floatArray0[4] = floatArray3;
      floatArray0[5] = floatArray0[1];
      floatArray0[6] = floatArray0[1];
      floatArray0[7] = floatArray0[5];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint(1.0F, (-1.0F), 0.0F);
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      room0.clone();
      assertFalse(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[9];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 2077.5F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isCeilingVisible());
      assertNotSame(room1, room0);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      room0.clone();
      assertFalse(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      room0.clone();
      assertFalse(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.move((-1623.5488F), 3931.7769F);
      room0.clone();
      assertEquals(3931.7769F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(728.1885F);
      room0.clone();
      assertEquals(728.1885F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(355.849F);
      room0.clone();
      assertEquals(355.849F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(3781.937F);
      room0.clone();
      assertEquals(5.742642F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(3.9822972F);
      room0.clone();
      assertEquals(3.9822972F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-495.87F));
      room0.clone();
      assertEquals((-495.87F), room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(3.9822972F);
      room0.clone();
      assertEquals(3.9822972F, room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(1252.7504F);
      room0.clone();
      assertEquals(1252.7504F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-1521.1333F));
      room0.clone();
      assertEquals((-1521.1333F), room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(3931.7769F);
      room0.clone();
      assertEquals(3931.7769F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1102.43F));
      room0.clone();
      assertEquals((-1102.43F), room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(122.7216F);
      room0.clone();
      assertEquals(3.3410826F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoints((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1, 0.0F, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.move((-1348.4767F), (-1348.4767F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isClockwise();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt(0.0F, (-3875.8F), 1202522.6F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(4.525251F, 4.525251F, 4.525251F, 4.525251F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[][] floatArray0 = new float[6][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float[][] floatArray0 = new float[6][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.containsPoint(1.0F, 1.0F, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.intersectsRectangle(3781.937F, 899.0F, 3781.937F, 3781.937F);
      boolean boolean0 = room0.containsPoint(2653.9875F, 899.0F, (-2785.2952F));
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.addPoint(0.0F, 0.0F, 0);
      assertEquals(5, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      Room room0 = new Room(floatArray0);
      float[][] floatArray1 = room0.getPoints();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertNotSame(floatArray1, floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-1.0F));
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[][] floatArray0 = new float[10][2];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(1094.2458F, 1094.2458F, 1094.2458F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(2001.55F, 4389.9766F, 4389.9766F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt(0.0F, 55.151627F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt((-45.046986F), (-40.0F), (-45.046986F));
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }
}
