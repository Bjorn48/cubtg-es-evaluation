/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:36:42 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxWatchCard_ESTest extends MaxWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-27));
      IVecInt iVecInt0 = vecInt0.push(1275);
      iVecInt0.insertFirst((-27));
      int int0 = maxWatchCard0.getAssertionLevel(iVecInt0, 2149);
      assertEquals(27, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 638);
      iVecInt0.pop();
      int int0 = maxWatchCard0.getAssertionLevel(iVecInt0, (-1963));
      assertEquals((-638), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(2917, 1);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, false, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, true, 0);
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-795));
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-795), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-795));
      lits0.getFromPool(1);
      maxWatchCard0.getVocabulary();
      assertEquals((-795), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      lits0.nextFreeVarId(true);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 1963);
      maxWatchCard0.getVocabulary();
      assertEquals((-1963), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-2432));
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, true, (-1145));
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte) (-121), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 3);
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2441);
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, 2441);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2441
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew(solver0, lits0, readOnlyVecInt0, false, (-252));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, (ILits) null, vecInt0, true, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew(solver0, lits0, vecInt0, false, (-1963));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 5173);
      // Undeclared exception!
      try { 
        maxWatchCard0.getAssertionLevel((IVecInt) null, 5173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      lits0.ensurePool(9987);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 5173);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, readOnlyVecInt0, false, (-1772));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.pop();
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, 4314);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.unsafePush(2);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1501);
      maxWatchCard0.normalize();
      assertEquals((-1501), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 638);
      maxWatchCard0.toString((VarMapper) null);
      assertEquals(638, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 815);
      maxWatchCard0.assertConstraint((UnitPropagationListener) null);
      assertEquals(815, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
      maxWatchCard0.toString();
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1411);
      boolean boolean0 = maxWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals((-1411), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      maxWatchCard0.remove((UnitPropagationListener) null);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Constr constr0 = MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-1360));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 14);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-1034));
      maxWatchCard0.calcReason((-1034), vecInt0);
      assertEquals((-1034), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      VecInt vecInt0 = new VecInt(2, 0);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      MaxWatchCard.maxWatchCardNew(solver0, (ILits) null, vecInt0, false, 2);
      assertEquals(1, solver0.getPropagationLevel());
      
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, false, 0);
      assertEquals(2, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push(1);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, iVecInt0, true, 1);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(3255);
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 638);
      double double0 = maxWatchCard0.getActivity();
      assertEquals((-638), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, false, (-1880));
      maxWatchCard0.rescaleBy(1071.22431);
      assertEquals(1880, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-11));
      boolean boolean0 = maxWatchCard0.canBeSatisfiedByCountingLiterals();
      assertEquals(11, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 14);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((short)14, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2441);
      // Undeclared exception!
      try { 
        maxWatchCard0.register();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 611);
      maxWatchCard0.getCoef(611);
      assertEquals((-611), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.forwardActivity(0.0);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-331));
      maxWatchCard0.getVocabulary();
      assertEquals(331, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2441);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        maxWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1206);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1276);
      boolean boolean0 = maxWatchCard0.learnt();
      assertFalse(boolean0);
      assertEquals((-1276), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, (-534));
      maxWatchCard0.setActivity((-534));
      assertEquals(534, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 5173);
      // Undeclared exception!
      try { 
        maxWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
      boolean boolean0 = maxWatchCard0.locked();
      assertTrue(boolean0);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, (-892));
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(892, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-1530));
      // Undeclared exception!
      try { 
        maxWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
      boolean boolean0 = maxWatchCard0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-774));
      maxWatchCard0.size();
      assertEquals(774, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 3293);
      // Undeclared exception!
      try { 
        maxWatchCard0.get(3293);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3293
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-2858));
      // Undeclared exception!
      try { 
        maxWatchCard0.calcReasonOnTheFly((-3648), vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 15);
      Constr constr0 = maxWatchCard0.toConstraint();
      assertEquals(15, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
      maxWatchCard0.undo((-1));
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, false, 0);
      maxWatchCard0.incActivity(0);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1501);
      // Undeclared exception!
      try { 
        maxWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }
}
