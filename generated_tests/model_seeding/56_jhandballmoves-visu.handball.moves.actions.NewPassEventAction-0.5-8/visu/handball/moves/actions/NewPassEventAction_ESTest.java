/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:21:06 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Defender;
import visu.handball.moves.model.player.Offender;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewPassEventAction_ESTest extends NewPassEventAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NewPassEventAction newPassEventAction0 = null;
      try {
        newPassEventAction0 = new NewPassEventAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.NewPassEventAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Offender offender0 = new Offender(0, 0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      HandballModel.State handballModel_State1 = HandballModel.State.EDIT;
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(false).when(handballModel0).eventDefinedAfter(anyInt());
      doReturn(0).when(handballModel0).getAcutalSequenceNr();
      doReturn(offender0, offender0).when(handballModel0).getMarkedPlayer();
      doReturn(handballModel_State0, handballModel_State0, handballModel_State1).when(handballModel0).getState();
      doReturn(false).when(handballModel0).isGoalPassSet();
      doReturn(true).when(handballModel0).passEventDefined();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      offender0.setHasBall(true);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Offender offender0 = new Offender(0, 0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      HandballModel.State handballModel_State1 = HandballModel.State.EDIT;
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(false).when(handballModel0).eventDefinedAfter(anyInt());
      doReturn(0).when(handballModel0).getAcutalSequenceNr();
      doReturn(offender0, offender0, offender0, offender0).when(handballModel0).getMarkedPlayer();
      doReturn(handballModel_State0, handballModel_State0, handballModel_State1).when(handballModel0).getState();
      doReturn(true).when(handballModel0).hasPlayerBallInNextSequence(any(visu.handball.moves.model.player.Player.class));
      doReturn(false).when(handballModel0).isGoalPassSet();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Offender offender0 = new Offender(0, 0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      HandballModel.State handballModel_State1 = HandballModel.State.EDIT;
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(offender0, offender0, offender0, offender0).when(handballModel0).getMarkedPlayer();
      doReturn(handballModel_State0, handballModel_State0, handballModel_State1).when(handballModel0).getState();
      doReturn(true).when(handballModel0).hasPlayerBallInNextSequence(any(visu.handball.moves.model.player.Player.class));
      doReturn(true).when(handballModel0).isGoalPassSet();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Defender defender0 = new Defender((-644), 1208);
      defender0.setHasBall(true);
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn(defender0).when(moveEvent0).getPlayer();
      doReturn(4, 700, 4).when(moveEvent0).getSequenceNr();
      doReturn(true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Offender offender0 = new Offender(0, 0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      HandballModel.State handballModel_State1 = HandballModel.State.EDIT;
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(true).when(handballModel0).eventDefinedAfter(anyInt());
      doReturn(0).when(handballModel0).getAcutalSequenceNr();
      doReturn(offender0, offender0, offender0, offender0).when(handballModel0).getMarkedPlayer();
      doReturn(handballModel_State0, handballModel_State0, handballModel_State1).when(handballModel0).getState();
      doReturn(false).when(handballModel0).hasPlayerBallInNextSequence(any(visu.handball.moves.model.player.Player.class));
      doReturn(false).when(handballModel0).isGoalPassSet();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      offender0.setHasBall(true);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Offender offender0 = new Offender(0, 0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      HandballModel.State handballModel_State1 = HandballModel.State.EDIT;
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(offender0, offender0, (Player) null).when(handballModel0).getMarkedPlayer();
      doReturn(handballModel_State0, handballModel_State0, handballModel_State1).when(handballModel0).getState();
      doReturn(true).when(handballModel0).isGoalPassSet();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      offender0.setHasBall(true);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(moveEvent0).getPlayer();
      doReturn(0).when(moveEvent0).getSequenceNr();
      doReturn(true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Offender offender0 = new Offender(33, 33);
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(handballModel0).addListener(any(visu.handball.moves.model.HandballModelListener.class));
      doReturn(0).when(handballModel0).getAcutalSequenceNr();
      doReturn(offender0, offender0, offender0, (Player) null).when(handballModel0).getMarkedPlayer();
      doReturn(true).when(handballModel0).hasPlayerBallInNextSequence(any(visu.handball.moves.model.player.Player.class));
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(offender0.counter, (-1014), "~@=BT", (-1014), (-1014));
      // Undeclared exception!
      try { 
        newPassEventAction0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.model.MoveEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Defender defender0 = new Defender((-644), 1208);
      defender0.setHasBall(true);
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn(defender0).when(moveEvent0).getPlayer();
      doReturn(4, 4).when(moveEvent0).getSequenceNr();
      doReturn(true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, 1, ";ePt8/jJ4rg!nC\"[st", 0);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(HandballModel.State.EDIT_EVENT, handballModel0.getState());
      assertEquals(5, handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Defender defender0 = new Defender((-644), 1208);
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn(defender0).when(moveEvent0).getPlayer();
      doReturn(4, 4).when(moveEvent0).getSequenceNr();
      doReturn(true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, 1, ";ePt8/jJ4rg!nC\"[st", 0);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
      assertEquals(4, handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, 0, "");
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals("", actionEvent0.getActionCommand());
  }
}
