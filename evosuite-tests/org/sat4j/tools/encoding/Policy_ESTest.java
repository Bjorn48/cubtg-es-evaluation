/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:29:03 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      policy0.setExactlyOneEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getExactlyOneEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setAtMostOneEncoding((EncodingStrategyAdapter) commander0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertSame(encodingStrategyAdapter0, commander0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) policy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertSame(encodingStrategyAdapter0, policy0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      Ladder ladder0 = new Ladder();
      policy0.setAtLeastKEncoding((EncodingStrategyAdapter) ladder0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertSame(encodingStrategyAdapter0, ladder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(7);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(clausalCardinalitiesDecorator0, vecInt0, (-2898));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = policy0.addAtLeast(statisticsSolver0, vecInt0, 1000);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      try { 
        policy0.addExactly(iSolver0, iVecInt0, (-5001));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(29, 14);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      policy0.addExactly(dimacsStringSolver0, vecInt0, (-9));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsStringSolver0, vecInt0, 1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, vecInt0, (-224));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsStringSolver0, vecInt0, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Policy policy0 = new Policy();
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1953));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, eMARestarts0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactly(solver0, vecInt0, (-1953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2, 4138);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsStringSolver0, vecInt0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1953));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, eMARestarts0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1953);
      intArray0[1] = (-1953);
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      try { 
        policy0.addAtMost(solver0, readOnlyVecInt0, (-1953));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(7, 2);
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding(encodingStrategy0);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      // Undeclared exception!
      policy0.addAtMost(clausalCardinalitiesDecorator0, vecInt0, 3887);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(2, 2);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(lexicoDecorator0, vecInt0, (-509));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Policy policy0 = new Policy();
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1953));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, eMARestarts0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(solver0, readOnlyVecInt0, (-1953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(2, 4162);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      vecInt0.shrinkTo(4162);
      policy0.setAtMostKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(lexicoDecorator0, vecInt0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(13, 13);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      // Undeclared exception!
      policy0.addAtLeast(dimacsStringSolver0, vecInt0, 232);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, (IVecInt) null, (-287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(355);
      IVecInt iVecInt0 = vecInt0.pop();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, iVecInt0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(minimal4CardinalityModel0, iVecInt0, 186);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, arminRestarts0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(solver0, vecInt0, 827);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrink((-378));
      // Undeclared exception!
      try { 
        policy0.addAtLeast(dimacsStringSolver0, vecInt0, (-788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsStringSolver0, iVecInt0, 370);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(2);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, iVecInt0, 2536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      assertEquals(EncodingStrategy.NATIVE, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Commander commander0 = new Commander();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(commander0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binomial0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setAtLeastOneEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getAtLeastOneEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, solutionFoundListener0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(89);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, eMARestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      try { 
        policy0.addAtLeast(modelIteratorToSATAdapter0, iVecInt0, 89);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      policy0.addAtLeast(dimacsStringSolver0, iVecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne(lexicoDecorator0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      VecInt vecInt0 = new VecInt(2, 4162);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      policy0.addExactly(optToSatAdapter0, vecInt0, 2);
      assertEquals(2, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2, 4162);
      Policy policy0 = new Policy();
      IConstr iConstr0 = policy0.addExactly(dimacsStringSolver0, vecInt0, 1);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      VecInt vecInt0 = new VecInt(2, 4162);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly(optToSatAdapter0, vecInt0, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 2
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2, 1537);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtMost(dimacsStringSolver0, vecInt0, 1);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2, 4162);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtMostOne(dimacsStringSolver0, vecInt0);
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addAtLeast(dimacsStringSolver0, vecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(sequential0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Native, at most 1: Native, exactly K: Binomial, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) policy0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }
}
