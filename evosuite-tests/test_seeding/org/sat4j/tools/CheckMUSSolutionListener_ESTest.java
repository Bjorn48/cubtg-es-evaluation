/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:55:39 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckMUSSolutionListener_ESTest extends CheckMUSSolutionListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, vecInt0, checkMUSSolutionListener0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory1 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4InclusionModel0).when(aSolverFactory1).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener1 = new CheckMUSSolutionListener(aSolverFactory1);
      vecInt0.pop();
      checkMUSSolutionListener1.onSolutionFound((IVecInt) vecInt0);
      assertFalse(checkMUSSolutionListener1.equals((Object)checkMUSSolutionListener0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minOneDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(minOneDecorator0).isSatisfiable();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(statisticsSolver0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(negationDecorator0);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.push(2);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      assertEquals(1, vecInt0.size());
      
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(312);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0, dimacsStringSolver0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      checkMUSSolutionListener0.addOriginalClause(iVecInt0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SolverFactory solverFactory0 = SolverFactory.instance();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      vecInt0.push(0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, 125L, (SolutionFoundListener) null);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(1874, 1874);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      VecInt vecInt1 = new VecInt(48, 1);
      // Undeclared exception!
      checkMUSSolutionListener0.checkThatItIsAMUS(vecInt1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SolverFactory solverFactory0 = SolverFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      VecInt vecInt0 = new VecInt(37, 0);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      vecInt0.clear();
      IVecInt iVecInt0 = vecInt0.push(2);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-157));
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-1717));
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minOneDecorator0).isSatisfiable();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      checkMUSSolutionListener0.onSolutionFound((IVecInt) readOnlyVecInt0);
      assertTrue(readOnlyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      IVecInt iVecInt0 = VecInt.EMPTY;
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      checkMUSSolutionListener0.onSolutionFound(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minOneDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(minOneDecorator0).isSatisfiable();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1174.8095164893);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt1 = vecInt0.push(1);
      checkMUSSolutionListener0.addOriginalClause(iVecInt1);
      assertEquals(1, iVecInt1.size());
      
      iVecInt1.clear();
      iVecInt1.push(2);
      checkMUSSolutionListener0.addOriginalClause(iVecInt0);
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, 125L, (SolutionFoundListener) null);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0, modelIteratorToSATAdapter0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(48, 1);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
      assertFalse(boolean0);
      assertEquals(48, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(minOneDecorator0).model();
      doReturn(true).when(minOneDecorator0).isSatisfiable();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SolverFactory solverFactory0 = SolverFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      VecInt vecInt0 = new VecInt();
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      IVecInt iVecInt0 = vecInt0.push(1);
      IVecInt iVecInt1 = iVecInt0.push(2);
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SolverFactory solverFactory0 = SolverFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      checkMUSSolutionListener0.onUnsatTermination();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      int[] intArray0 = new int[1];
      checkMUSSolutionListener0.onSolutionFound(intArray0);
      assertEquals(1, intArray0.length);
  }
}
