/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 21:36:52 GMT 2019
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Scan;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.measures.RelativeAngle;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.snapshots.ScanSnapshot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Scan_ESTest extends Scan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(0.0, (-756.0));
      RelativeAngle relativeAngle0 = RelativeAngle.fromBygrees(1);
      AngleBracket angleBracket0 = AngleBracket.clockwiseFrom(absoluteAngle0, relativeAngle0);
      Vector vector0 = Vector.createCartesian(0.0, 0.0);
      Scan scan0 = new Scan(angleBracket0, 1, true, vector0, true, 1);
      ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor();
      scan0.accept(arenaObjectVisitorAdaptor0);
      assertFalse(scan0.isDead());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians(0.0);
      RelativeAngle relativeAngle0 = RelativeAngle.FULL_CIRCLE;
      AngleBracket angleBracket0 = AngleBracket.around(absoluteAngle0, relativeAngle0);
      Duration duration0 = Duration.ONE_CYCLE;
      Vector vector0 = absoluteAngle0.toVector(0.0);
      Scan scan0 = new Scan(angleBracket0, 0.0, true, vector0, true, (-421));
      scan0.update(duration0);
      scan0.update(duration0);
      scan0.update(duration0);
      assertTrue(scan0.isDead());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Scan scan0 = new Scan((AngleBracket) null, 0, true, (Vector) null, true, 0);
      ScanSnapshot scanSnapshot0 = (ScanSnapshot)scan0.createSpecificSnapshot();
      assertTrue(scanSnapshot0.isAccuracyAvailable());
      assertEquals(0.0, scanSnapshot0.getMaxDistance(), 0.01);
      assertEquals(0, scanSnapshot0.getAccuracy());
      assertTrue(scanSnapshot0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector vector0 = Vector.createCartesian(80.95087944516177, 80.95087944516177);
      Scan scan0 = new Scan((AngleBracket) null, 80.95087944516177, true, vector0, true, 15);
      // Undeclared exception!
      try { 
        scan0.accept((ArenaObjectVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Scan", e);
      }
  }
}
