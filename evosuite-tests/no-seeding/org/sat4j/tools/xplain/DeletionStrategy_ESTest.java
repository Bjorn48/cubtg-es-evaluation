/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:29:11 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(0, (-1212));
      IVecInt iVecInt0 = vecInt0.push(0);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-1249)).when(lexicoDecorator0).nVars();
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      LexicoDecorator<LexicoDecorator<Minimal4CardinalityModel>> lexicoDecorator1 = new LexicoDecorator<LexicoDecorator<Minimal4CardinalityModel>>(lexicoDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator1, (SolutionFoundListener) null);
      ModelIterator modelIterator0 = new ModelIterator(optToSatAdapter0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(lexicoDecorator1);
      deletionStrategy0.explain(modelIterator0, hashMap0, iVecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2493, 2493);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lexicoDecorator0).getLogPrefix();
      doReturn(true).when(lexicoDecorator0).isVerbose();
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain((ISolver) null, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(11);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      LexicoDecorator<Minimal4CardinalityModel>[] lexicoDecoratorArray0 = (LexicoDecorator<Minimal4CardinalityModel>[]) Array.newInstance(LexicoDecorator.class, 0);
      ManyCore<LexicoDecorator<Minimal4CardinalityModel>> manyCore0 = new ManyCore<LexicoDecorator<Minimal4CardinalityModel>>(lexicoDecoratorArray0);
      HashMap<Integer, MixedDataStructureDanielHT> hashMap0 = new HashMap<Integer, MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(manyCore0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2493, 2493);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(lexicoDecorator0).isVerbose();
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(11, 11);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lexicoDecorator0).getLogPrefix();
      doReturn(true).when(lexicoDecorator0).isVerbose();
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      VecInt vecInt1 = new VecInt(11);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(modelIterator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lexicoDecorator0).getLogPrefix();
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(lexicoDecorator0).isVerbose();
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "not needed.");
      IVecInt iVecInt0 = deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertEquals(Integer.MIN_VALUE, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1, (-1212));
      IVecInt iVecInt0 = vecInt0.push(0);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isVerbose();
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      LexicoDecorator<LexicoDecorator<Minimal4CardinalityModel>> lexicoDecorator1 = new LexicoDecorator<LexicoDecorator<Minimal4CardinalityModel>>(lexicoDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator1, (SolutionFoundListener) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      VecInt vecInt1 = new VecInt(4638);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(optToSatAdapter0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(11, 11);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = (LexicoDecorator<Minimal4CardinalityModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lexicoDecorator0).getLogPrefix();
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(lexicoDecorator0).isVerbose();
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
