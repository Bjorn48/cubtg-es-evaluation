/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:04:07 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.Minimal4InclusionModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnitClause_ESTest extends UnitClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      VecInt vecInt0 = new VecInt(620, (-3066));
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      unitClause0.calcReasonOnTheFly((-1), readOnlyVecInt0, vecInt0);
      assertEquals(621, readOnlyVecInt0.size());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-579.1412), 698.8570697975, 0.0, 2759);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4InclusionModel> basicLauncher0 = new BasicLauncher<Minimal4InclusionModel>(aSolverFactory0);
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, lubyRestarts0, basicLauncher0);
      UnitClause unitClause0 = new UnitClause(32);
      unitClause0.remove(solver0);
      assertFalse(unitClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(117);
      unitClause0.setActivity(117);
      assertEquals(117.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-1701.711175975512));
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(102);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, eMARestarts0);
      unitClause0.assertConstraintIfNeeded(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      unitClause0.activity = 1403.0;
      double double0 = unitClause0.getActivity();
      assertEquals(1403.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(5000);
      unitClause0.activity = (-1121.768736939);
      double double0 = unitClause0.getActivity();
      assertEquals((-1121.768736939), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      int int0 = unitClause0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-800));
      int int0 = unitClause0.get((-800));
      assertEquals((-800), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1547);
      // Undeclared exception!
      try { 
        unitClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2));
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      // Undeclared exception!
      try { 
        unitClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      // Undeclared exception!
      try { 
        unitClause0.calcReasonOnTheFly((-1), (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-27));
      // Undeclared exception!
      try { 
        unitClause0.calcReason((-1), (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(40);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        unitClause0.calcReason((-1), iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(827);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2066));
      SearchParams searchParams0 = new SearchParams((-506.63), (-506.63), (-506.63), (-2066));
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-2066));
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2065
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(901);
      UnitClause unitClause0 = new UnitClause(901);
      unitClause0.calcReason(901, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-320));
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-320));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts0);
      unitClause0.assertConstraint(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(901);
      String string0 = unitClause0.toString();
      assertEquals("-450", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(555);
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("(_qVl+oL4-");
      String string0 = unitClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("-277", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      // Undeclared exception!
      try { 
        unitClause0.get(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      int int0 = unitClause0.get((-367));
      assertEquals(957, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      boolean boolean0 = unitClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-889));
      // Undeclared exception!
      try { 
        unitClause0.propagate((UnitPropagationListener) null, (-889));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(433);
      boolean boolean0 = unitClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      unitClause0.register();
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(199);
      boolean boolean0 = unitClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        unitClause0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      VecInt vecInt0 = new VecInt();
      int int0 = unitClause0.getAssertionLevel(vecInt0, 957);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      // Undeclared exception!
      try { 
        unitClause0.rescaleBy(1403.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-477));
      IVecInt iVecInt0 = VecInt.EMPTY;
      unitClause0.calcReasonOnTheFly((-1397), iVecInt0, iVecInt0);
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-477));
      boolean boolean0 = unitClause0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-800));
      String string0 = unitClause0.toString((VarMapper) null);
      assertEquals("-400", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        unitClause0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1897));
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, arminRestarts0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1898
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2582);
      unitClause0.forwardActivity((-1.0));
      assertFalse(unitClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      unitClause0.incActivity((-1));
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      double double0 = unitClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(845);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        unitClause0.propagatePi(watcherBasedPrimeImplicantStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(957);
      boolean boolean0 = unitClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2489);
      int int0 = unitClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-27));
      int int0 = unitClause0.size();
      assertEquals(1, int0);
  }
}
