/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 20:06:26 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewPassEventAction_ESTest extends NewPassEventAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(player0).getCurrent_x();
      doReturn(1).when(player0).getCurrent_y();
      doReturn(1, 1, 2879, 2335).when(player0).getPlayerNumber();
      doReturn(true, false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 5608);
      handballModel0.addMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      ActionEvent actionEvent0 = new ActionEvent(handballModel0, 1, "Laufwege zeichnen...", 5608, 1);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(1, actionEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NewPassEventAction newPassEventAction0 = null;
      try {
        newPassEventAction0 = new NewPassEventAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.NewPassEventAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(3615, 210).when(player0).getCurrent_x();
      doReturn(2014, 1).when(player0).getCurrent_y();
      doReturn(1, 1, 2014, (-937)).when(player0).getPlayerNumber();
      doReturn(false, true, true, false, true).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-1776));
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      newPassEventAction0.modelChanged();
      newPassEventAction0.modelChanged();
      ActionEvent actionEvent0 = new ActionEvent(handballModel0, 2014, "", 1);
      newPassEventAction0.actionPerformed(actionEvent0);
      newPassEventAction0.actionPerformed(actionEvent0);
      handballModel0.setState(handballModel_State0);
      assertEquals((-1775), handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u<<P9{<[M,KHGHJr}B");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(player0).getCurrent_x();
      doReturn(1, 0).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      doReturn(true, false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 1);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.actionPerformed((ActionEvent) null);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertFalse(handballModel0.isBallSet());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-1), (String) null, 0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(0L, actionEvent0.getWhen());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertEquals(0, handballModel0.getAcutalSequenceNr());
  }
}
