* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 15575
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550371156884
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.17015706806282724
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.09004092769440655
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.07733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1968503937007874
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.0572987721691678
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
[MASTER] 03:40:04.789 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 285
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.23036649214659685
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.14051841746248295
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.12666666666666668
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.10150375939849623
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.28346456692913385
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2283464566929134
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09686221009549795
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 364
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2643979057591623
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16234652114597545
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.20266666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.11278195488721804
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2755905511811024
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11186903137789904
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 441
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 514
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.30715532286212915
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.208731241473397
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.23466666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13909774436090225
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13915416098226466
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 591
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
[MASTER] 03:40:27.073 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.ILogAble
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 669
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.32460732984293195
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22510231923601637
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.236
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23308270676691728
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5039370078740157
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.16098226466575716
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 749
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
[MASTER] 03:40:32.476 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.minisat.core.SearchParams
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 837
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2373806275579809
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24933333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23684210526315788
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.47244094488188976
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17326057298772168
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 918
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1002
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1079
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.34642233856893545
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24010914051841747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24933333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.24812030075187969
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5826771653543307
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.49606299212598426
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17598908594815826
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1161
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1242
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35602094240837695
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25102319236016374
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.268
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2593984962406015
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6299212598425197
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1869031377899045
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1324
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1408
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1502
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38219895287958117
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.26193724420190995
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2857142857142857
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7007874015748031
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2019099590723056
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1581
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1658
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1743
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.393542757417103
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2728512960436562
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2906666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.29699248120300753
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7637795275590551
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6456692913385826
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21418826739427013
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1824
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1919
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2011
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4118673647469459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.286493860845839
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.316
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3082706766917293
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2291950886766712
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2096
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2176
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.41535776614310643
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29058663028649384
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.31203007518796994
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8346456692913385
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.23465211459754434
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2274
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2371
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.418848167539267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2933151432469304
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32133333333333336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.32706766917293234
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7086614173228346
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.23874488403819918
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2459
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2540
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2627
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4406631762652705
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3096862210095498
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3308270676691729
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8740157480314961
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.25648021828103684
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2706
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.44153577661431065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2578444747612551
* Search finished after 124s and 30 generations, 55501 statements, best individual has fitness: 2404.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.44153577661431065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2578444747612551
* Minimizing test suite
[MASTER] 03:42:37.382 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 46%
* Total number of goals: 1146
* Number of covered goals: 524
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 733
* Number of covered goals: 228
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 36%
* Total number of goals: 750
* Number of covered goals: 270
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 266
* Number of covered goals: 89
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 127
* Number of covered goals: 117
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 72%
* Total number of goals: 127
* Number of covered goals: 92
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 733
* Number of covered goals: 189
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.44153577661431065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2578444747612551
* Generated 243 tests with total length 5332
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:43:29.611 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6701666666666667% of time used, but only 63/243 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.44153577661431065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2578444747612551
* Compiling and checking tests
[MASTER] 03:43:59.549 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 03:43:59.555 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 03:44:03.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:03.607 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
SearchParams searchParams0 = new SearchParams();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
LubyRestarts lubyRestarts0 = new LubyRestarts(1);
Random.setNextRandom(1);
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(32);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
PureOrder pureOrder0 = new PureOrder();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics1, mixedDataStructureDanielHT0, pureOrder0, lubyRestarts0);
ActivityLCDS activityLCDS0 = (ActivityLCDS)solver1.activity_based;
solver0.setLearnedConstraintsDeletionStrategy((LearnedConstraintsDeletionStrategy) activityLCDS0);

[MASTER] 03:44:03.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:03.935 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams((-522.1539861), 5);
searchParams0.getVarDecay();
searchParams0.getClaDecay();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
levelBasedVarOrderHeap0.getPhaseSelectionStrategy();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, (-145));
RestartStrategy restartStrategy0 = null;
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
int[] intArray0 = new int[5];
intArray0[0] = 5;
intArray0[1] = 5;
intArray0[2] = (-145);
intArray0[3] = 5;
intArray0[4] = 5;
VecInt vecInt0 = new VecInt(intArray0);
levelBasedVarOrderHeap0.addLevel((IVecInt) vecInt0);
solver0.verbose = true;
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 03:44:06.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:06.669 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams(0);
searchParams0.getConflictBoundIncFactor();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
naturalStaticOrder0.getPhaseSelectionStrategy();
LubyRestarts lubyRestarts0 = new LubyRestarts();
SearchParams searchParams1 = new SearchParams();
lubyRestarts0.onRestart();
PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams2 = new SearchParams();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams3 = new SearchParams();
MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
FileSystemHandling.createFolder((EvoSuiteFile) null);
Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, lubyRestarts0);
solver0.reset();
solver0.findModel();
assertEquals(1, solver0.nVars());


[MASTER] 03:44:07.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:07.637 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams(0);
searchParams0.getConflictBoundIncFactor();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
Constr constr0 = Constr.TAUTOLOGY;
double double0 = 1344.0;
constr0.incActivity(1344.0);
StringWriter stringWriter0 = new StringWriter();
PrintWriter printWriter0 = new PrintWriter(stringWriter0);
varOrderHeap0.printStat(printWriter0, "5XT[a");
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
solver0.printStat(printWriter0, "5XT[a");
solver0.reduceDB();

[MASTER] 03:44:12.895 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:12.896 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
SearchParams searchParams0 = new SearchParams();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams1 = new SearchParams();
PureOrder pureOrder0 = new PureOrder((-1));
pureOrder0.varDecayActivity();
ArminRestarts arminRestarts0 = new ArminRestarts();
arminRestarts0.reset();
arminRestarts0.shouldRestart();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, arminRestarts0);
PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, pureOrder0, arminRestarts0);
solver1.cancelUntilTrailLevel((-1));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax1, pureOrder0, arminRestarts0);
solver2.newVar((-1869));
assertEquals(1, solver2.realNumberOfVariables());

solver1.setLearner(percentLengthLearning0);
assertEquals(2147483, solver1.getTimeout());


[MASTER] 03:44:14.999 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 03:44:15.000 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
ArminRestarts arminRestarts0 = new ArminRestarts();
SearchParams searchParams0 = new SearchParams(500, 500, 1000.0, 500);
searchParams0.getInitConflictBound();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(500);
varOrderHeap0.setVarDecay(3822.0615);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, arminRestarts0);
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
solver0.isSatisfiable(false);
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(500);
ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
VarOrderHeap varOrderHeap1 = new VarOrderHeap();
LubyRestarts lubyRestarts0 = new LubyRestarts();
ILogAble iLogAble0 = ILogAble.CONSOLE;
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap1, lubyRestarts0, iLogAble0);
searchParams0.getVarDecay();
searchParams0.getClaDecay();
Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null);
SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(3, solver0.nVars());

solver1.isVerbose();
assertEquals(1, solver1.nVars());


[MASTER] 03:44:17.867 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:17.868 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(cardinalityDataStructureYanMax0).toString();
doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
FileSystemHandling.shouldAllThrowIOExceptions();
glucose21Restarts0.onBackjumpToRootLevel();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, glucose21Restarts0);
ILits iLits0 = solver0.voc;
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
SearchParams searchParams0 = new SearchParams();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams1 = new SearchParams();
MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning1, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, glucose21Restarts0);
solver1.findModel();
assertEquals(1, solver1.nVars());


[MASTER] 03:44:18.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:18.507 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
SearchParams searchParams0 = new SearchParams();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
searchParams0.setClaDecay(32);
Random.setNextRandom((-874));
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
ArminRestarts arminRestarts0 = new ArminRestarts();
lubyRestarts0.onBackjumpToRootLevel();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
clausalDataStructureWL0.getVocabulary();
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
solver0.getTimeoutMs();
MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, varOrderHeap0, arminRestarts0);
solver1.setExpectedNumberOfClauses((-1));
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
solver2.setLearnedConstraintsDeletionStrategy(solver1.age_based);

[MASTER] 03:44:19.754 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:19.755 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<ClausalDataStructureWL> learningStrategy0 = new FixedLengthLearning<ClausalDataStructureWL>();
Lits lits0 = new Lits();
ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
int int0 = 2;
SearchParams searchParams0 = new SearchParams((-1414.1340853236522), (-1414.1340853236522), (-1414.1340853236522), 2);
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log((String) null);
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
LubyRestarts lubyRestarts0 = new LubyRestarts();
ILogAble iLogAble0 = ILogAble.CONSOLE;
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
SearchParams searchParams1 = solver0.getSearchParams();
SearchParams searchParams2 = new SearchParams(32);
searchParams2.getVarDecay();
searchParams1.getClaDecay();
NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
solver1.setLearnedConstraintsDeletionStrategy(solver0.age_based);

[MASTER] 03:44:19.998 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 03:44:19.999 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams(0);
searchParams0.getConflictBoundIncFactor();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
RestartStrategy restartStrategy0 = null;
Constr constr0 = Constr.TAUTOLOGY;
constr0.incActivity(1344.0);
noLearningNoHeuristics0.claBumpActivity(constr0);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
solver0.reduceDB();

[MASTER] 03:44:20.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:20.772 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(",*>pu.? L:`Bi");
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams0).getClaDecay();
doReturn(0.0).when(searchParams0).getVarDecay();
doReturn((String) null).when(searchParams0).toString();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble1 = ILogAble.CONSOLE;
assertSame(iLogAble1, iLogAble0);
assertNotNull(iLogAble1);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble1);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertEquals(0.0, double0, 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

double double1 = searchParams1.getClaDecay();
assertEquals(0.0, double1, 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(9, solver0.nVars());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

int[] intArray0 = new int[0];
LearntWLClause learntWLClause0 = (LearntWLClause)solver1.addClauseOnTheFly(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(12, solver0.newVar());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertEquals(1, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(learntWLClause0.isSatisfied());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertTrue(learntWLClause0.learnt());
assertEquals(0, learntWLClause0.size());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(learntWLClause0.simplify());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble0, iLogAble1);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(learntWLClause0);
assertEquals(0, intArray0.length);

ActiveLearning<MixedDataStructureSingleWL> activeLearning1 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertNotNull(activeLearning1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(activeLearning1, mixedDataStructureSingleWL0, searchParams1, varOrderHeap0, lubyRestarts0);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(13, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(14, solver0.newVar());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

searchParams1.setConflictBoundIncFactor((-5911.759694114925));
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(15, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(16, solver0.newVar());
assertEquals(15, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

AtLeast atLeast0 = (AtLeast)solver2.addAtMostOnTheFly(intArray0, 2016);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertEquals((-2016), atLeast0.requiredNumberOfSatisfiedLiterals());
assertTrue(atLeast0.locked());
assertFalse(atLeast0.simplify());
assertFalse(atLeast0.learnt());
assertFalse(atLeast0.isSatisfied());
assertEquals(0, atLeast0.size());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(17, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(18, solver0.newVar());
assertEquals(17, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(atLeast0);
assertEquals(0, intArray0.length);


[MASTER] 03:44:21.056 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:21.058 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(979);
assertEquals(979, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int[] intArray0 = new int[8];
intArray0[0] = 1;
intArray0[1] = 1584;
intArray0[2] = 127;
intArray0[3] = 0;
intArray0[4] = 0;
intArray0[5] = 0;
intArray0[6] = (-1);
intArray0[7] = 1902;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(8, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 2);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(tabuListDecorator0);
assertEquals(8, intArray0.length);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertEquals(979, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(solver0);
assertEquals(8, intArray0.length);

solver0.setTimeout(1390);
assertEquals(979, percentLengthLearning0.getLimit());
assertEquals(1390, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertEquals(8, intArray0.length);


[MASTER] 03:44:22.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:22.095 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, (RestartStrategy) null);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver0.slistener = searchListener0;
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());

Lbool lbool0 = solver0.truthValue(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("U", lbool0.toString());
assertNotNull(lbool0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2610);
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

UnitClause unitClause0 = new UnitClause(0);
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertNotNull(unitClause0);

unitClause0.register();
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

int int1 = unitClause0.size();
assertEquals(1, int1);
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertFalse(int1 == int0);

unitClause0.remove(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.nVars());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

boolean boolean0 = solver1.enqueue(100, (Constr) unitClause0);
assertTrue(boolean0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());


[MASTER] 03:44:22.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:22.379 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = new SearchParams(32, 1.0E20, (-81.457), 32);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals((-81.457), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

lubyRestarts0.onRestart();
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(32);
assertEquals(32, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals((-81.457), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, percentLengthLearning1.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

double[] doubleArray0 = solver1.getVariableHeuristics();
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals((-81.457), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, percentLengthLearning1.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isVerbose());
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);

solver1.model(2);

[MASTER] 03:44:22.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 03:44:22.676 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(47);
assertEquals(47, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertEquals(47, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.addAtMost((IVecInt) null, 2703);

[MASTER] 03:44:23.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:23.022 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

VarOrderHeap varOrderHeap0 = null;
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.sat4j.minisat.core.Solver$2");
assertFalse(boolean0);

SearchParams searchParams0 = new SearchParams(500, 500, 1000.0, 500);
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(500.0, searchParams0.getClaDecay(), 0.01);
assertEquals(500.0, searchParams0.getVarDecay(), 0.01);
assertEquals(500, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(500, int0);
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(500.0, searchParams0.getClaDecay(), 0.01);
assertEquals(500.0, searchParams0.getVarDecay(), 0.01);
assertEquals(500, searchParams0.getInitConflictBound());

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

userFixedPhaseSelectionStrategy0.updateVarAtDecisionLevel(500);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap1 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

RestartStrategy restartStrategy0 = null;
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(500);
assertEquals(500, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap1, arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(500.0, searchParams0.getClaDecay(), 0.01);
assertEquals(500.0, searchParams0.getVarDecay(), 0.01);
assertEquals(500, searchParams0.getInitConflictBound());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(500, percentLengthLearning0.getLimit());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

boolean boolean1 = solver0.isSatisfiable(true);
assertTrue(boolean1);
assertEquals(500L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(500.0, searchParams0.getClaDecay(), 0.01);
assertEquals(500.0, searchParams0.getVarDecay(), 0.01);
assertEquals(500, searchParams0.getInitConflictBound());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(500, percentLengthLearning0.getLimit());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(boolean1 == boolean0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

solver0.setTimeoutOnConflicts(100);
assertEquals(500L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(500.0, searchParams0.getClaDecay(), 0.01);
assertEquals(500.0, searchParams0.getVarDecay(), 0.01);
assertEquals(500, searchParams0.getInitConflictBound());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(500, percentLengthLearning0.getLimit());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());

solver0.toString("org.sat4j.minisat.core.Solver$2");

[MASTER] 03:44:23.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:23.387 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Constr constr0 = Constr.TAUTOLOGY;
assertNotNull(constr0);

double double1 = 1344.0;
constr0.incActivity(1344.0);
StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

PrintWriter printWriter0 = new PrintWriter(stringWriter0);
assertEquals("", stringWriter0.toString());
assertNotNull(printWriter0);

String string0 = "\\XT[";
varOrderHeap0.printStat(printWriter0, "XT[");
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("XT[non guided choices\t: 0\n", stringWriter0.toString());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

solver0.discardCurrentModel();

[MASTER] 03:44:23.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:23.730 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[8];
intArray0[0] = 1;
intArray0[1] = 1584;
intArray0[2] = 127;
intArray0[3] = 0;
intArray0[4] = 0;
intArray0[5] = 0;
intArray0[6] = (-1);
intArray0[7] = 1902;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(8, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 2);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(tabuListDecorator0);
assertEquals(8, intArray0.length);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, tabuListDecorator0, (RestartStrategy) null);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(solver0);
assertEquals(8, intArray0.length);

solver0.clearLearntClauses();
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertEquals(8, intArray0.length);


[MASTER] 03:44:24.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:24.178 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Random.setNextRandom((-874));
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

String string0 = searchParams0.toString();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(string0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

long long0 = solver0.getTimeoutMs();
assertEquals(2147483647L, long0);
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, varOrderHeap0, arminRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver1);

solver1.setExpectedNumberOfClauses((-1));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());


[MASTER] 03:44:24.945 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:24.957 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[8];
intArray0[0] = 1;
intArray0[1] = 1584;
intArray0[2] = 127;
intArray0[3] = 0;
intArray0[4] = 0;
intArray0[5] = 0;
intArray0[6] = (-1);
intArray0[7] = 1902;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(8, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 2);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(tabuListDecorator0);
assertEquals(8, intArray0.length);

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(mixedDataStructureSingleWL0).toString();
doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
IOrder iOrder0 = mock(IOrder.class, new ViolatedAssumptionAnswer());
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, iOrder0, miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(solver0);

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0, percentLengthLearning0.getLimit());
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertNotNull(miniSATRestarts1);

SearchParams searchParams0 = new SearchParams(0, 0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertNotNull(solverStats0);

miniSATRestarts1.init(searchParams0, solverStats0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, percentLengthLearning0.getLimit());
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);

miniSATRestarts0.onRestart();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertSame(miniSATRestarts0, miniSATRestarts1);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, miniSATRestarts1);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, percentLengthLearning0.getLimit());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertNotNull(solver1);
assertEquals(8, intArray0.length);

Map<String, Number> map0 = solver1.getStat();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(map0.isEmpty());
assertEquals(17, map0.size());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, percentLengthLearning0.getLimit());
assertArrayEquals(new int[] {1, 1584, 127, 0, 0, 0, (-1), 1902}, intArray0);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertNotNull(map0);
assertEquals(8, intArray0.length);


[MASTER] 03:44:25.487 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:25.504 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn((-1682.29772406)).when(searchParams0).getVarDecay();
doReturn("").when(searchParams0).toString();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals((-1682.29772406), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams0);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertEquals((-1682.29772406), double0, 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals((-1682.29772406), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

String string0 = lubyRestarts0.toString();
assertEquals("luby style (SATZ_rand, TiniSAT) restarts strategy with factor 32", string0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(string0);

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);

negativeLiteralSelectionStrategy0.assignLiteral((-24));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(varOrderHeap1);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-24));
assertEquals((-24), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(varOrderHeap0, varOrderHeap1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);

SearchParams searchParams2 = new SearchParams(1.0E20, 1.0E20, 0.0, 32);
assertEquals(1.0E20, searchParams2.getClaDecay(), 0.01);
assertEquals(1.0E20, searchParams2.getVarDecay(), 0.01);
assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams2.getInitConflictBound());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertNotNull(searchParams2);

lubyRestarts1.onRestart();
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts1);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals((-1682.29772406), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-24), fixedLengthLearning0.getMaxLength());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertFalse(searchParams1.equals((Object)searchParams2));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

IVecInt[] iVecIntArray0 = new IVecInt[7];
PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-580));
assertEquals((-580), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.assignLiteral(3641);

[MASTER] 03:44:25.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:25.984 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertNotNull(clauseOnlyLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.unsatExplanation();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(iVecInt0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(1411);
assertEquals(1411, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1411, percentLengthLearning0.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.dimacs2internal((IVecInt) null);

[MASTER] 03:44:26.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:26.344 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(varOrderHeap1);

double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, varOrderHeap1, lubyRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

VecInt vecInt0 = (VecInt)solver0.createBlockingClauseForCurrentModel();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(9, solver0.nVars());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(varOrderHeap0, varOrderHeap1);
assertNotNull(vecInt0);

Lits lits0 = (Lits)clausalDataStructureWL1.getVocabulary();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(lits0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");

[MASTER] 03:44:26.747 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:26.758 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

pureOrder0.updateVarAtDecisionLevel(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, (RestartStrategy) null);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver0.slistener = searchListener0;
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());

Lbool lbool0 = solver0.truthValue(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("U", lbool0.toString());
assertNotNull(lbool0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2610);
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

UnitClause unitClause0 = new UnitClause(0);
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertNotNull(unitClause0);

unitClause0.register();
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

int int1 = unitClause0.size();
assertEquals(1, int1);
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertFalse(int1 == int0);

UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
doReturn(0, 1).when(unitPropagationListener0).getPropagationLevel();
unitClause0.remove(unitPropagationListener0);
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

boolean boolean0 = solver1.enqueue(100, (Constr) unitClause0);
assertTrue(boolean0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2610, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, (RestartStrategy) null);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertNotNull(solver2);

solver2.record(unitClause0);

[MASTER] 03:44:27.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 03:44:27.074 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

pureOrder0.varDecayActivity();
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = new SearchParams(1.0E20, 1.0E20, 1.0E20, 32);
assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

cardinalityDataStructure0.conflictDetectedInWatchesFor(2147483, 0);
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

SearchParams searchParams1 = new SearchParams((-189));
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-189), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.0E20, double0, 0.01);
assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0, (ILogAble) null);
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0E20, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(1.0E20, searchParams0.getClaDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver2.equals((Object)solver1));
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);


[MASTER] 03:44:27.418 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:27.431 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

arminRestarts0.reset();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams1, varOrderHeap0, arminRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(solver0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(iLits0);

ILits iLits1 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits1.realnVars());
assertEquals(0, iLits1.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertSame(iLits1, iLits0);
assertNotNull(iLits1);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap0, arminRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(solver1);

solver1.decayActivities();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotSame(searchParams1, searchParams0);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.updateVar((-1211));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

naturalStaticOrder0.updateVarAtDecisionLevel(123);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, naturalStaticOrder0, arminRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(solver2);

VecInt vecInt0 = (VecInt)solver1.implied;
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

solver2.isSatisfiable((IVecInt) vecInt0);

[MASTER] 03:44:27.984 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:28.035 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertNotNull(activeLearning1);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams0).getClaDecay();
doReturn(0.0, 0.0).when(searchParams0).getVarDecay();
doReturn((String) null, (String) null).when(searchParams0).toString();
VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(varOrderHeap1);

LubyRestarts lubyRestarts2 = new LubyRestarts();
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts2);

ILogAble iLogAble1 = ILogAble.CONSOLE;
assertSame(iLogAble1, iLogAble0);
assertNotNull(iLogAble1);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL1, searchParams0, varOrderHeap1, lubyRestarts2, iLogAble1);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertEquals(0.0, double0, 0.01);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

double double1 = searchParams1.getClaDecay();
assertEquals(0.0, double1, 0.01);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(double1, double0, 0.01);
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap0, glucose21Restarts0, iLogAble0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(activeLearning0.equals((Object)activeLearning1));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertFalse(solver1.equals((Object)solver0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

SearchParams searchParams2 = solver0.getSearchParams();
assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(11, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(12, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertFalse(solver0.equals((Object)solver1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertNotSame(solver0, solver1);
assertNotNull(searchParams2);

double double2 = searchParams1.getVarDecay();
assertEquals(0.0, double2, 0.01);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(13, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(double2, double0, 0.01);
assertEquals(double2, double1, 0.01);
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertFalse(solver0.equals((Object)solver1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertNotSame(solver0, solver1);
assertSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
assertNotNull(clausalDataStructureWL2);

ClausalDataStructureWL clausalDataStructureWL3 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL3);

ILits iLits0 = clausalDataStructureWL3.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL3, clausalDataStructureWL2);
assertNotSame(clausalDataStructureWL3, clausalDataStructureWL1);
assertNotSame(clausalDataStructureWL3, clausalDataStructureWL0);
assertNotNull(iLits0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

pureOrder0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL3, searchParams2, pureOrder0, lubyRestarts0, iLogAble1);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(16, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(15, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(lubyRestarts0.equals((Object)lubyRestarts2));
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL3.equals((Object)clausalDataStructureWL0));
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL3));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(solver2.equals((Object)solver1));
assertFalse(solver2.equals((Object)solver0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertFalse(solver0.equals((Object)solver1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

long long0 = solver0.getTimeoutMs();
assertEquals(2147483647L, long0);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts2.getFactor());
assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
assertTrue(lubyRestarts2.shouldRestart());
assertEquals(1, lubyRestarts2.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(17, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(17, solver0.realNumberOfVariables());
assertEquals(18, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(activeLearning1.equals((Object)activeLearning0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL3));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts2.equals((Object)lubyRestarts0));
assertFalse(solver0.equals((Object)solver2));
assertFalse(solver0.equals((Object)solver1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(activeLearning1, activeLearning0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL3);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL2);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(lubyRestarts2, lubyRestarts1);
assertNotSame(lubyRestarts2, lubyRestarts0);
assertSame(iLogAble1, iLogAble0);
assertNotSame(solver0, solver2);
assertNotSame(solver0, solver1);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(32);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, glucose21Restarts0);
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertNotNull(solver3);

SearchListener<Solver<MixedDataStructureDanielHT>> searchListener0 = solver3.getSearchListener();
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(3, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertNotSame(varOrderHeap0, varOrderHeap1);
assertNotNull(searchListener0);


[MASTER] 03:44:28.473 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:28.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams1, searchParams0);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(varOrderHeap1);

double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(searchParams1.equals((Object)searchParams0));
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams1, searchParams0);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap1, lubyRestarts0, (ILogAble) null);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.undoOne();

[MASTER] 03:44:28.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:28.808 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

Learner learner0 = mock(Learner.class, new ViolatedAssumptionAnswer());
cardinalityDataStructure0.setLearner(learner0);
naturalStaticOrder0.updateVar((-1211));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, naturalStaticOrder0, lubyRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

solver0.setTimeoutMs(1L);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);

solver0.unset(11);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics1 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics1, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.decayActivities();
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 03:44:29.161 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:29.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-65));
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-65), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams1, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-65), lubyRestarts0.getFactor());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-65), lubyRestarts0.getFactor());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams1, searchParams0);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(varOrderHeap1);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-65), lubyRestarts0.getFactor());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-65));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-65.0), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

Lits lits0 = (Lits)clausalDataStructureWL1.getVocabulary();
assertEquals(0, lits0.realnVars());
assertEquals(0, lits0.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(lits0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams1, varOrderHeap0, lubyRestarts0);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-65), lubyRestarts0.getFactor());
assertEquals(0, activeLearning0.getLimit());
assertEquals((-65.0), activeLearning0.getActivityPercent(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

solver2.setLearningStrategy(activeLearning0);

[MASTER] 03:44:29.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:29.449 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, (RestartStrategy) null);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

Lbool lbool0 = solver0.truthValue(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("U", lbool0.toString());
assertNotNull(lbool0);


[MASTER] 03:44:29.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:29.749 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int[] intArray0 = new int[3];
intArray0[0] = 1584;
intArray0[1] = 1202;
intArray0[2] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1584, 1202, 0}, intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(3, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {1584, 1202, 0}, intArray0);
assertNotNull(tabuListDecorator0);
assertEquals(3, intArray0.length);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
assertNotNull(glucose21Restarts1);

boolean boolean0 = glucose21Restarts1.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
assertNotSame(glucose21Restarts1, glucose21Restarts0);

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
assertNotSame(glucose21Restarts0, glucose21Restarts1);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, glucose21Restarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
assertArrayEquals(new int[] {1584, 1202, 0}, intArray0);
assertNotNull(solver0);
assertEquals(3, intArray0.length);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VecInt vecInt0 = new VecInt(1202);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constr0.simplify());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.learnt());
assertNotNull(constr0);

boolean boolean1 = constr0.canBeSatisfiedByCountingLiterals();
assertTrue(boolean1);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constr0.simplify());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.learnt());
assertFalse(boolean1 == boolean0);

solver0.claBumpActivity(constr0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constr0.simplify());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(1.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.learnt());
assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
assertArrayEquals(new int[] {1584, 1202, 0}, intArray0);
assertNotSame(glucose21Restarts0, glucose21Restarts1);
assertEquals(3, intArray0.length);


[MASTER] 03:44:30.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 03:44:30.085 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-163.173706140291), 22);
assertEquals((-163.173706140291), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(22, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals((-163.173706140291), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(22, searchParams0.getInitConflictBound());

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertEquals((-163.173706140291), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(22, searchParams0.getInitConflictBound());
assertNotEquals(double1, double0, 0.01);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

pureOrder0.varDecayActivity();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

arminRestarts0.reset();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

arminRestarts0.onBackjumpToRootLevel();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, arminRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-163.173706140291), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(22, searchParams0.getInitConflictBound());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append(';');
assertEquals(";", stringWriter1.toString());
assertEquals(";", stringWriter0.toString());
assertSame(stringWriter1, stringWriter0);
assertSame(stringWriter0, stringWriter1);
assertNotNull(stringWriter1);

String string0 = stringWriter0.toString();
assertEquals(";", string0);
assertEquals(";", stringWriter0.toString());
assertSame(stringWriter0, stringWriter1);
assertNotNull(string0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver2.equals((Object)solver1));
assertNotNull(solver2);

int int0 = solver2.newVar(32);
assertEquals(32, int0);
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(34, solver2.newVar());
assertEquals(33, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(32, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver2.equals((Object)solver1));
assertNotSame(solver2, solver1);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean1);
assertTrue(boolean1 == boolean0);

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver3);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

solver3.setLogger(mUSLauncher0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());


[MASTER] 03:44:30.414 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:30.417 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SearchParams searchParams0 = new SearchParams(6);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, arminRestarts0);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

solver0.reset();
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

int[] intArray0 = solver0.findModel();
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(6L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertArrayEquals(new int[] {}, intArray0);
assertNotNull(intArray0);
assertEquals(0, intArray0.length);


[MASTER] 03:44:30.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:30.738 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[12];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(12, intArray0.length);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1446);
assertEquals(1446, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

fixedLengthLearning0.init();
assertEquals(1446, fixedLengthLearning0.getMaxLength());

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, arminRestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);
assertEquals(12, intArray0.length);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 03:44:31.113 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 03:44:31.114 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

int int0 = 5;
SearchParams searchParams0 = new SearchParams((-522.1539861), 5);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-522.1539861), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-522.1539861), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-522.1539861), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotEquals(double1, double0, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-522.1539861), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(solver0);

ILogAble iLogAble0 = solver0.getLogger();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-522.1539861), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>((LearningStrategy<MixedDataStructureDanielWL>) null, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, iLogAble0);

[MASTER] 03:44:31.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:31.412 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(1);
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Random.setNextRandom(1);
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 03:44:31.789 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:31.822 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(",*>pu.? L:`Bi");
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams0).getClaDecay();
doReturn(0.0).when(searchParams0).getVarDecay();
doReturn((String) null).when(searchParams0).toString();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble1 = ILogAble.CONSOLE;
assertSame(iLogAble1, iLogAble0);
assertNotNull(iLogAble1);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble1);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertEquals(0.0, double0, 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

double double1 = searchParams1.getClaDecay();
assertEquals(0.0, double1, 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(9, solver0.nVars());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

int[] intArray0 = new int[0];
LearntWLClause learntWLClause0 = (LearntWLClause)solver1.addClauseOnTheFly(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(1, solver1.nConstraints());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.simplify());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.isSatisfied());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble0, iLogAble1);
assertSame(iLogAble1, iLogAble0);
assertSame(searchParams1, searchParams0);
assertNotNull(learntWLClause0);
assertEquals(0, intArray0.length);


[MASTER] 03:44:32.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:32.228 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[1];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(1, intArray0.length);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

SubsetVarOrder subsetVarOrder1 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(subsetVarOrder1);
assertEquals(1, intArray0.length);

int int0 = 2;
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder1, 2);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(tabuListDecorator0);
assertEquals(1, intArray0.length);

RestartStrategy restartStrategy0 = null;
ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, (RestartStrategy) null);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(solver0);
assertEquals(1, intArray0.length);

solver0.clearLearntClauses();
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertArrayEquals(new int[] {0}, intArray0);
assertNotSame(subsetVarOrder1, subsetVarOrder0);
assertEquals(1, intArray0.length);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, subsetVarOrder0, (RestartStrategy) null);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(subsetVarOrder0.equals((Object)subsetVarOrder1));
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(solver1);
assertEquals(1, intArray0.length);

solver1.isSatisfiable();

[MASTER] 03:44:32.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:32.643 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

ILogAble iLogAble1 = ILogAble.CONSOLE;
assertSame(iLogAble1, iLogAble0);
assertNotNull(iLogAble1);

iLogAble1.log(",*>pu.? L:`Bi");
assertSame(iLogAble1, iLogAble0);

ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0E-4);
assertEquals(1.0E-4, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble1);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1.0E-4, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

Solver solver1 = (Solver)solver0.getSolvingEngine();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1.0E-4, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.newVar());
assertEquals(4, solver1.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);
assertNotNull(solver1);

int int0 = solver0.currentDecisionLevel();
assertEquals(0, int0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1.0E-4, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iLogAble1, iLogAble0);


[MASTER] 03:44:33.118 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:33.193 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams((-318.8188159473568), (-121.6), (-121.6), (-2876));
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2876));
assertEquals((-2876), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, glucose21Restarts0, (ILogAble) null);
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver0);

VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(varOrderHeap1);

double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(searchParams0.equals((Object)searchParams1));
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertNotSame(searchParams0, searchParams1);
assertSame(varOrderHeap0, varOrderHeap1);
assertSame(varOrderHeap1, varOrderHeap0);
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>((-2876));
assertEquals((-2876), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, varOrderHeap0, miniSATRestarts0);
assertEquals((-2876), percentLengthLearning0.getLimit());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(solver1);

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver1.getRestartStrategy();
assertEquals((-2876), percentLengthLearning0.getLimit());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertSame(varOrderHeap0, varOrderHeap1);
assertNotNull(miniSATRestarts1);

SearchParams searchParams2 = new SearchParams((-121.6), (-2876));
assertEquals((-121.6), searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-2876), searchParams2.getInitConflictBound());
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotNull(searchParams2);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertNotNull(solverStats0);

miniSATRestarts0.init(searchParams2, solverStats0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-2876L), miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals((-121.6), searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-2876), searchParams2.getInitConflictBound());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertSame(miniSATRestarts0, miniSATRestarts1);
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);

miniSATRestarts0.onRestart();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(349722L, miniSATRestarts0.nextRestartNumberOfConflict());
assertSame(miniSATRestarts0, miniSATRestarts1);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

Lits lits0 = (Lits)clausalDataStructureWL1.getVocabulary();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(lits0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-2876), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

long long0 = solver2.getTimeoutMs();
assertEquals(2147483647L, long0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-2876), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertSame(varOrderHeap0, varOrderHeap1);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
assertNotNull(glucose21Restarts1);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap1, glucose21Restarts1);
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals((-121.6), searchParams0.getClaDecay(), 0.01);
assertEquals((-2876), searchParams0.getInitConflictBound());
assertEquals((-318.8188159473568), searchParams0.getVarDecay(), 0.01);
assertEquals((-121.6), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
assertNotNull(solver3);

int[] intArray0 = new int[6];
intArray0[0] = 32;
intArray0[1] = (-2876);
intArray0[2] = (-2876);
intArray0[3] = (-2876);
intArray0[4] = 32;
intArray0[5] = 32;
solver3.addAtMostOnTheFly(intArray0, (-676));

[MASTER] 03:44:33.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:44:33.605 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(1.0E20).when(searchParams0).getVarDecay();
doReturn("N&").when(searchParams0).toString();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams0);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertEquals(1.0E20, double0, 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams0);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(9, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(8, solver1.nVars());
assertEquals(8, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.equals((Object)solver0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

long long0 = solver1.getTimeoutMs();
assertEquals(2147483647L, long0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(14, solver0.newVar());
assertEquals(13, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(13, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(12, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(12, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(solver0, solver1);
assertSame(searchParams1, searchParams0);
assertNotSame(solver1, solver0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
