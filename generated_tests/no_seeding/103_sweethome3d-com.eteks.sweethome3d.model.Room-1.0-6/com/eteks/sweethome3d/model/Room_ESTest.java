/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 20:19:12 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.move((-2262.8892F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(727, 1.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(1063.46F, 2.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      room0.isAreaCenterPointAt(1795.6991F, 0.0F, 1795.6991F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-2482.1F));
      room0.isAreaCenterPointAt(0.0F, 2329.0F, 2329.0F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.isAreaCenterPointAt(2105.449F, 2105.449F, 2105.449F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(2.0F);
      room0.isAreaCenterPointAt((-106.3351F), 3054.3F, (-1090.1F));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[9][7];
      Room room0 = new Room(floatArray0);
      room0.isNameCenterPointAt(1.6504329E9F, 1.6504329E9F, 1.6504329E9F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-2117.7F));
      room0.isNameCenterPointAt(0.0F, 2.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.getPointIndexAt(1.0F, 1.0F, 559.0F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.move(477.2F, 477.2F);
      room0.getPointIndexAt(477.2F, 2, 0.0F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.intersectsRectangle((-2464.098F), 2227.6F, 1469.0F, 8192);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      room0.addPoint((-5480.981F), (-2779.0F));
      room0.isClockwise();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 2, 2);
      room0.isClockwise();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-1.0F), 1244.624F, 2);
      room0.isNameCenterPointAt((-1.0F), 1692.07F, 2785.434F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-2117.7F));
      room0.setAreaAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2146364108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2146364108
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      assertEquals(2, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, (-1598.86F), 2);
      assertEquals((-799.43F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint((-1.0F), 1244.624F, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 4
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-287.50153F), 0.0F, 0);
      assertEquals((-143.75076F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[7][9];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-1.0F));
      assertEquals(5.2831855F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-3201.88F));
      assertEquals((-3201.88F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1.6504329E9F;
      floatArray1[1] = 1.6504329E9F;
      float[] floatArray2 = new float[11];
      floatArray2[0] = (-3147.9F);
      floatArray2[1] = 4074.3918F;
      floatArray0[6] = floatArray2;
      floatArray0[7] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      boolean boolean0 = room0.isFloorVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[5][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[7][9];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle((-2464.098F), (-1195.0F), 1013.914F, 1013.914F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      Room room0 = new Room(floatArray0);
      room0.move(477.2F, 477.2F);
      float float0 = room0.getYCenter();
      assertEquals(477.2F, room0.getXCenter(), 0.01F);
      assertEquals(477.2F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-3333.8F));
      float float0 = room0.getYCenter();
      assertEquals((-3333.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 626.0F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(313.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1.0F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1013.914F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(0.0F, 0.0F, 0.0F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1, int0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[10][9];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(0.5F);
      float float0 = room0.getNameXOffset();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      room0.setName("~lvo:S{T=Dr?Z)h1]B");
      String string0 = room0.getName();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(string0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      String string0 = room0.getName();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(string0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("V?H/xX4U*M5eQp", 927.239F, (-2021.0F), 927.239F);
      room0.setLevel(level0);
      Level level1 = room0.getLevel();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(level1);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      CatalogTexture catalogTexture0 = new CatalogTexture("gC|96h#Ko~z", "", (Content) null, (-1387.0F), (-1129.0F), "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(7.6865435F);
      float float0 = room0.getFloorShininess();
      assertEquals(7.6865435F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2716);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, (String) null, temporaryURLContent0, 0.0F, 0.0F, (String) null, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[7][9];
      CatalogTexture catalogTexture0 = new CatalogTexture("RA*P!^VRw|X+-tUd}", "RA*P!^VRw|X+-tUd}", (Content) null, 7.6865435F, 1577.0F, "RA*P!^VRw|X+-tUd}");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(homeTexture1);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("0LzT0KUD", "0LzT0KUD", resourceURLContent0, (-4551.5F), (-697.8198F), "R+f");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(homeTexture1);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[7][9];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-1562.067F));
      float float0 = room0.getCeilingShininess();
      assertEquals((-1562.067F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(1503);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[8][9];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2146160895));
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }
}
