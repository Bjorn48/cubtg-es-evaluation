/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:01:42 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put("", "");
      concurrentReaderHashMap0.replace((Object) "", (Object) integer0);
      concurrentReaderHashMap0.putIfAbsent(integer0, "");
      concurrentReaderHashMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.put("v_wzB1.5-oD", "v_wzB1.5-oD");
      concurrentReaderHashMap0.remove((Object) "v_wzB1.5-oD");
      Object object0 = new Object();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, object0, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      concurrentReaderHashMap_Entry1.equals(concurrentReaderHashMap_ValueIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.put("v_wzB1.5-oD", "v_wzB1.5-oD");
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      concurrentReaderHashMap0.containsValue(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 0;
      concurrentReaderHashMap1.recordModification("f");
      Object object0 = concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      Object object1 = concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap1.containsKey(object1);
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(object1, function0, 0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Comparator comparator0 = Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry0.setValue(object0);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.getTableForReading();
      concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      concurrentReaderHashMap_KeyIterator0.next();
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap1.eq(comparator0, integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put("", "");
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(956, 956);
      Integer integer1 = new Integer(32);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(concurrentReaderHashMap1, integer1);
      concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleImmutableEntry0);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(32);
      concurrentReaderHashMap2.keys();
      concurrentReaderHashMap0.containsValue(integer0);
      concurrentReaderHashMap2.keySet();
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      Integer integer2 = new Integer(778);
      ConcurrentReaderHashMap concurrentReaderHashMap4 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap concurrentReaderHashMap5 = (ConcurrentReaderHashMap)concurrentReaderHashMap4.clone();
      Integer integer3 = new Integer(32);
      concurrentReaderHashMap4.recordModification(integer3);
      concurrentReaderHashMap2.entrySet();
      concurrentReaderHashMap3.values();
      concurrentReaderHashMap5.remove((Object) "");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      concurrentReaderHashMap0.keySet();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.sremove(concurrentReaderHashMap1, 0);
      concurrentReaderHashMap0.size();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1207);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      Enumeration enumeration0 = concurrentReaderHashMap1.keys();
      Object object0 = null;
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap1.sremove(enumeration0, 0);
      concurrentReaderHashMap0.computeIfPresent((Object) null, biFunction0);
      BiFunction<ConcurrentReaderHashMap, String, ConcurrentReaderHashMap> biFunction1 = (BiFunction<ConcurrentReaderHashMap, String, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.merge(concurrentReaderHashMap1, (Object) null, biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3857, 449.40298F);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(7, 0.75F);
      concurrentReaderHashMap0.sput(concurrentReaderHashMap1, concurrentReaderHashMap2, 32);
      Map.Entry.comparingByKey();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      concurrentReaderHashMap0.sput(concurrentReaderHashMap1, (Object) null, 32);
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap2.capacity();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      concurrentReaderHashMap0.recordModification("f");
      Object object0 = concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap0.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap0.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap0.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      Object object1 = concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap0.containsKey(object1);
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap0.lastWrite;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry1.setValue(object0);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap0);
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      concurrentReaderHashMap_KeyIterator0.next();
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put(integer0, "");
      concurrentReaderHashMap0.putIfAbsent(integer0, (Object) null);
      concurrentReaderHashMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(0, 32);
      concurrentReaderHashMap1.count = 1;
      concurrentReaderHashMap1.recordModification("f");
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1);
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("ts8<5m0|/hQp]1U#3", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      Object object0 = concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap1.containsKey(object0);
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(object0, function0, 1);
      Map.Entry.comparingByKey();
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.getTableForReading();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap0.lastWrite;
      concurrentReaderHashMap1.clear();
      concurrentReaderHashMap0.sput(enumeration0, abstractMap_SimpleImmutableEntry0, 0);
      concurrentReaderHashMap0.sremove((Object) null, 1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 0;
      concurrentReaderHashMap1.recordModification("f");
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.put(enumeration0, concurrentReaderHashMap2);
      concurrentReaderHashMap1.sremove((Object) null, 1013);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry1 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(abstractMap_SimpleImmutableEntry1, function0, 0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Comparator comparator0 = Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.getTableForReading();
      concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.entrySet();
      concurrentReaderHashMap1.sremove("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", 0);
      concurrentReaderHashMap2.replace((Object) comparator0, (Object) "org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator");
      concurrentReaderHashMap2.putIfAbsent((Object) null, abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap2.contains(concurrentReaderHashMap_Entry0);
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.putAll(concurrentReaderHashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32);
      concurrentReaderHashMap0.eq(concurrentReaderHashMap1, concurrentReaderHashMap1);
      BiFunction<Integer, Object, Object> biFunction0 = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.compute("", (BiFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(778);
      concurrentReaderHashMap0.put(integer0, integer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      concurrentReaderHashMap0.computeIfAbsent((Object) null, unaryOperator0);
      concurrentReaderHashMap0.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.sput((Object) null, concurrentReaderHashMap1, 278);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Comparator comparator0 = Map.Entry.comparingByKey();
      Integer integer1 = new Integer(0);
      concurrentReaderHashMap_Entry0.setValue(integer1);
      concurrentReaderHashMap0.get(integer1);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap1.getTableForReading();
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(278);
      Set set0 = concurrentReaderHashMap2.entrySet();
      Integer integer2 = new Integer(190);
      concurrentReaderHashMap1.sremove(integer2, (-629));
      concurrentReaderHashMap2.putIfAbsent(set0, comparator0);
      concurrentReaderHashMap1.contains("gc<{UJ|= ");
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap0.findAndRemoveEntry(concurrentReaderHashMap_Entry0);
      concurrentReaderHashMap_ValueIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 1);
      concurrentReaderHashMap0.clear();
      Object object0 = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(32, 32);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.get(integer0);
      Integer integer1 = new Integer((-1));
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.eq((Object) null, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(3857, 449.40298F);
      concurrentReaderHashMap0.put(concurrentReaderHashMap1, concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(3857, 0.75F);
      Object object0 = new Object();
      concurrentReaderHashMap0.remove(object0);
      concurrentReaderHashMap2.replace(object0, (Object) concurrentReaderHashMap0);
      BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap> biFunction0 = (BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.computeIfPresent((Object) null, biFunction0);
      concurrentReaderHashMap0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 32;
      concurrentReaderHashMap1.recordModification("f");
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.put(enumeration0, concurrentReaderHashMap2);
      concurrentReaderHashMap1.sremove((Object) null, 1013);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      concurrentReaderHashMap2.sput((Object) null, (Object) null, 0);
      concurrentReaderHashMap_ValueIterator0.currentValue = null;
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry1 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(abstractMap_SimpleImmutableEntry1, function0, 0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.entrySet();
      concurrentReaderHashMap1.sremove("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", 0);
      // Undeclared exception!
      concurrentReaderHashMap2.putIfAbsent((Object) null, abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2630);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.entrySet();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(9977);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(9977);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      // Undeclared exception!
      concurrentReaderHashMap1.containsValue(concurrentReaderHashMap2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 1;
      concurrentReaderHashMap1.recordModification("f");
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1);
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      Object object0 = concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap1.containsKey(object0);
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(object0, function0, 0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.getTableForReading();
      concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      float float0 = ConcurrentReaderHashMap.DEFAULT_LOAD_FACTOR;
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap2.new ValueIterator();
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("", "");
      BiFunction<String, ConcurrentReaderHashMap, Object> biFunction0 = (BiFunction<String, ConcurrentReaderHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.values();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(1527);
      Integer integer1 = new Integer(1527);
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      BiFunction<String, Integer, String> biFunction0 = (BiFunction<String, Integer, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.computeIfPresent(integer1, biFunction0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(1527, "_{", concurrentReaderHashMap1, (ConcurrentReaderHashMap.Entry) null);
      Map.Entry.comparingByValue();
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap_Entry0.equals(concurrentReaderHashMap2);
      concurrentReaderHashMap_Entry0.toString();
      concurrentReaderHashMap1.clear();
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(32);
      Integer integer2 = new Integer(32);
      concurrentReaderHashMap1.recordModification(integer2);
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap2.new KeyIterator();
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_KeyIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("v_wzB1.5-oD", "v_wzB1.5-oD");
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.rehash();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5891);
      concurrentReaderHashMap0.rehash();
      // Undeclared exception!
      concurrentReaderHashMap0.contains("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.count = 2291;
      concurrentReaderHashMap0.put("v_wzB1.5-oD", "v_wzB1.5-oD");
      concurrentReaderHashMap0.remove((Object) "v_wzB1.5-oD");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.get((Object) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("x", "x");
      LinkedHashSet<ConcurrentReaderHashMap> linkedHashSet0 = new LinkedHashSet<ConcurrentReaderHashMap>();
      linkedHashSet0.add(concurrentReaderHashMap0);
      concurrentReaderHashMap0.keySet = (Set) linkedHashSet0;
      linkedHashSet0.add(concurrentReaderHashMap0);
      concurrentReaderHashMap0.replace((Object) "x", (Object) 32);
      concurrentReaderHashMap0.loadFactor();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 32;
      concurrentReaderHashMap1.sput("v_wzB1.5-oD", "v_wzB1.5-oD", 32);
      concurrentReaderHashMap1.sremove("v_wzB1.5-oD", 32);
      concurrentReaderHashMap1.containsValue(concurrentReaderHashMap0);
      concurrentReaderHashMap0.rehash();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("", "");
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap0.replace((Object) "", (Object) "");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 17;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(17, 17);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      int int1 = 0;
      concurrentReaderHashMap1.sremove(concurrentReaderHashMap0, 0);
      concurrentReaderHashMap1.sremove(concurrentReaderHashMap0, 17);
      concurrentReaderHashMap1.remove((Object) null);
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.computeIfPresent((Object) null, biFunction0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "3o(");
      Integer integer0 = new Integer(17);
      concurrentReaderHashMap0.replace((Object) null, (Object) integer0);
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.put("v_wzB1.5-oD", "v_wzB1.5-oD");
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Object object0 = new Object();
      concurrentReaderHashMap0.contains(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5894);
      concurrentReaderHashMap0.keys();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put(integer0, "");
      concurrentReaderHashMap0.toString();
      concurrentReaderHashMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(4);
      Set set0 = concurrentReaderHashMap0.entrySet();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      Function<String, String> function0 = Function.identity();
      Object object0 = concurrentReaderHashMap0.computeIfAbsent(set0, function0);
      concurrentReaderHashMap0.remove(object0);
      Comparator comparator0 = Map.Entry.comparingByKey();
      concurrentReaderHashMap0.get(comparator0);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, (Object) null, comparator0, (ConcurrentReaderHashMap.Entry) null);
      Object object1 = concurrentReaderHashMap_ValueIterator0.currentKey;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_Entry1.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Object object0 = concurrentReaderHashMap0.lastWrite;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2552, (-617.4322F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: -617.4322
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("", "");
      concurrentReaderHashMap0.getTableForReading();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap0.lastWrite;
      Integer integer0 = new Integer(778);
      concurrentReaderHashMap0.put("", integer0);
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      concurrentReaderHashMap0.keySet();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      concurrentReaderHashMap0.keySet();
      concurrentReaderHashMap1.sremove(concurrentReaderHashMap_KeyIterator0, 16);
      Integer integer0 = new Integer((-614));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      concurrentReaderHashMap0.compute(integer0, biFunction0);
      concurrentReaderHashMap0.containsKey((Object) null);
      Object object0 = concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.get(object0);
      concurrentReaderHashMap0.loadFactor();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put(concurrentReaderHashMap2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      concurrentReaderHashMap0.put("", "");
      concurrentReaderHashMap0.replace((Object) "", (Object) 32);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, (-1));
      Map.Entry.comparingByKey();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.sput("\"}ayNZfe;#f[E%WPhm", concurrentReaderHashMap1, 16);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.sput("v_wzB1.5-oD", "v_wzB1.5-oD", 32);
      concurrentReaderHashMap0.sremove("v_wzB1.5-oD", 32);
      concurrentReaderHashMap0.containsValue(concurrentReaderHashMap0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2630);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      concurrentReaderHashMap0.containsKey(integer0);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      int int0 = 1;
      concurrentReaderHashMap0.sput(integer0, integer0, 1);
      Map.Entry.comparingByKey();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put(integer0, "");
      concurrentReaderHashMap0.putIfAbsent(integer0, (Object) null);
      concurrentReaderHashMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(4);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(3857, 449.40298F);
      concurrentReaderHashMap0.put(concurrentReaderHashMap1, concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      Object object0 = new Object();
      concurrentReaderHashMap0.remove(object0);
      concurrentReaderHashMap0.sput(concurrentReaderHashMap1, concurrentReaderHashMap2, 32);
      BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap> biFunction0 = (BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap1.size();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(4);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(3857, 449.40298F);
      concurrentReaderHashMap0.put(concurrentReaderHashMap1, concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(3857, 0.75F);
      Object object0 = new Object();
      concurrentReaderHashMap0.remove(object0);
      concurrentReaderHashMap0.sput(concurrentReaderHashMap1, concurrentReaderHashMap2, 32);
      BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap> biFunction0 = (BiFunction<Integer, ConcurrentReaderHashMap, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.computeIfPresent((Object) null, biFunction0);
      concurrentReaderHashMap0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.count = 32;
      concurrentReaderHashMap1.recordModification("f");
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.put(enumeration0, concurrentReaderHashMap2);
      concurrentReaderHashMap1.sremove((Object) null, 1013);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry1 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(abstractMap_SimpleImmutableEntry1, function0, 0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.entrySet();
      concurrentReaderHashMap1.sremove("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", 0);
      concurrentReaderHashMap2.putIfAbsent((Object) null, abstractMap_SimpleImmutableEntry1);
      concurrentReaderHashMap2.contains(concurrentReaderHashMap_Entry0);
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.putAll(concurrentReaderHashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(concurrentReaderHashMap0, (Integer) 32);
      concurrentReaderHashMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.sput("v_wzB1.5-oD", "v_wzB1.5-oD", 32);
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.replace((Object) concurrentReaderHashMap0, (Object) "v_wzB1.5-oD");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.recordModification("f");
      concurrentReaderHashMap0.clone();
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      concurrentReaderHashMap1.isEmpty();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      Object object0 = concurrentReaderHashMap_ValueIterator0.next();
      concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      concurrentReaderHashMap1.sput(object0, function0, 0);
      Map.Entry.comparingByKey();
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap0.clear();
      concurrentReaderHashMap1.sremove("f", 32);
      concurrentReaderHashMap1.values();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Map<Integer, String> map0 = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3829, 3829);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(3829.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3829.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      // Undeclared exception!
      concurrentReaderHashMap0.rehash();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object0 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertNull(object0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.clear();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object0 = concurrentReaderHashMap0.replace((Object) concurrentReaderHashMap_ValueIterator0, (Object) concurrentReaderHashMap_ValueIterator0);
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object1 = concurrentReaderHashMap0.get((Object) null);
      assertNull(object1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object2 = concurrentReaderHashMap0.get("1-`<[\"R~ >Ne^m2X_[~");
      assertNull(object2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object3 = concurrentReaderHashMap0.getOrDefault((Object) null, (Object) null);
      assertNull(object3);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      Object object4 = concurrentReaderHashMap0.sput((Object) null, concurrentReaderHashMap_ValueIterator0, 17);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNull(object4);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = (ConcurrentReaderHashMap.ValueIterator)concurrentReaderHashMap0.sremove((Object) null, 17);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.elements();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(enumeration0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      int int0 = concurrentReaderHashMap0.size();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(0, int0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, 2310);
      assertNull(object0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.sremove((Object) null, 2310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2001);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = null;
      try {
        concurrentReaderHashMap1 = new ConcurrentReaderHashMap((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1534);
      assertEquals(1534, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1534);
      assertEquals(1534, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put((Object) null, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer4 = hashMap0.put(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNull(integer4);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.loadFactor = (-2290.5F);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals((-2290.5F), concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.recordModification("org.dom4j.tree.ConcurrentReaderHashMap$Entry");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals((-2290.5F), concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals((-2290.5F), concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.elements();
      assertNotNull(enumeration0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals((-2290.5F), concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals((-2290.5F), concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(concurrentReaderHashMap0, (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(778, 778);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(778.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object0 = concurrentReaderHashMap0.put("x", "x");
      assertNull(object0);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(778.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue("x");
      assertTrue(boolean0);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(778.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      concurrentReaderHashMap1.count = 0;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      concurrentReaderHashMap1.recordModification("f");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(enumeration0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      Object object1 = concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean1 = concurrentReaderHashMap1.isEmpty();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean1 == boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry2 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean2 = concurrentReaderHashMap1.containsKey(abstractMap_SimpleImmutableEntry2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean3 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean3);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      Object object2 = concurrentReaderHashMap1.sput(abstractMap_SimpleImmutableEntry2, function0, 0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNotNull(concurrentReaderHashMap_Entry0);
      
      Comparator comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry3 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap1.getTableForReading();
      assertEquals(16, concurrentReaderHashMap_EntryArray0.length);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      Object object3 = concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object3);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray1 = concurrentReaderHashMap0.getTableForReading();
      assertEquals(8, concurrentReaderHashMap_EntryArray1.length);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap_EntryArray1, concurrentReaderHashMap_EntryArray0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_EntryArray1.equals((Object)concurrentReaderHashMap_EntryArray0));
      assertNotNull(concurrentReaderHashMap_EntryArray1);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      Object object4 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, enumeration0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertNull(object4);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator1 = (ConcurrentReaderHashMap.KeyIterator)concurrentReaderHashMap_KeyIterator0.next();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, concurrentReaderHashMap_KeyIterator1);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, enumeration0);
      assertSame(concurrentReaderHashMap_KeyIterator1, enumeration0);
      assertNotSame(concurrentReaderHashMap_KeyIterator1, concurrentReaderHashMap_KeyIterator0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertFalse(concurrentReaderHashMap_KeyIterator1.equals((Object)concurrentReaderHashMap_KeyIterator0));
      assertNotNull(concurrentReaderHashMap_KeyIterator1);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray2 = concurrentReaderHashMap0.getTableForReading();
      assertEquals(8, concurrentReaderHashMap_EntryArray2.length);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap_EntryArray2, concurrentReaderHashMap_EntryArray1);
      assertNotSame(concurrentReaderHashMap_EntryArray2, concurrentReaderHashMap_EntryArray0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_EntryArray2.equals((Object)concurrentReaderHashMap_EntryArray0));
      assertNotNull(concurrentReaderHashMap_EntryArray2);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object5 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, concurrentReaderHashMap_KeyIterator1);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, enumeration0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)concurrentReaderHashMap_KeyIterator1));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertNull(object5);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(0, 32);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      
      concurrentReaderHashMap1.count = 1;
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      concurrentReaderHashMap1.recordModification("f");
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(enumeration0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("ts8<5m0|/hQp]1U#3", (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      Object object1 = concurrentReaderHashMap1.computeIfAbsent((Object) null, function0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object1);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      boolean boolean1 = concurrentReaderHashMap1.isEmpty();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean1);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      Object object2 = concurrentReaderHashMap_ValueIterator0.next();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(object2);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      boolean boolean2 = concurrentReaderHashMap1.containsKey(object2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      boolean boolean3 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      Object object3 = concurrentReaderHashMap1.sput(object2, function0, 1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object3);
      assertEquals(3, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      Comparator comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Object object4 = concurrentReaderHashMap1.sput(abstractMap_SimpleImmutableEntry1, ";KNC", 1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(object4);
      assertEquals(3, concurrentReaderHashMap1.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(32.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap3);
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(32, concurrentReaderHashMap3.capacity());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      concurrentReaderHashMap1.count = 0;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      concurrentReaderHashMap1.recordModification("f");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(enumeration0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean1 = concurrentReaderHashMap1.isEmpty();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean1 == boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry2 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean2 = concurrentReaderHashMap1.containsKey(abstractMap_SimpleImmutableEntry2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      boolean boolean3 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean3);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNotNull(concurrentReaderHashMap_Entry0);
      
      Comparator comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry3 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap3);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(1, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertFalse(linkedHashSet0.contains(0));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      concurrentReaderHashMap3.values = (Collection) linkedHashSet0;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(1, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = concurrentReaderHashMap2.sremove(abstractMap_SimpleImmutableEntry1, 892);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNull(object1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      int int0 = concurrentReaderHashMap1.size();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertEquals(1, int0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2630);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      int int0 = (-1);
      concurrentReaderHashMap0.clear();
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object0 = concurrentReaderHashMap_ValueIterator0.currentKey;
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap0.replace((Object) null, (Object) null);
      assertNull(object1);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry((-1), concurrentReaderHashMap0, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object2 = concurrentReaderHashMap_Entry1.setValue("xo`0v[");
      assertNull(object2);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      LinkedHashSet<ConcurrentReaderHashMap> linkedHashSet0 = new LinkedHashSet<ConcurrentReaderHashMap>();
      assertFalse(linkedHashSet0.contains(concurrentReaderHashMap0));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      int int0 = 17;
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(17);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.computeIfAbsent(concurrentReaderHashMap2, unaryOperator0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap3);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.sput(concurrentReaderHashMap1, concurrentReaderHashMap3, 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertNull(object0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      
      Object object1 = concurrentReaderHashMap2.computeIfAbsent((Object) null, unaryOperator0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNull(object1);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.sput((Object) null, (Object) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      LinkedHashSet<AbstractMap.SimpleImmutableEntry<Object, String>> linkedHashSet0 = new LinkedHashSet<AbstractMap.SimpleImmutableEntry<Object, String>>(32);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      concurrentReaderHashMap0.keySet = (Set) linkedHashSet0;
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, concurrentReaderHashMap0.keySet.size());
      assertTrue(concurrentReaderHashMap0.keySet.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.getOrDefault("", "");
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_KeyIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertNotNull(set0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = new ConcurrentReaderHashMap.Entry[8];
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(7, "", (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      concurrentReaderHashMap_EntryArray0[0] = concurrentReaderHashMap_Entry1;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry2 = new ConcurrentReaderHashMap.Entry(32, "GIt4@s9IRK?izk)2?*v", (Object) null, concurrentReaderHashMap_Entry1);
      assertFalse(concurrentReaderHashMap_Entry2.equals((Object)concurrentReaderHashMap_Entry1));
      assertNotNull(concurrentReaderHashMap_Entry2);
      
      concurrentReaderHashMap_EntryArray0[1] = concurrentReaderHashMap_Entry2;
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry3 = new ConcurrentReaderHashMap.Entry((-1), concurrentReaderHashMap_Entry2, concurrentReaderHashMap1, (ConcurrentReaderHashMap.Entry) null);
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry2));
      assertFalse(concurrentReaderHashMap_Entry2.equals((Object)concurrentReaderHashMap_Entry1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap_Entry3.equals((Object)concurrentReaderHashMap_Entry2));
      assertFalse(concurrentReaderHashMap_Entry3.equals((Object)concurrentReaderHashMap_Entry1));
      assertNotNull(concurrentReaderHashMap_Entry3);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      concurrentReaderHashMap_EntryArray0[2] = concurrentReaderHashMap_Entry3;
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry4 = new ConcurrentReaderHashMap.Entry((-1996), concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap2, concurrentReaderHashMap_Entry1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry3));
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap_Entry4.equals((Object)concurrentReaderHashMap_Entry2));
      assertFalse(concurrentReaderHashMap_Entry4.equals((Object)concurrentReaderHashMap_Entry3));
      assertFalse(concurrentReaderHashMap_Entry4.equals((Object)concurrentReaderHashMap_Entry1));
      assertNotNull(concurrentReaderHashMap_Entry4);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      concurrentReaderHashMap_EntryArray0[3] = concurrentReaderHashMap_Entry4;
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry5 = new ConcurrentReaderHashMap.Entry(32, (Object) null, integer0, concurrentReaderHashMap_Entry1);
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry4));
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry3));
      assertFalse(concurrentReaderHashMap_Entry1.equals((Object)concurrentReaderHashMap_Entry2));
      assertNotNull(concurrentReaderHashMap_Entry5);
      
      concurrentReaderHashMap_EntryArray0[4] = concurrentReaderHashMap_Entry5;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry6 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry6);
      
      concurrentReaderHashMap_EntryArray0[5] = null;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry7 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry7);
      
      concurrentReaderHashMap_EntryArray0[6] = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.recordModification("f");
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(enumeration0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleImmutableEntry1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object0 = concurrentReaderHashMap0.putIfAbsent(enumeration0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNull(object0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean1 = concurrentReaderHashMap0.isEmpty();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry2 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      Integer integer0 = new Integer(1717986918);
      assertEquals(1717986918, (int)integer0);
      assertNotNull(integer0);
      
      concurrentReaderHashMap_ValueIterator0.currentValue = (Object) integer0;
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean2 = concurrentReaderHashMap0.containsKey(abstractMap_SimpleImmutableEntry2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean3 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean3);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertEquals(4, concurrentReaderHashMap_EntryArray0.length);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      
      Object object1 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap_KeyIterator0, enumeration0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNull(object1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_KeyIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      
      concurrentReaderHashMap1.DEFAULT_INITIAL_CAPACITY = 32;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", (Integer) 32);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Object object0 = concurrentReaderHashMap0.put(concurrentReaderHashMap_HashIterator0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNull(object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Object object1 = concurrentReaderHashMap1.sremove((Object) null, 1013);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object1);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      
      Object object2 = concurrentReaderHashMap1.putIfAbsent(concurrentReaderHashMap_HashIterator0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object2);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      boolean boolean0 = concurrentReaderHashMap1.isEmpty();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(boolean0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry1 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_ValueIterator0.next();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNotNull(concurrentReaderHashMap_Entry0);
      
      Comparator comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry2 = (AbstractMap.SimpleImmutableEntry)concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Object object3 = concurrentReaderHashMap1.get(abstractMap_SimpleImmutableEntry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object3);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(set0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      Object object4 = concurrentReaderHashMap1.sremove("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", 0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNull(object4);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      Object object5 = concurrentReaderHashMap2.putIfAbsent((Object) null, abstractMap_SimpleImmutableEntry1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNull(object5);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      boolean boolean1 = concurrentReaderHashMap2.contains(concurrentReaderHashMap_Entry0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(boolean1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
  }
}
