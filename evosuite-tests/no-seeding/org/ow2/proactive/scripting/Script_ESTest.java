/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:42:20 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URL;
import java.net.URLStreamHandler;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseEra;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.ScriptEngine;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "selected", false);
      String string0 = scriptTest_ScriptForTests0.display();
      assertEquals(" { \nScript '/fake/but/wellformed/url'\n\tscriptEngineLookupName = 'selected'\n\tscript = \nnull\n\tid = \nfile://some/fake/but/wellformed/url\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "");
      scriptTest_ScriptForTests0.setScript("");
      scriptTest_ScriptForTests0.getReader();
      assertEquals("", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("", scriptTest_ScriptForTests0.getScript());
      assertEquals("", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, "Could not determine script engine for script ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "N/006*Fm8*s Of2Oy", false);
      assertEquals("", selectionScript0.getId());
      
      selectionScript0.id = "";
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertEquals("", string0);
      assertEquals("N/006*Fm8*s Of2Oy", selectionScript0.getEngineName());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "onfmw9d/7", serializableArray0);
      simpleScript0.setScript("ClassCastException while looking up DataSource.");
      String string0 = simpleScript0.fetchScript();
      assertEquals("ClassCastException while looking up DataSource.", string0);
      assertEquals("onfmw9d/7", simpleScript0.getEngineName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      taskScript0.fetchUrlIfNeeded();
      assertEquals("", taskScript0.getScript());
      assertEquals("", taskScript0.getEngineName());
      assertEquals("TestScript", taskScript0.getScriptName());
      assertEquals("", taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[1];
      MockFile mockFile0 = new MockFile("&'5,JFg_", "args");
      SimpleScript simpleScript0 = null;
      try {
        simpleScript0 = new SimpleScript(mockFile0, serializableArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/&'5,JFg_/args
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      String string0 = taskScript0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("Hxst", "Hxst");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, (String) null);
      URL uRL0 = scriptTest_ScriptForTests0.getScriptUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getScriptName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      String string0 = simpleScript0.getScriptName();
      assertEquals("/fake/but/wellformed/url", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "result");
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertNull(string0);
      assertEquals("result", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("u>hu", "u>hu");
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertEquals("u>hu", string0);
      assertEquals("u>hu", scriptTest_ScriptForTests0.getId());
      assertNotNull(string0);
      assertEquals("u>hu", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("OnfMW9D/7", "OnfMW9D/7", false);
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(taskScript0);
      forkEnvironmentScript0.getReader();
      assertEquals("OnfMW9D/7", forkEnvironmentScript0.getEngineName());
      assertEquals("SelectionScript", forkEnvironmentScript0.getScriptName());
      assertEquals("OnfMW9D/7", forkEnvironmentScript0.getId());
      assertEquals("OnfMW9D/7", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript("_gQ],B9gO", "p3,FX|l&KFb4\"8", serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertEquals("_gQ],B9gO", simpleScript0.getScript());
      assertEquals("_gQ],B9gO", simpleScript0.getId());
      assertNotNull(serializableArray1);
      assertEquals("p3,FX|l&KFb4\"8", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(";O`4L1:T+a9_Nl=:0N", "xx&W", serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertEquals("xx&W", simpleScript0.getEngineName());
      assertEquals(";O`4L1:T+a9_Nl=:0N", simpleScript0.getId());
      assertEquals(";O`4L1:T+a9_Nl=:0N", simpleScript0.getScript());
      assertNotNull(serializableArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/args", "/args");
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "\"uEdB", uRLStreamHandler0);
      Serializable[] serializableArray0 = new Serializable[7];
      SimpleScript simpleScript0 = new SimpleScript(uRL1, serializableArray0);
      String string0 = simpleScript0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(taskScript0);
      String string0 = simpleScript0.getEngineName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript(" { ", "ForkEnvironmentScript", serializableArray0);
      String string0 = simpleScript0.getEngineName();
      assertEquals(" { ", simpleScript0.getId());
      assertNotNull(string0);
      assertEquals(" { ", simpleScript0.getScript());
      assertEquals("ForkEnvironmentScript", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "org.ow2.proactive.scripting.Script");
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      String string0 = taskScript0.fetchScript();
      assertEquals("SelectionScript", taskScript0.getScriptName());
      assertEquals("", taskScript0.getId());
      assertEquals("org.ow2.proactive.scripting.Script", taskScript0.getEngineName());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      ScriptEngine scriptEngine0 = selectionScript0.createScriptEngine();
      assertNull(scriptEngine0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ms1rHg\"Q._-Aadt-}", "ms1rHg\"Q._-Aadt-}");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript("appender", "appender", serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.prepareBindings((Bindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.overrideDefaultScriptName("J,d:1QR{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      // Undeclared exception!
      simpleScript0.fetchUrlIfNeeded();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[5];
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      simpleScript0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      Serializable[] serializableArray0 = new Serializable[8];
      serializableArray0[0] = (Serializable) selectionScript0;
      selectionScript0.parameters = serializableArray0;
      // Undeclared exception!
      try { 
        selectionScript0.display();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("k%=XfQ!Gh$z]H5_^Q");
      MockFile mockFile0 = new MockFile("k%=XfQ!Gh$z]H5_^Q");
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(mockFile0);
      ScriptResult<Object> scriptResult0 = scriptTest_ScriptForTests0.execute((Map<String, Object>) hashtable0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertNull(scriptResult0.getHostname());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("MD5");
      ScriptResult<Object> scriptResult0 = simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertNull(scriptResult0.getHostname());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[7];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "I?", serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleScript0.execute((Map<String, Object>) simpleBindings0, (PrintStream) null, (PrintStream) null);
      assertEquals("I?", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[5];
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("org.ow2.proactive.scripting.Script$1", "\tscriptEngineLookupName = '");
      String string0 = scriptTest_ScriptForTests0.getId();
      assertNotNull(string0);
      assertEquals("\tscriptEngineLookupName = '", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("org.ow2.proactive.scripting.Script$1", scriptTest_ScriptForTests0.getScript());
      assertEquals("org.ow2.proactive.scripting.Script$1", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("jC;:<.mdUCrG", "11}.x4r<)}j");
      selectionScript0.overrideDefaultScriptName("qQ27N\"At#0&");
      assertEquals("qQ27N\"At#0&", selectionScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      JapaneseEra[] japaneseEraArray0 = JapaneseEra.values();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, japaneseEraArray0);
      simpleScript0.overrideDefaultScriptName("MD5");
      assertEquals("/fooExample", simpleScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("u>hu", "u>hu");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(scriptTest_ScriptForTests0);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests1 = scriptTest0.new ScriptForTests("[^U[zT7GJ\"663 ", "MD5");
      boolean boolean0 = scriptTest_ScriptForTests1.equals(forkEnvironmentScript0);
      assertEquals("u>hu", forkEnvironmentScript0.getScript());
      assertEquals("[^U[zT7GJ\"663 ", scriptTest_ScriptForTests1.getScript());
      assertEquals("[^U[zT7GJ\"663 ", scriptTest_ScriptForTests1.getId());
      assertEquals("u>hu", forkEnvironmentScript0.getEngineName());
      assertEquals("TestScript", forkEnvironmentScript0.getScriptName());
      assertFalse(boolean0);
      assertEquals("u>hu", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "qT@XK~wB#?~");
      Script<TaskScript> script0 = (Script<TaskScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      boolean boolean0 = scriptTest_ScriptForTests0.equals(taskScript0);
      assertEquals("qT@XK~wB#?~", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("TestScript", scriptTest_ScriptForTests0.getScriptName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("Host", "Host");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(scriptTest_ScriptForTests0);
      boolean boolean0 = scriptTest_ScriptForTests0.equals(forkEnvironmentScript0);
      assertTrue(boolean0);
      assertEquals("Host", forkEnvironmentScript0.getScript());
      assertEquals("Host", forkEnvironmentScript0.getEngineName());
      assertEquals("TestScript", forkEnvironmentScript0.getScriptName());
      assertEquals("Host", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(")f!Q`(FN%F", ")f!Q`(FN%F");
      boolean boolean0 = scriptTest_ScriptForTests0.equals(")f!Q`(FN%F");
      assertFalse(boolean0);
      assertEquals(")f!Q`(FN%F", scriptTest_ScriptForTests0.getEngineName());
      assertEquals(")f!Q`(FN%F", scriptTest_ScriptForTests0.getScript());
      assertEquals(")f!Q`(FN%F", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, (String) null);
      boolean boolean0 = scriptTest_ScriptForTests0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("MD5", "MD5");
      boolean boolean0 = scriptTest_ScriptForTests0.equals(scriptTest_ScriptForTests0);
      assertEquals("MD5", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("MD5", scriptTest_ScriptForTests0.getScript());
      assertTrue(boolean0);
      assertEquals("MD5", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      forkEnvironmentScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      JapaneseEra[] japaneseEraArray0 = JapaneseEra.values();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, japaneseEraArray0);
      simpleScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://www.somefakebutwellformedurl.org/fooexample", "http://www.somefakebutwellformedurl.org/fooexample");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Script.readFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      File file0 = MockFile.createTempFile("MD5", "args");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/MD50args");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "No Script Engine Found for name or extension ");
      String string0 = Script.readFile(file0);
      assertEquals("No Script Engine Found for name or extension \n", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[5];
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleScript0.prepareBindings(simpleBindings0);
      assertEquals(1048576, Script.DEFAULT_OUTPUT_MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      selectionScript0.prepareBindings(simpleBindings0);
      assertEquals(1048576, Script.DEFAULT_OUTPUT_MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "Script '", 1217, "4Z<onD");
      SelectionScript selectionScript0 = new SelectionScript(uRL0, "https");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      ScriptResult<Boolean> scriptResult0 = selectionScript0.execute();
      assertNull(scriptResult0.getOutput());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("Script could not be fetched", "/fake/but/wellformed/url");
      String string0 = simpleScript0.fetchScriptWithExceptionHandling();
      assertEquals("/fake/but/wellformed/url", simpleScript0.getEngineName());
      assertEquals("Script could not be fetched", string0);
      assertEquals("Script could not be fetched", simpleScript0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      String string0 = simpleScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = Script.digest("38GzSqSK");
      assertEquals("\uFFFD\uFFFD\uFFFDv\u0015\uFFFD\uFFFD\u001A\u0017\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0017z", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      JapaneseEra[] japaneseEraArray0 = JapaneseEra.values();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, japaneseEraArray0);
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "lp|i.3a9zs)|g");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = scriptTest_ScriptForTests0.equals(forkEnvironmentScript0);
      assertEquals("TestScript", scriptTest_ScriptForTests0.getScriptName());
      assertFalse(boolean0);
      assertEquals("lp|i.3a9zs)|g", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", forkEnvironmentScript0.getId());
      assertEquals("/fooExample", forkEnvironmentScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      URL uRL1 = simpleScript0.getScriptUrl();
      assertSame(uRL0, uRL1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      MockFile mockFile0 = new MockFile("org.ow2.proactive.scripting.SelectionScript");
      File file0 = MockFile.createTempFile("file", "file", (File) mockFile0);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Script<ChronoLocalDate> script0 = (Script<ChronoLocalDate>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      File file0 = MockFile.createTempFile("Hxst", "Hxst");
      Serializable[] serializableArray0 = new Serializable[4];
      SimpleScript simpleScript0 = new SimpleScript(file0, serializableArray0);
      String string0 = simpleScript0.getEngineName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SelectionScript selectionScript0 = new SelectionScript("ecmascript", "ecmascript");
          // Undeclared exception!
          try { 
            selectionScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor143.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript("appender", "appender", serializableArray0);
      String string0 = simpleScript0.toString();
      assertEquals("SimpleScript", string0);
      assertEquals("appender", simpleScript0.getEngineName());
      assertEquals("appender", simpleScript0.getScript());
      assertEquals("appender", simpleScript0.getId());
  }
}
