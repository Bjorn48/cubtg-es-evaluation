/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:13:58 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.ConflictTimerContainer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.MemoryBasedConflictTimer;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConflictTimerContainer conflictTimerContainer0 = new ConflictTimerContainer();
      Constr constr0 = Constr.TAUTOLOGY;
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>((Solver<ClausalDataStructureWL>) null, conflictTimerContainer0);
      int int0 = glucoseLCDS0.computeLBD(constr0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer((Solver<? extends DataStructureFactory>) null, 0);
      Glucose2LCDS<CardinalityDataStructure> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructure>((Solver<CardinalityDataStructure>) null, memoryBasedConflictTimer0);
      ConflictTimer conflictTimer0 = glucose2LCDS0.getTimer();
      assertSame(memoryBasedConflictTimer0, conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 642.074474, 0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder0, lubyRestarts0, (ILogAble) null);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver0, lubyRestarts0);
      Constr[] constrArray0 = new Constr[1];
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver1.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      constrArray0[0] = (Constr) learntWLClause0;
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      ReadOnlyVec<Constr> readOnlyVec0 = new ReadOnlyVec<Constr>(vec0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(readOnlyVec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, miniSATRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      vec0.insertFirstWithShifting(constr0);
      Glucose2LCDS<CardinalityDataStructure> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructure>(solver0, noRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solver<CardinalityDataStructureYanMin> solver0 = (Solver<CardinalityDataStructureYanMin>) mock(Solver.class, new ViolatedAssumptionAnswer());
      ConflictTimer conflictTimer0 = mock(ConflictTimer.class, new ViolatedAssumptionAnswer());
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>(solver0, conflictTimer0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.onClauseLearning((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-2875.0266));
      NoRestarts noRestarts0 = new NoRestarts();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, fixedPeriodRestarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, noRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.onClauseLearning(learntWLClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>((Solver<CardinalityDataStructure>) null, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucoseLCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, lubyRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, lubyRestarts0);
      glucoseLCDS0.init();
      int int0 = glucoseLCDS0.computeLBD(learntWLClause0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, lubyRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD(learntWLClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, subsetVarOrder0, glucose21Restarts0);
      Glucose2LCDS<CardinalityDataStructure> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructure>(solver0, glucose21Restarts0);
      glucose2LCDS0.init();
      glucose2LCDS0.init();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(" with fag ").when(solver0).getLogPrefix();
      doReturn(true).when(solver0).isVerbose();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, lubyRestarts0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(32);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder(32);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 32);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
      IVec<Constr> iVec0 = solver1.getLearnedConstraints();
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(iVec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, lubyRestarts0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr[] constrArray0 = new Constr[3];
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(vecInt0, 761);
      constrArray0[1] = constr0;
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      ReadOnlyVec<Constr> readOnlyVec0 = new ReadOnlyVec<Constr>(vec0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(readOnlyVec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, varOrderHeap0, noRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      Constr constr0 = Constr.TAUTOLOGY;
      vec0.insertFirstWithShifting(constr0);
      Glucose2LCDS<CardinalityDataStructure> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructure>(solver0, noRestarts0);
      glucose2LCDS0.reduce(vec0);
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 642.074474, 0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, lubyRestarts0);
      UnitClause unitClause0 = new UnitClause(0);
      glucoseLCDS0.onClauseLearning(unitClause0);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, varOrderHeap0, fixedPeriodRestarts0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, fixedPeriodRestarts0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(vecInt0, 0);
      glucoseLCDS0.onPropagation(constr0);
      assertTrue(constr0.locked());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConflictTimerContainer conflictTimerContainer0 = new ConflictTimerContainer();
      Constr constr0 = Constr.TAUTOLOGY;
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>((Solver<ClausalDataStructureWL>) null, conflictTimerContainer0);
      glucoseLCDS0.onConflictAnalysis(constr0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>((Solver<MixedDataStructureDanielHT>) null, miniSATRestarts0);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer MiniSAT restarts strategy", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 1579);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, mUSLauncher0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertNull(conflictTimer0);
  }
}
