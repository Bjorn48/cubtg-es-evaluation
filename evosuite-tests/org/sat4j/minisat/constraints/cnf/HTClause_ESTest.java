/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:03:20 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 58;
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      String string0 = learntHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals("-3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] 29[?]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 16384;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("M3wV,E#]FC#;");
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 58;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      IVecInt iVecInt0 = vecInt0.push(8);
      int int0 = originalHTClause0.getAssertionLevel(iVecInt0, 2035);
      assertEquals(3, originalHTClause0.size());
      assertEquals((-1), int0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.tail = 32;
      vecInt0.push(3966);
      int int0 = originalHTClause0.getAssertionLevel(vecInt0, 3966);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(4, originalHTClause0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 54;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertEquals(4, originalHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 54;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(4, originalHTClause0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      vecInt0.push(1055);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1054
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly((-1), vecInt1, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 16384;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.hashCode();
      assertEquals(6, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      vecInt0.push(1055);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.hashCode();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(31, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 58;
      int[] intArray0 = learntHTClause0.getLits();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(58, learntHTClause0.size());
      assertEquals(58, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-1));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, eMARestarts0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 45;
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.rescaleBy(0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(6, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 5;
      int int0 = learntHTClause0.get(5);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 785;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        noLearningButHeuristics0.learns(learntHTClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.AbstractLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 58;
      String string0 = learntHTClause0.toString();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals("29[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 1;
      String string0 = learntHTClause0.toString();
      assertEquals("-3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -3[?] -0[?]", string0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 785;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 392
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, varOrderHeap0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate(solver0, (-4588));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 785;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, varOrderHeap0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate(solver0, 785);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.simplify();
      assertEquals(6, learntHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 27;
      boolean boolean0 = learntHTClause0.simplify();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(4, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 16384;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1348.3);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        learntHTClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16385
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 58;
      VecInt vecInt0 = new VecInt(intArray0);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 2102.6021917063);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, arminRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.calcReasonOnTheFly((-622), vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 58;
      VecInt vecInt0 = new VecInt(intArray0);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 2102.6021917063);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, arminRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.calcReasonOnTheFly((-622), vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.assertConstraint(solver0);
      learntHTClause0.toConstraint();
      assertTrue(learntHTClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      Constr constr0 = originalHTClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(6, constr0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.getVocabulary();
      assertEquals(4, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      lits0.getFromPool(1);
      learntHTClause0.getVocabulary();
      assertEquals(30, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      lits0.ensurePool(7);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.getVocabulary();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(58, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      IVecInt iVecInt0 = vecInt0.push(7);
      int int0 = originalHTClause0.getAssertionLevel(iVecInt0, 694);
      assertEquals(7, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.activity = 1.0;
      double double0 = learntHTClause0.getActivity();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.incActivity((-865.7));
      double double0 = learntHTClause0.getActivity();
      assertEquals((-865.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(918, 918);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251, 2251);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.getAssertionLevel((IVecInt) null, 16384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 2970);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReasonOnTheFly(2970, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2970
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason(15, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1811, 1811);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason(1811, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1811
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(35, (-1932));
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, (-858));
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt(35, 35);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.calcReason(35, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 58);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      double double0 = learntHTClause0.getActivity();
      assertEquals(58, learntHTClause0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.size();
      assertEquals(6, int0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      int int0 = originalHTClause0.getAssertionLevel(vecInt1, 3966);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(5, int0);
      assertEquals(6, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.assertConstraint(solver0);
      boolean boolean0 = learntHTClause0.isSatisfied();
      assertTrue(learntHTClause0.locked());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      boolean boolean0 = originalHTClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(7, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      boolean boolean0 = originalHTClause0.equals(mixedDataStructureDanielHT0);
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(6, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(35, 35);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(35, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.assertConstraint(solver0);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 2102.6021917063);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, arminRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntHTClause0.get(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.get(5);
      assertEquals(6, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.locked();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(7, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt(37, 37);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      PureOrder pureOrder0 = new PureOrder();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, pureOrder0, (RestartStrategy) null);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate(solver0, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate((UnitPropagationListener) null, 30);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      ILits iLits0 = originalHTClause0.getVocabulary();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertNotNull(iLits0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, 30);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(30, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VecInt vecInt0 = new VecInt(20, 20);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(boolean0);
      assertEquals(20, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VecInt vecInt0 = new VecInt(31, 31);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      Constr constr0 = learntHTClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(7, constr0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(58, learntHTClause0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VecInt vecInt0 = new VecInt(58, 7);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.rescaleBy(7);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(58, learntHTClause0.size());
  }
}
