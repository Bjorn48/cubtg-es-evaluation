/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 14:30:15 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.net.MalformedURLException;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.JSONReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("^Z.'s9[.lzmma");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      try { 
        groupedCNFReader0.parseInstance("^Z.'s9[.lzmma");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p gcnf ...)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      try { 
        groupedCNFReader0.parseInstance("http://:4-!Y");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // For input string: \"4-!Y\"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      // Undeclared exception!
      try { 
        groupedCNFReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        groupedCNFReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "ZGpg9)r");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      try { 
        aAGReader0.parseInstance((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.getMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://[4");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid authority field: [4
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reader.getInputStreamFromFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("http11");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bz2");
      InputStream inputStream0 = Reader.getInputStreamFromFilename("http11/");
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1412);
      InstanceReader instanceReader0 = new InstanceReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance(inputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://org.sat4j.reader.Reader.lzma");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: org.sat4j.reader.Reader.lzma
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("J*LoVh#_8K5J");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("http11/.gz");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "W3)d47=s4ro./J");
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      try { 
        groupedCNFReader0.parseInstance("http11/.gz");
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      try { 
        groupedCNFReader0.parseInstance("http://org.sat4j.reader.Reader");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: org.sat4j.reader.Reader
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("^Z.'s9[.lzmma");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      // Undeclared exception!
      aAGReader0.parseInstance("^Z.'s9[.lzmma");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      try { 
        groupedCNFReader0.parseInstance("org.sat4j.reader.Reader");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1412);
      InstanceReader instanceReader0 = new InstanceReader(dimacsStringSolver0);
      assertFalse(instanceReader0.isVerbose());
      
      instanceReader0.setVerbosity(true);
      assertTrue(instanceReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      boolean boolean0 = aAGReader0.isVerbose();
      assertFalse(boolean0);
      assertFalse(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringReader stringReader0 = new StringReader("http://http://nMcw@+");
      // Undeclared exception!
      try { 
        groupedCNFReader0.parseInstance((java.io.Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use #parseInstance(InputStream) instead
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      groupedCNFReader0.setUseMapping(false);
      assertFalse(groupedCNFReader0.isVerbose());
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      boolean boolean0 = groupedCNFReader0.hasAMapping();
      assertFalse(groupedCNFReader0.isVerbose());
      assertFalse(boolean0);
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      boolean boolean0 = aAGReader0.isUsingMapping();
      assertFalse(boolean0);
      assertFalse(aAGReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      groupedCNFReader0.getMapping();
      assertFalse(groupedCNFReader0.isVerbose());
      assertFalse(groupedCNFReader0.isUsingMapping());
  }
}
