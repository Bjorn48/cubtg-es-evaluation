/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 13:20:36 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      PlotDatum plotDatum0 = new PlotDatum((-1929.74912892753), 1769.3686806353, false);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertEquals(1769.3686806353, plotDatum0.getY(), 0.01);
      assertFalse(plotDatum0.connected());
      assertEquals((-1929.74912892753), plotDatum0.getX(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1769.3686806353, plotDatum0.y, 0.01);
      assertEquals((-1929.74912892753), plotDatum0.x, 0.01);
      assertNotNull(plotDatum0);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 1769.3686806353, 0.0, axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertEquals(1769.3686806353, plotDatum0.getY(), 0.01);
      assertFalse(plotDatum0.connected());
      assertEquals((-1929.74912892753), plotDatum0.getX(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1769.3686806353, plotDatum0.y, 0.01);
      assertEquals((-1929.74912892753), plotDatum0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      PlotDatum plotDatum0 = new PlotDatum(2380.732998834497, 3324.215, false);
      assertEquals(2380.732998834497, plotDatum0.getX(), 0.01);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(3324.215, plotDatum0.getY(), 0.01);
      assertFalse(plotDatum0.connected());
      assertEquals(2380.732998834497, plotDatum0.x, 0.01);
      assertEquals(3324.215, plotDatum0.y, 0.01);
      assertNotNull(plotDatum0);
      
      plotDatum0.setYError(3324.215);
      assertEquals(2380.732998834497, plotDatum0.getX(), 0.01);
      assertEquals(3324.215, plotDatum0.getY(), 0.01);
      assertEquals(3324.215, plotDatum0.getYError(), 0.01);
      assertTrue(plotDatum0.hasErrorBar());
      assertFalse(plotDatum0.connected());
      assertEquals(2380.732998834497, plotDatum0.x, 0.01);
      assertEquals(3324.215, plotDatum0.y, 0.01);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars(plotDatum0, 0.0, 0.0, (AxisLimitData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.1, 0.0, 0.0, 771.47228, 62.23716);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.0, 2.0, 0.0, 2.0, (-1929.74912892753));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(5.0, 5.0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 1.0E-6);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func((-1.0));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks((-9.757899999999953E304), (-9.757899999999953E304), 1.0E-6, 1.0E-6, (-9.757899999999953E304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.lowerBounds();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(10.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.upperBounds();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      linearAxisScale0.calcTickMarks((-9.757899999999954E272), (-9.757899999999953E304), (-9.757899999999953E304), (-9.757899999999953E304), (-9.757899999999954E272));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(1290.9924416360507, 407.66495301039686, 1622.680513617, 407.66495301039686, (-1019.278389546875));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1609.139273094229), (-722.3631359999999));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(397.19789, 972.441264962);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(2772.6, 3164.12536098323);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1019.278389546875), (-214.5));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-176.6871029), (-176.6871029));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      linearAxisScale0.findGoodLimits(1634.5, 931.5506);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-0.5), (-0.5), (-748.836432614), (-2925.30460994), (-1917.6554418));
      assertNotNull(tickMarkData0);
  }
}
