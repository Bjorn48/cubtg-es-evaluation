/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:39:23 GMT 2019
 */

package org.sat4j.minisat.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveLearning_ESTest extends ActiveLearning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      boolean boolean0 = activeLearning0.learningCondition(atLeast0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-2864.2183091202), 1358);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0);
      activeLearning0.setSolver(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      PureOrder pureOrder0 = new PureOrder(0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      activeLearning0.setLimit(1358);
      int int0 = activeLearning0.getLimit();
      assertEquals(1358, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.95, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-604.4708));
      double double0 = activeLearning0.getActivityPercent();
      assertEquals((-604.4708), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = cardinalityDataStructureYanMin0.createCardinalityConstraint(vecInt0, 0);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1716));
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      PureOrder pureOrder0 = new PureOrder((-1716));
      activeLearning0.setOrder(pureOrder0);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -858
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1716));
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      activeLearning0.setActivityPercent((-1305.88769263959));
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      activeLearning0.setOrder(naturalStaticOrder0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertEquals((-1305.88769263959), activeLearning0.getActivityPercent(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1716));
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      activeLearning0.setOrder(naturalStaticOrder0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-122));
      int int0 = activeLearning0.getLimit();
      assertEquals(0, int0);
      assertEquals((-122.0), activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
      activeLearning0.setLimit((-2526));
      int int0 = activeLearning0.getLimit();
      assertEquals((-2526), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(32);
      String string0 = activeLearning0.toString();
      assertEquals("Limit learning to clauses containing active literals (3200.0%)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      // Undeclared exception!
      try { 
        activeLearning0.setSolver((Solver<MixedDataStructureDanielWLConciseBinary>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      activeLearning0.setOrder(naturalStaticOrder0);
      VecInt vecInt0 = new VecInt(46, 46);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      boolean boolean0 = activeLearning0.learningCondition(learntHTClause0);
      assertFalse(boolean0);
  }
}
