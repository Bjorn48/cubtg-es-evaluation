/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:39:08 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import jahuwaldt.plot.Triangle3Symbol;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol();
      assertEquals(8, triangle3Symbol0.getSize());
      assertNotNull(triangle3Symbol0);
      
      PlotDatum plotDatum0 = new PlotDatum(0.0, (-375.36421638), true, triangle3Symbol0);
      assertEquals(8, triangle3Symbol0.getSize());
      assertEquals((-375.36421638), plotDatum0.getY(), 0.01);
      assertEquals(0.0, plotDatum0.getX(), 0.01);
      assertTrue(plotDatum0.connected());
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertNotNull(plotDatum0);
      assertEquals((-375.36421638), plotDatum0.y, 0.01);
      assertEquals(0.0, plotDatum0.x, 0.01);
      
      plotDatum0.setYError(2507.196);
      assertEquals(8, triangle3Symbol0.getSize());
      assertEquals((-375.36421638), plotDatum0.getY(), 0.01);
      assertEquals(0.0, plotDatum0.getX(), 0.01);
      assertTrue(plotDatum0.connected());
      assertTrue(plotDatum0.hasErrorBar());
      assertEquals(2507.196, plotDatum0.getYError(), 0.01);
      assertEquals((-375.36421638), plotDatum0.y, 0.01);
      assertEquals(0.0, plotDatum0.x, 0.01);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 0.0, 408.74025749845106, axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals(8, triangle3Symbol0.getSize());
      assertEquals((-375.36421638), plotDatum0.getY(), 0.01);
      assertEquals(0.0, plotDatum0.getX(), 0.01);
      assertTrue(plotDatum0.connected());
      assertTrue(plotDatum0.hasErrorBar());
      assertEquals(2507.196, plotDatum0.getYError(), 0.01);
      assertEquals((-375.36421638), plotDatum0.y, 0.01);
      assertEquals(0.0, plotDatum0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-1.0), (-2286.7890571441), (-3098.968943656104), (-2286.7890571441), (-3098.968943656104));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks(45.2124194771296, 226.062097385648, (-255.1659446), 45.2124194771296, 2.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.0, 0.0, 327.62, (-1085.8728079145), (-2108.45027001));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(2106.11494877);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals(2106.11494877, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LinearAxisScale linearAxisScale0 = new LinearAxisScale();
          assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
          assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
          assertNotNull(linearAxisScale0);
          
          // Undeclared exception!
          linearAxisScale0.findGoodLimits(1.0, (-1.0));
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-997.577389111658), (-997.577389111658));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars((PlotDatum) null, (-997.577389111658), (-1.0), axisLimitData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.lowerBounds();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func((-1894.567574499));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1894.567574499), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.upperBounds();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LinearAxisScale linearAxisScale0 = new LinearAxisScale();
          assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
          assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
          assertNotNull(linearAxisScale0);
          
          // Undeclared exception!
          linearAxisScale0.calcTickMarks(0.001, (-9.224316711257307), 0.001, (-496.41755838820103), 0.001);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-3786.822367499136), (-1099.0));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-2920.5793), (-1828.4));
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(45.2124194771296, 100.0);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1.0E-6, 1.0E-6);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(1.0E-6, 0.0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(2.0, 10.0);
      Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol();
      PlotDatum plotDatum0 = new PlotDatum((-4.922340313129325E-11), (-20.0), true, triangle3Symbol0);
      linearAxisScale0.adjustForErrorBars(plotDatum0, (-1.0), (-435.10054), axisLimitData0);
      assertEquals((-20.0), plotDatum0.getY(), 0.01);
  }
}
