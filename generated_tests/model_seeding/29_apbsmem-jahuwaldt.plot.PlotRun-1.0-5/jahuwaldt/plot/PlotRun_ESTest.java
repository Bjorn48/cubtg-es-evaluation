/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 19:55:23 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxLRSymbol;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.DiamondSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.RTriangle1Symbol;
import jahuwaldt.plot.SquareSymbol;
import jahuwaldt.plot.TabLSymbol;
import jahuwaldt.plot.Triangle3Symbol;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import javax.swing.JLayeredPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRun_ESTest extends PlotRun_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      int int0 = plotRun0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, squareSymbol0);
      int int0 = plotRun0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol();
      double[] doubleArray0 = new double[6];
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, triangle3Symbol0);
      PlotDatum plotDatum0 = (PlotDatum)plotRun0.remove(1);
      assertEquals(0.0, plotDatum0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityQueue<JSeparator> priorityQueue0 = new PriorityQueue<JSeparator>();
      PlotRun plotRun0 = new PlotRun(priorityQueue0);
      Iterator iterator0 = plotRun0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      double double0 = plotRun0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotDatum plotDatum0 = new PlotDatum(80.0, 0.1, true);
      plotDatumArray0[0] = plotDatum0;
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      PlotDatum plotDatum1 = new PlotDatum((-2909.71649083), (-2909.71649083), true, tabLSymbol0);
      plotDatumArray0[1] = plotDatum1;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      double double0 = plotRun0.getMinY();
      assertEquals((-2909.71649083), double0, 0.01);
      assertEquals(2, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2675.0);
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, squareSymbol0);
      double double0 = plotRun0.getMinX();
      assertEquals((-2675.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, squareSymbol0);
      assertEquals(4, plotRun0.size());
      
      Object object0 = plotRun0.get(3);
      Object object1 = plotRun0.set(3, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      StringContent stringContent0 = new StringContent(1);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle("n>!N", (Style) null);
      Color color0 = defaultStyledDocument0.getForeground(styleContext_NamedStyle0);
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.setLineColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set(13, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        plotRun0.set(0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.remove(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add(0, (Object) null);
      // Undeclared exception!
      try { 
        plotRun0.getMinY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRun0.addAll((Collection) arrayList0);
      // Undeclared exception!
      try { 
        plotRun0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.add((-2505), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2505, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      // Undeclared exception!
      try { 
        plotRun0.add(0, (Object) jTable_PrintMode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JTable$PrintMode cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((PlotDatum[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BoxLRSymbol boxLRSymbol0 = new BoxLRSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, boxLRSymbol0);
      PlotRun plotRun1 = (PlotRun)plotRun0.clone();
      assertEquals(7, plotRun0.size());
      assertEquals(7, plotRun1.size());
      assertNotSame(plotRun1, plotRun0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, boxULSymbol0);
      Color color0 = new Color(21);
      plotRun0.setLineColor(color0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle1Symbol0);
      plotRun0.setPlotSymbol(boxULSymbol0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, rTriangle1Symbol0);
      double double0 = plotRun0.getMaxY();
      assertEquals(9, plotRun0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, rTriangle1Symbol0);
      double double0 = plotRun0.getMinY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, boxULSymbol0);
      double double0 = plotRun0.getMaxX();
      assertEquals(4.9E-324, double0, 0.01);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, squareSymbol0);
      double double0 = plotRun0.getMinX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      PlotRun plotRun0 = new PlotRun(arrayList0);
      double double0 = plotRun0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      PlotDatum plotDatum0 = new PlotDatum(1940.12, 1940.12, true);
      linkedHashSet0.add(plotDatum0);
      PlotRun plotRun0 = new PlotRun(linkedHashSet0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRun0.addAll((Collection) arrayList0);
      // Undeclared exception!
      try { 
        plotRun0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, doubleArray1, false, (PlotSymbol) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, (double[]) null, false, (PlotSymbol) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((double[]) null, (double[]) null, false, diamondSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      PlotRun plotRun0 = new PlotRun(arrayList0);
      plotRun0.clear();
      assertEquals(0, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun plotRun1 = new PlotRun(plotRun0);
      assertTrue(plotRun1.equals((Object)plotRun0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.remove((-1391));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRun0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<PlotDatum> linkedHashSet0 = new LinkedHashSet<PlotDatum>();
      PlotRun plotRun0 = new PlotRun(linkedHashSet0);
      // Undeclared exception!
      try { 
        plotRun0.get(1830);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1830, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set((-4699), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
