/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:53:35 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.DiamondSymbol;
import jahuwaldt.plot.RTriangle1Symbol;
import java.awt.Color;
import java.awt.Graphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      assertEquals(8, rTriangle1Symbol0.getSize());
      
      rTriangle1Symbol0.setSize(0);
      int int0 = rTriangle1Symbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      int int0 = rTriangle1Symbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      rTriangle1Symbol0.setSize((-3197));
      int int0 = rTriangle1Symbol0.getSize();
      assertEquals((-3197), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      Color color0 = new Color(0, true);
      diamondSymbol0.setFillColor(color0);
      diamondSymbol0.getFillColor();
      assertEquals(8, diamondSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      Color color0 = Color.gray;
      rTriangle1Symbol0.setFillColor(color0);
      rTriangle1Symbol0.getFillColor();
      assertEquals(8, rTriangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      rTriangle1Symbol0.setBorderColor((Color) null);
      rTriangle1Symbol0.getBorderColor();
      assertEquals(8, rTriangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      // Undeclared exception!
      try { 
        rTriangle1Symbol0.draw((Graphics) null, 2305, 2305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PolygonSymbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      rTriangle1Symbol0.getFillColor();
      assertEquals(8, rTriangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      rTriangle1Symbol0.getBorderColor();
      assertEquals(8, rTriangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      Color color0 = new Color(0, true);
      rTriangle1Symbol0.setBorderColor(color0);
      rTriangle1Symbol0.getBorderColor();
      assertEquals(8, rTriangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      RTriangle1Symbol rTriangle1Symbol1 = (RTriangle1Symbol)rTriangle1Symbol0.clone();
      assertEquals(8, rTriangle1Symbol1.getSize());
      assertNotSame(rTriangle1Symbol1, rTriangle1Symbol0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      Color color0 = new Color(32, true);
      diamondSymbol0.setFillColor(color0);
      diamondSymbol0.getFillColor();
      assertEquals(8, diamondSymbol0.getSize());
  }
}
