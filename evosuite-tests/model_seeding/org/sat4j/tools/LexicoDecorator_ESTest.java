/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:20:43 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LexicoDecorator_ESTest extends LexicoDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      LexicoDecorator<FullClauseSelectorSolver<GateTranslator>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      int[] intArray0 = new int[1];
      lexicoDecorator0.prevmodelwithinternalvars = intArray0;
      boolean boolean0 = lexicoDecorator0.admitABetterSolution();
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      LexicoDecorator<GroupClauseSelectorSolver<DimacsStringSolver>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<DimacsStringSolver>>(groupClauseSelectorSolver0);
      boolean boolean0 = lexicoDecorator0.manageUnsatCase();
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardSolutionsForOptimizing();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>((GateTranslator) null, true);
      LexicoDecorator<FullClauseSelectorSolver<GateTranslator>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((-2663)).when(fullClauseSelectorSolver0).nVars();
      LexicoDecorator<FullClauseSelectorSolver<GateTranslator>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3323;
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(fullClauseSelectorSolver0).model();
      doReturn(false).when(fullClauseSelectorSolver0).model(anyInt());
      doReturn((int[]) null).when(fullClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(1771, 3323, 0).when(fullClauseSelectorSolver0).nVars();
      LexicoDecorator<FullClauseSelectorSolver<GateTranslator>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<DimacsStringSolver>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<FullClauseSelectorSolver<DimacsStringSolver>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<DimacsStringSolver>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardCurrentSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.calculateObjective();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(fullClauseSelectorSolver0).model();
      doReturn((int[]) null).when(fullClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0, 0).when(fullClauseSelectorSolver0).nVars();
      LexicoDecorator<FullClauseSelectorSolver<GateTranslator>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      Number number0 = lexicoDecorator0.getObjectiveValue();
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>((ModelIterator) null);
      int[] intArray0 = lexicoDecorator0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.fixCriterionValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<DimacsStringSolver>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<FullClauseSelectorSolver<DimacsStringSolver>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<DimacsStringSolver>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.addCriterion((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      boolean boolean0 = lexicoDecorator0.nonOptimalMeansSatisfiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LexicoDecorator<LexicoDecorator<StatisticsSolver>> lexicoDecorator0 = new LexicoDecorator<LexicoDecorator<StatisticsSolver>>((LexicoDecorator<StatisticsSolver>) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.model(128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      LexicoDecorator<NegationDecorator<StatisticsSolver>> lexicoDecorator0 = new LexicoDecorator<NegationDecorator<StatisticsSolver>>(negationDecorator0);
      int[] intArray0 = lexicoDecorator0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.setTimeoutForFindingBetterSolution(3879);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      boolean boolean0 = lexicoDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>((SubModelIterator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.forceObjectiveValueTo(5000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LexicoDecorator<GroupClauseSelectorSolver<SingleSolutionDetector>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<SingleSolutionDetector>>((GroupClauseSelectorSolver<SingleSolutionDetector>) null);
      boolean boolean0 = lexicoDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.getObjectiveValue(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ModelIterator modelIterator0 = new ModelIterator(solutionCounter0);
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>(modelIterator0);
      int int0 = lexicoDecorator0.numberOfCriteria();
      assertEquals(0, int0);
  }
}
