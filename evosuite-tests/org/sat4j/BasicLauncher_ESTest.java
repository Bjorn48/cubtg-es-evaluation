/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:34:51 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicLauncher_ESTest extends BasicLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<ManyCore<DimacsStringSolver>> aSolverFactory0 = (ASolverFactory<ManyCore<DimacsStringSolver>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ManyCore<DimacsStringSolver>> basicLauncher0 = new BasicLauncher<ManyCore<DimacsStringSolver>>(aSolverFactory0);
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[6];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslator0;
      gateTranslatorArray0[2] = gateTranslator0;
      gateTranslatorArray0[3] = gateTranslator0;
      gateTranslatorArray0[4] = gateTranslator0;
      gateTranslatorArray0[5] = gateTranslator0;
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(true, gateTranslatorArray0);
      Reader reader0 = basicLauncher0.createReader(manyCore0, "+");
      assertFalse(reader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>(aSolverFactory0);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        basicLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("c ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>((ASolverFactory<DimacsOutputSolver>) null);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>((ASolverFactory<DimacsOutputSolver>) null);
      // Undeclared exception!
      try { 
        basicLauncher0.getInstanceName((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>>(aSolverFactory0);
      basicLauncher0.usage();
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>((ASolverFactory<DimacsOutputSolver>) null);
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[10];
      BasicLauncher.main(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BasicLauncher.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.sat4j.tools.DimacsOutputSolver";
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
