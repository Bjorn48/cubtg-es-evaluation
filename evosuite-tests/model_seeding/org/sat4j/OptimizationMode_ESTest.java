/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:30:58 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ModelIteratorToSATAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptimizationMode_ESTest extends OptimizationMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UNKNOWN");
      // Undeclared exception!
      try { 
        optimizationMode0.solve((IProblem) null, groupedCNFReader0, iLogAble0, mockPrintWriter0, 1473L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'zal0c2vks+KG.';s");
      // Undeclared exception!
      try { 
        optimizationMode0.solve(dimacsOutputSolver0, groupedCNFReader0, iLogAble0, mockPrintWriter0, 0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        optimizationMode0.onSolutionFound(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(iSolver0, iSolver0, mUSLauncher0, printWriter0, (Reader) null, 344L, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(minOneDecorator0).getSolvingEngine();
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, false);
      fullClauseSelectorSolver0.setTimeout(0);
      OptimizationMode optimizationMode1 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, 0, optimizationMode1);
      modelIteratorToSATAdapter0.getSolvingEngine();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "c ";
      stringArray0[1] = "c ";
      stringArray0[2] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      iSolver0.nVars();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter1);
      optimizationMode0.displayResult((ISolver) null, iSolver0, mUSLauncher0, printWriter0, (Reader) null, 0, false);
      optimizationMode1.getCurrentExitCode();
      optimizationMode0.displayResult(iSolver0, (IProblem) null, mUSLauncher0, printWriter0, (Reader) null, 0, true);
      //  // Unstable assertion: assertEquals("c starts\t\t: 0\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: 0.0\nc non guided choices\t: 0\ns UNSATISFIABLE\n", stringWriter0.toString());
      //  // Unstable assertion: assertEquals("c starts\t\t: 0\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: 0.0\nc non guided choices\t: 0\ns UNSATISFIABLE\n", stringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      optimizationMode0.displayResult(iSolver0, (IProblem) null, mUSLauncher0, printWriter0, (Reader) null, 0, true);
      assertEquals("c starts\t\t: 0\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: 0.0\nc non guided choices\t: 0\ns UNKNOWN\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iOptimizationProblem0).admitABetterSolution();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      optimizationMode0.solve(iOptimizationProblem0, groupedCNFReader0, iLogAble0, printWriter0, (-772L));
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iOptimizationProblem0).admitABetterSolution();
      doReturn((-1498)).when(iOptimizationProblem0).getObjectiveValue();
      doReturn(false).when(iOptimizationProblem0).nonOptimalMeansSatisfiable();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      optimizationMode0.solve(iOptimizationProblem0, groupedCNFReader0, iLogAble0, printWriter0, (-772L));
      assertEquals(ExitCode.OPTIMUM_FOUND, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iOptimizationProblem0).admitABetterSolution();
      doReturn(true).when(iOptimizationProblem0).hasNoObjectiveFunction();
      doReturn(true).when(iOptimizationProblem0).nonOptimalMeansSatisfiable();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G[pV{Ux/");
      optimizationMode0.solve(iOptimizationProblem0, groupedCNFReader0, iLogAble0, mockPrintWriter0, (-755L));
      assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      //  // Unstable assertion: assertEquals(ExitCode.SATISFIABLE, optimizationMode0.getCurrentExitCode());
      
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iOptimizationProblem0).admitABetterSolution();
      doReturn((Number) null).when(iOptimizationProblem0).getObjectiveValue();
      doReturn(false).when(iOptimizationProblem0).nonOptimalMeansSatisfiable();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      optimizationMode0.solve(iOptimizationProblem0, groupedCNFReader0, iLogAble0, printWriter0, (-772L));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      Double double0 = new Double(834.0);
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iOptimizationProblem0).admitABetterSolution();
      doReturn(834, double0, double0, double0, double0).when(iOptimizationProblem0).getObjectiveValue();
      doReturn(false).when(iOptimizationProblem0).hasNoObjectiveFunction();
      doReturn(true).when(iOptimizationProblem0).nonOptimalMeansSatisfiable();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      optimizationMode0.solve(iOptimizationProblem0, groupedCNFReader0, iLogAble0, printWriter0, (-772L));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "c ";
      stringArray0[1] = "c ";
      stringArray0[2] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      iSolver0.nVars();
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[2];
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "c ", 0, 0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter1);
      optimizationMode0.getCurrentExitCode();
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(iSolver0, iSolver0, mUSLauncher0, printWriter0, (Reader) null, 0L, false);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.sat4j.tools.xplain.Xplain cannot be cast to org.sat4j.specs.IOptimizationProblem
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(iSolver0, iSolver0, mUSLauncher0, printWriter0, (Reader) null, 0, true);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      optimizationMode0.onUnsatTermination();
      assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      optimizationMode0.setIncomplete(false);
      assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      ExitCode exitCode0 = optimizationMode0.getCurrentExitCode();
      optimizationMode0.setExitCode(exitCode0);
      assertEquals(0, exitCode0.value());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      // Undeclared exception!
      try { 
        optimizationMode0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }
}
