/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:37:46 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 66);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      VecInt vecInt1 = new VecInt(66, 1);
      assertEquals(66, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.last());
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      int int0 = minWatchCard0.getAssertionLevel(vecInt1, 66);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(66, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.last());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals((-1), int0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt1.last());
      assertEquals(6, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, 66);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(6, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(6, intArray0.length);
      assertNotNull(minWatchCard0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, 3522);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(6, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(2, 2);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1030));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-1030), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-356));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-356), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.calcReasonOnTheFly((-356), iVecInt0, iVecInt0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-356), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 66);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, vecInt0, false, 66);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertEquals((-66), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard1.size());
      assertFalse(minWatchCard1.simplify());
      assertFalse(minWatchCard1.learnt());
      assertTrue(minWatchCard1.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard1);
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      
      boolean boolean0 = minWatchCard1.equals(minWatchCard0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertEquals((-66), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard1.size());
      assertFalse(minWatchCard1.simplify());
      assertFalse(minWatchCard1.learnt());
      assertTrue(minWatchCard1.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertFalse(minWatchCard0.equals((Object)minWatchCard1));
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      assertNotSame(minWatchCard0, minWatchCard1);
      assertNotSame(minWatchCard1, minWatchCard0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1041);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.1);
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, false, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1805.6572557321301, 2147483627, 1805.6572557321301, 2147483627);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      ILits iLits0 = solver0.getVocabulary();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.undo(2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(9, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(Integer.MAX_VALUE, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      SearchParams searchParams0 = new SearchParams(0, 0, 0.0, 0);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      minWatchCard0.remove(solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(9, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(Integer.MAX_VALUE, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 970);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals((-969), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      PureOrder pureOrder0 = new PureOrder(16);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(16, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, eMARestarts0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(16, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, (-2159));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      SearchParams searchParams0 = new SearchParams((-2073.34397), 46);
      assertEquals(46, searchParams0.getInitConflictBound());
      assertEquals((-2073.34397), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(46, searchParams0.getInitConflictBound());
      assertEquals((-2073.34397), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, iVecInt0, false, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1044);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.calcReason((-110), vecInt0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(0, intArray0.length);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.register();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      MinWatchCard minWatchCard1 = (MinWatchCard)minWatchCard0.toConstraint();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertTrue(minWatchCard1.locked());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertEquals((-1), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard1.size());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard1.simplify());
      assertFalse(minWatchCard1.learnt());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard1);
      assertSame(minWatchCard0, minWatchCard1);
      assertSame(minWatchCard1, minWatchCard0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1805.6572557321301, (-1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      ILits iLits0 = solver0.getVocabulary();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.size();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 2656);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(2656, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(2656, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2656, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      IVecInt iVecInt0 = fullClauseSelectorSolver1.getLastClause();
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-1));
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      ILits iLits0 = minWatchCard0.getVocabulary();
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 66);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      int[] intArray1 = minWatchCard0.getLits();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(66, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(0, (-505));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 105);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(105, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.get(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(105, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(0, int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 60);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-51), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.get(0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-51), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(2, 2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1030));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1030), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-1030));
      assertEquals((-1030), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(9, intArray0.length);
      assertNotNull(subsetVarOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(161);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(161, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1030), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(161, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(9, intArray0.length);
      assertNotNull(solver0);
      
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1030), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertEquals((-1030), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(161, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(minWatchCard1.locked());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertEquals((-1030), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertFalse(minWatchCard1.simplify());
      assertFalse(minWatchCard1.learnt());
      assertEquals(2, minWatchCard1.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard1);
      assertSame(minWatchCard0, minWatchCard1);
      assertSame(minWatchCard1, minWatchCard0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1805.6572557321301, 2147483627, 1805.6572557321301, 2147483627);
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      ILits iLits0 = solver0.getVocabulary();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.undo(2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2.147483627E9, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483627, searchParams0.getInitConflictBound());
      assertEquals(1805.6572557321301, searchParams0.getVarDecay(), 0.01);
      assertEquals(1805.6572557321301, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard1.learnt());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard1.simplify());
      assertEquals(0, minWatchCard1.size());
      assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard1.locked());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard1);
      assertSame(minWatchCard0, minWatchCard1);
      assertSame(minWatchCard1, minWatchCard0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 2438);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2438, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1041, 1041);
      assertEquals(1041, vecInt0.size());
      assertEquals(1041, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1041);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(1041, minWatchCard0.size());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("l,])iy <H9ejL,t");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1041
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(1, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(1, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(998, 998);
      assertEquals(998, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(998, vecInt0.last());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 998);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertEquals(998, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(998, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 998
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-13));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(5, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(5, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = 371;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(18, vecInt0.size());
      assertEquals(18, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(18, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(18, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 370
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 371;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {371, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      assertArrayEquals(new int[] {371, 0}, intArray0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 370
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(0, (-505));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 371;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {371, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      assertArrayEquals(new int[] {371, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 371
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      SearchParams searchParams0 = new SearchParams(1041, (-1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1041.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(0, (-505));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      PureOrder pureOrder0 = new PureOrder((-505));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-505), pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-505), pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1041.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-505), pureOrder0.getPeriod());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, (RestartStrategy) null);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-8);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-8)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-8), vecInt0.last());
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, false, (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt(450, 2147483627);
      assertFalse(vecInt0.isEmpty());
      assertEquals(450, vecInt0.size());
      assertEquals(2147483627, vecInt0.last());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation((ILits) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1047, (-505));
      assertEquals(1047, vecInt0.size());
      assertEquals((-505), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(lits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -505
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1041);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 7);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(7, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      IVecInt iVecInt0 = fullClauseSelectorSolver1.getLastClause();
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      iVecInt0.unsafePush(1320);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(1320, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1814);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(1814, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals(1, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1320
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[9];
      intArray0[6] = 3895;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 3895, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 3895, 0, 0}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(minWatchCard0.locked());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3894
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.calcReason(1299, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1044, 1044);
      assertEquals(1044, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1044, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(1044, minWatchCard0.size());
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.calcReason(0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1044
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(2, minWatchCard0.size());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-22);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-22), 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 109);
      assertArrayEquals(new int[] {(-22), 0, 0, 0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(109, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(5, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(5, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -22
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertNotNull(readOnlyVecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, readOnlyVecInt0, true, (-4606));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, true, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1033);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 2550);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0, readOnlyVecInt0.size());
      assertNotNull(readOnlyVecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, 571);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, (IVecInt) null, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1041);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.normalize();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertEquals(2, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      int int0 = minWatchCard0.size();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertEquals(2, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(2, intArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      DotSearchTracing<MinWatchCard> dotSearchTracing0 = new DotSearchTracing<MinWatchCard>("[");
      assertNotNull(dotSearchTracing0);
      
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(2, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertEquals("0[?] 0[?] >= 3", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1044);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      String string0 = minWatchCard0.toString((VarMapper) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(1041);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1041);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      assertNotNull(dotSearchTracing0);
      
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, false, 60);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(9, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-51), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, 1041);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(9, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-51), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 66);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-60), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(6, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(6, intArray0.length);
      assertNotNull(minWatchCard0);
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(2, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1521);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1521, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(9, intArray0.length);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, minWatchCard0.size());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.calcReasonOnTheFly(47, vecInt0, vecInt0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, minWatchCard0.size());
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(16384);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(minWatchCard0.locked());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertNotNull(minWatchCard0);
      
      minWatchCard0.hashCode();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(minWatchCard0.locked());
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, false, 1207);
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      SearchParams searchParams0 = new SearchParams(1207);
      PureOrder pureOrder0 = new PureOrder(Integer.MAX_VALUE);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      MinWatchCard minWatchCard2 = minWatchCard1.computePropagation(solver0);
      assertNotNull(minWatchCard2);
      
      boolean boolean0 = minWatchCard0.equals(minWatchCard2);
      assertEquals((-1207), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
      assertFalse(minWatchCard2.equals((Object)minWatchCard0));
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      boolean boolean0 = minWatchCard0.equals(minWatchCard0);
      assertTrue(boolean0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      boolean boolean0 = minWatchCard0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1041);
      boolean boolean0 = minWatchCard0.equals("");
      assertFalse(boolean0);
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 468);
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Lits lits0 = new Lits();
      SearchParams searchParams0 = new SearchParams(1041, (-1));
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      IVecInt iVecInt1 = iVecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt1, true, 0);
      minWatchCard0.computePropagation(solver0);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-7));
      minWatchCard0.computeWatches();
      assertEquals((-7), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1805.6572557321301, 2147483627, 1805.6572557321301, 2147483627);
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1041);
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, noRestarts0);
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 66);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      String string0 = minWatchCard0.toString();
      assertEquals("+x0[?] +x0[?] >= 3", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      minWatchCard0.toString();
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ASolverFactory<GroupClauseSelectorSolver<GateTranslator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<GateTranslator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<GateTranslator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<GateTranslator>>(aSolverFactory0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, fixedPeriodRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-1));
      minWatchCard0.remove(solver0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1));
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 1363);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Lits lits0 = new Lits();
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NoRestarts noRestarts0 = new NoRestarts();
      VecInt vecInt0 = new VecInt(66, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 66);
      PureOrder pureOrder0 = new PureOrder(0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, noRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      Lits lits0 = new Lits();
      Constr constr0 = MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, true, (-1085));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, naturalStaticOrder0, (RestartStrategy) null);
      Constr constr0 = MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, false, 0);
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(constr0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, (RestartStrategy) null);
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, false, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, 60);
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, noRestarts0);
      ILits iLits1 = levelBasedVarOrderHeap0.getVocabulary();
      minWatchCard0.assertConstraint(solver0);
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits1, vecInt0, false, 1041);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, (-505));
      vecInt0.push(0);
      int int0 = MinWatchCard.linearisation(lits0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, 60);
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, noRestarts0);
      ILits iLits1 = levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits1, vecInt0, false, 60);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard1.calcReason(1041, vecInt0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-7));
      minWatchCard0.calcReason(104, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals((-7), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      minWatchCard0.calcReason((-1), vecInt0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 182);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      IVecInt iVecInt0 = vecInt0.push((-1686));
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 2550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1685
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, (-505));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 7);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1044);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      boolean boolean0 = minWatchCard0.learnt();
      assertFalse(boolean0);
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver1.getLastClause();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 1320);
      minWatchCard0.incActivity(1.1);
      assertEquals((-1320), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 0);
      minWatchCard0.setActivity(0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1411);
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1041);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1041);
      double double0 = minWatchCard0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1041, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1044);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      boolean boolean0 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      boolean boolean0 = minWatchCard0.locked();
      assertTrue(boolean0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-356));
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-356), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-3015));
      minWatchCard0.forwardActivity((-3015));
      assertEquals((-3015), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1877));
      // Undeclared exception!
      try { 
        minWatchCard0.get((-2295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2295
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      boolean boolean0 = minWatchCard0.canBePropagatedMultipleTimes();
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ASolverFactory<GroupClauseSelectorSolver<GateTranslator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<GateTranslator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<GateTranslator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<GateTranslator>>(aSolverFactory0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, fixedPeriodRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-1));
      minWatchCard0.getLits();
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      minWatchCard0.rescaleBy((-1));
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1044);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1044);
      minWatchCard0.getVocabulary();
      assertEquals(1044, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }
}
