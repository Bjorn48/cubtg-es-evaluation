/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:56:32 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GateTranslator_ESTest extends GateTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(minOneDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(gateTranslator0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Vec<BigInteger> vec0 = new Vec<BigInteger>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      gateTranslator0.optimisationFunction(iVecInt0, vec0, vecInt0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(128);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertNotNull(dimacsStringSolver0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(gateTranslator0);
      
      gateTranslator0.xor((-1310), 102, 0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(4, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(dimacsOutputSolver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(gateTranslator0);
      
      gateTranslator0.halfAdderSum(0, 654, (-2365));
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(1180);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1180, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1180, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1180, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(gateTranslator0);
      
      gateTranslator0.halfAdderCarry(1180, 1180, 1180);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1180, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1180, solver0.realNumberOfVariables());
      assertEquals(1180, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(128);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertNotNull(dimacsStringSolver0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(gateTranslator0);
      
      gateTranslator0.fullAdderCarry(17, 1089, 6, (-2178));
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(6, dimacsStringSolver0.nConstraints());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.not((-3742), 2);
      assertEquals(2, iConstrArray0.length);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.nConstraints());
      assertEquals(3742, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3742, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(iConstrArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.it(2, 2, (-2276));
      assertEquals(3, iConstrArray0.length);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(2276, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.nConstraints());
      assertEquals(2276, solver0.nVars());
      assertNotNull(iConstrArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      VecInt vecInt0 = new VecInt(2516);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IConstr[] iConstrArray0 = gateTranslator0.halfOr(2516, vecInt0);
      assertEquals(0, iConstrArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(iConstrArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(gateTranslator0);
      
      UnitClause unitClause0 = (UnitClause)gateTranslator0.gateTrue(3);
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.nVars());
      assertEquals(1, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertNotNull(unitClause0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertNotNull(dimacsStringSolver0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertNotNull(gateTranslator0);
      
      IConstr iConstr0 = gateTranslator0.gateFalse((-1078));
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(1, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(gateTranslator0);
      
      UnitClause unitClause0 = (UnitClause)gateTranslator0.gateFalse(302);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(302, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(302, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nConstraints());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(unitClause0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder0 = new PureOrder(1181);
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, eMARestarts0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertNotNull(minOneDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.and(3221, 3221, 1799);
      assertEquals(3, iConstrArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(3221, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nConstraints());
      assertEquals(3221, solver0.nVars());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertNotNull(iConstrArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(minOneDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor(58, (IVecInt) vecInt0);
      assertEquals(0, intArray0.length);
      assertEquals(1, iConstrArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(58, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(58, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-58), vecInt0.last());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(iConstrArray0);
      
      try { 
        gateTranslator0.xor(58, (IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      assertNotNull(readOnlyVecInt0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.xor((-2761), (IVecInt) readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((-8)).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(fullClauseSelectorSolver1, vecInt0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.xor((-8), (IVecInt) vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      VecInt vecInt0 = new VecInt(2516);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.xor(2516, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.xor(4, 2750, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2516);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor((-2597), (IVecInt) vecInt0);
      assertEquals(1, iConstrArray0.length);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2597, vecInt0.last());
      assertEquals(1, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2597, solver0.nVars());
      assertEquals(2597, solver0.realNumberOfVariables());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(iConstrArray0);
      
      try { 
        gateTranslator0.or((-2597), vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      VecInt vecInt0 = new VecInt(2516);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.or(2516, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver1);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver1);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(minOneDecorator0);
      
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      assertNotNull(groupClauseSelectorSolver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(groupClauseSelectorSolver0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.or(682, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver1);
      
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(gateTranslator0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(statisticsSolver0, checkMUSSolutionListener0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(fullClauseSelectorSolver2.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver2);
      
      IVecInt iVecInt0 = fullClauseSelectorSolver2.getLastClause();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(fullClauseSelectorSolver2.isSkipDuplicatedEntries());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = iVecInt0.pop();
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(fullClauseSelectorSolver2.isSkipDuplicatedEntries());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1), iVecInt1.size());
      assertNotNull(iVecInt1);
      
      // Undeclared exception!
      try { 
        gateTranslator0.or((-1), iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(fullClauseSelectorSolver0).nVars();
      doReturn(1119, 0, 0, 0, 0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(gateTranslator0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(gateTranslator0);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor(301, iVecInt0);
      assertEquals(1, iConstrArray0.length);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals((-301), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iConstrArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Vec<BigInteger> vec0 = new Vec<BigInteger>(5, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<BigInteger> readOnlyVec0 = new ReadOnlyVec<BigInteger>(vec0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(5, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      IVecInt iVecInt1 = iVecInt0.push((-2270));
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals((-2270), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-2270), iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      assertNotNull(iVecInt1);
      
      // Undeclared exception!
      try { 
        gateTranslator0.optimisationFunction(iVecInt0, readOnlyVec0, (IVecInt) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2516, 2516);
      assertEquals(2516, vecInt0.last());
      assertEquals(2516, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      BigInteger[] bigIntegerArray0 = new BigInteger[0];
      Vec<BigInteger> vec0 = new Vec<BigInteger>(bigIntegerArray0);
      assertEquals(0, bigIntegerArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.optimisationFunction(vecInt0, vec0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(gateTranslator0);
      
      try { 
        gateTranslator0.not(3, 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.not(4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(282, 0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver1);
      
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.not((-1), 13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(gateTranslator0);
      
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor(296, (IVecInt) vecInt0);
      assertEquals(1, iConstrArray0.length);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(296, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(296, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-296), vecInt0.last());
      assertNotNull(iConstrArray0);
      
      IConstr[] iConstrArray1 = gateTranslator0.xor(3, (IVecInt) vecInt0);
      assertEquals(2, iConstrArray1.length);
      assertFalse(iConstrArray1.equals((Object)iConstrArray0));
      assertNotSame(iConstrArray1, iConstrArray0);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(296, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(296, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals((-3), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iConstrArray1);
      
      try { 
        gateTranslator0.ite(296, 1, 1, 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.ite(837, 303, 303, 303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver1);
      
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      assertTrue(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.ite(2, 2530, 2, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder0 = new PureOrder(1181);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1181, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, eMARestarts0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(minOneDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.ite(3221, 0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.it(1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-884));
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.it(1158, Integer.MAX_VALUE, 271);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver1);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(fullClauseSelectorSolver1);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(solutionCounter0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solutionCounter0);
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.it((-450), 305, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2516);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.or(1205, vecInt0);
      assertEquals(1, iConstrArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1205, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1205, solver0.nVars());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(iConstrArray0);
      
      try { 
        gateTranslator0.iff(1205, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(128, 128);
      assertEquals(128, vecInt0.last());
      assertEquals(128, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      gateTranslator0.iff(27, vecInt0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.iff(2516, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-884));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-884);
      intArray0[1] = (-884);
      intArray0[2] = (-884);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-884), vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertNotNull(vecInt0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-884), vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-884), vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.iff(Integer.MAX_VALUE, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver1);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(fullClauseSelectorSolver1, vecInt0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(abstractMinimalModel0);
      
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, (-553L));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(modelIterator0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.iff(63, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-884));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-884);
      intArray0[1] = (-884);
      intArray0[2] = (-884);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals((-884), vecInt0.last());
      assertNotNull(vecInt0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals((-884), vecInt0.last());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals((-884), vecInt0.last());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor((-884), (IVecInt) vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(8, iConstrArray0.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(884, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(884, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(884, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertNotNull(iConstrArray0);
      
      IConstr[] iConstrArray1 = gateTranslator0.and((-884), (IVecInt) vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(5, iConstrArray1.length);
      assertArrayEquals(new int[] {(-884), (-884), (-884)}, intArray0);
      assertFalse(iConstrArray1.equals((Object)iConstrArray0));
      assertNotSame(iConstrArray1, iConstrArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(884, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(884, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nConstraints());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(884, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertNotNull(iConstrArray1);
      
      try { 
        gateTranslator0.halfOr((-884), vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2550, 2550);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2550, vecInt0.last());
      assertEquals(2550, vecInt0.size());
      assertNotNull(vecInt0);
      
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.halfOr((-2591), vecInt0);
      assertEquals(2550, iConstrArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2550, vecInt0.last());
      assertEquals(2550, vecInt0.size());
      assertEquals(2550, solver0.nConstraints());
      assertEquals(2591, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2591, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(iConstrArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(modelIterator0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.halfOr((-1), (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.GateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2516);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(gateTranslator0);
      
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertNotNull(vecInt1);
      
      // Undeclared exception!
      try { 
        gateTranslator0.halfOr((-2591), vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.GateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.halfOr(27, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0.0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 0L, solutionFoundListener0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(gateTranslator0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IConstr[] iConstrArray0 = gateTranslator0.iff(32, vecInt0);
      assertEquals(0, iConstrArray0.length);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, solver0.realNumberOfVariables());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertEquals(32, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iConstrArray0);
      
      try { 
        gateTranslator0.halfAdderSum(32, 32, 32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertNotNull(maxSatDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(maxSatDecorator0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.halfAdderSum(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.halfAdderCarry(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.gateTrue(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder0 = new PureOrder(1181);
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, eMARestarts0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(minOneDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1181, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.gateTrue(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(47);
      assertEquals(47, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(47, percentLengthLearning0.getLimit());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      assertEquals(47, percentLengthLearning0.getLimit());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.gateFalse(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.fullAdderSum(2516, (-2443), 272, 2516);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-884));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[2];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, noRestarts0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(158);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(abstractMinimalModel0);
      
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(gateTranslator0);
      
      IConstr[] iConstrArray0 = gateTranslator0.xor((-884), (IVecInt) vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(1, iConstrArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-884), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nConstraints());
      assertEquals(884, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(884, solver0.realNumberOfVariables());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(884, vecInt0.last());
      assertNotNull(iConstrArray0);
      
      try { 
        gateTranslator0.and((-884), (IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      assertNotNull(gateTranslator0);
      
      // Undeclared exception!
      try { 
        gateTranslator0.and(0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.GateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(statisticsSolver0, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver2.getLastClause();
      // Undeclared exception!
      try { 
        gateTranslator0.and((-1), iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, fixedPeriodRestarts0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 425L, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        gateTranslator0.and(1053, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.GateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, true);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver1);
      // Undeclared exception!
      try { 
        gateTranslator0.and((-1), 500, 539);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(47);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      PureOrder pureOrder0 = new PureOrder(0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, eMARestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      GateTranslator gateTranslator0 = new GateTranslator(minOneDecorator0);
      // Undeclared exception!
      try { 
        gateTranslator0.and((-1312), 0, 3221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      VecInt vecInt0 = new VecInt(649);
      // Undeclared exception!
      try { 
        gateTranslator0.iff(649, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      VecInt vecInt0 = new VecInt(2516);
      // Undeclared exception!
      try { 
        gateTranslator0.xor((-109), (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt(57);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel((ISolver) null, vecInt0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        gateTranslator0.fullAdderCarry(11, 58, 58, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      // Undeclared exception!
      try { 
        gateTranslator0.xor(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      gateTranslator0.fullAdderSum(1402, 1402, 1402, (-2475));
      assertEquals(2475, iSolver0.realNumberOfVariables());
      assertEquals(2, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(6, 6);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel((ISolver) null, vecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, false);
      GateTranslator gateTranslator0 = new GateTranslator(maxSatDecorator0);
      // Undeclared exception!
      try { 
        gateTranslator0.halfAdderSum(6, (-990), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      // Undeclared exception!
      try { 
        gateTranslator0.and((-1501), 3564, 3564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(128);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      gateTranslator0.additionalFullAdderConstraints((-1), (-1), 3, 3, (-1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0, false);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, checkMUSSolutionListener0);
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        gateTranslator0.halfAdderCarry(158, 58, (-884));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<AbstractMinimalModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = new BigInteger[6];
      bigIntegerArray0[0] = bigInteger0;
      bigIntegerArray0[1] = bigInteger0;
      Vec<BigInteger> vec0 = new Vec<BigInteger>(bigIntegerArray0);
      ReadOnlyVec<BigInteger> readOnlyVec0 = new ReadOnlyVec<BigInteger>(vec0);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        gateTranslator0.optimisationFunction(vecInt0, readOnlyVec0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = new BigInteger[5];
      bigIntegerArray0[0] = bigInteger0;
      Vec<BigInteger> vec0 = new Vec<BigInteger>(bigIntegerArray0);
      VecInt vecInt0 = new VecInt(2208, 2208);
      // Undeclared exception!
      try { 
        gateTranslator0.optimisationFunction(vecInt0, vec0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.GateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      intArray0[0] = (-884);
      intArray0[1] = (-884);
      intArray0[2] = (-884);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      gateTranslator0.halfOr((-884), vecInt0);
      assertEquals(884, solver0.nVars());
      assertEquals(884, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        gateTranslator0.and((-884), (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(subModelIterator0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      IConstr[] iConstrArray0 = gateTranslator0.ite(1, 1, 14, 2134);
      assertEquals(6, iConstrArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      intArray0[0] = (-884);
      intArray0[1] = (-884);
      intArray0[2] = (-884);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      gateTranslator0.xor((-884), (IVecInt) vecInt0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Vec<BigInteger> vec0 = new Vec<BigInteger>(47, bigInteger0);
      ReadOnlyVec<BigInteger> readOnlyVec0 = new ReadOnlyVec<BigInteger>(vec0);
      gateTranslator0.optimisationFunction(vecInt0, readOnlyVec0, vecInt0);
      assertEquals(890, vecInt0.last());
      assertEquals(25, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        gateTranslator0.xor((-884), (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        gateTranslator0.it((-115), 0, 1116);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      // Undeclared exception!
      try { 
        gateTranslator0.gateFalse((-1975));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      intArray0[0] = (-884);
      intArray0[1] = (-884);
      intArray0[2] = (-884);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Vec<BigInteger> vec0 = new Vec<BigInteger>(47, bigInteger0);
      ReadOnlyVec<BigInteger> readOnlyVec0 = new ReadOnlyVec<BigInteger>(vec0);
      gateTranslator0.optimisationFunction(vecInt0, readOnlyVec0, vecInt0);
      assertEquals(2, vecInt0.last());
      assertEquals(11, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      // Undeclared exception!
      try { 
        gateTranslator0.not(1181, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(subModelIterator0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(modelIteratorToSATAdapter0);
      IConstr iConstr0 = gateTranslator0.gateTrue((-71));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-884));
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        gateTranslator0.iff(58, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
