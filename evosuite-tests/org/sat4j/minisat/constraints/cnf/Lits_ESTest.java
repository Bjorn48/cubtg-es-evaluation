/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:37:29 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.Propagatable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lits_ESTest extends Lits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isImplied((-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -203
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.undos((-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -40
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        lits0.setReason((-1009), atLeast0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -505
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getLevel((-1208));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -604
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-272));
      lits0.reset(545);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Lits.toStringX((-2579));
      assertEquals("-x-1290", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      lits0.unassign(1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(810);
      int int0 = lits0.nextFreeVarId(true);
      assertEquals(1, lits0.realnVars());
      assertEquals(811, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(129);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1883);
      lits0.getFromPool(1);
      assertEquals(2, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.getFromPool(129);
      assertEquals(129, lits0.nVars());
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(129);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      lits0.setReason(0, atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.setLevel(0, (-1));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(3457);
      lits0.watch(6914, (Propagatable) null);
      assertEquals(3457, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      lits0.watches(2);
      assertEquals(1, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(4);
      lits0.undos(8);
      assertEquals(4, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(128);
      int int0 = lits0.realnVars();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(1);
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not((-850));
      assertEquals(0, lits0.realnVars());
      assertEquals((-849), int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(16384);
      int int0 = lits0.nVars();
      assertEquals(1, lits0.realnVars());
      assertEquals(16384, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isUnassigned(1);
      assertEquals(0, lits0.nVars());
      assertTrue(boolean0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isSatisfied(0);
      assertTrue(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isSatisfied(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isFalsified(0);
      assertEquals(0, lits0.realnVars());
      assertTrue(boolean0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isFalsified(208);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getLevel(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(3468);
      int int0 = lits0.getLevel(6936);
      assertEquals(1, lits0.realnVars());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watches((-1525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1525
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(3449, 128);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        lits0.watch(3449, originalBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3449
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.valueToString(3971);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3971
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.setLevel((-18), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.satisfies(659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 659
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(16384);
      // Undeclared exception!
      lits0.resetPool();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isUnassigned(3334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3334
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isSatisfied(2054);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2055
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isFalsified(1133);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1133
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getReason((-4143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2072
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.forgets(167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 334
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nextFreeVarId(false);
      assertEquals(1, int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = Lits.toStringX(4);
      assertEquals("+x2", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = Lits.toString(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = Lits.toString((-1605));
      assertEquals("--803", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(6);
      String string0 = lits0.valueToString(6);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      String string0 = lits0.valueToString(128);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(2);
      boolean boolean0 = lits0.isUnassigned(2);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(6);
      String string0 = lits0.valueToString(7);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(126);
      // Undeclared exception!
      try { 
        lits0.satisfies(126);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(1);
      // Undeclared exception!
      try { 
        lits0.satisfies(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(126);
      lits0.unassign(126);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      lits0.unassign(0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign((-775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -775
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool((-588));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(795);
      assertEquals(795, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(4);
      lits0.resetPool();
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(2984);
      boolean boolean0 = lits0.belongsToPool(2984);
      assertEquals(2984, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool((-2428));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(2984);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(24);
      int int0 = lits0.getFromPool(24);
      assertEquals(1, lits0.realnVars());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-272));
      boolean boolean0 = lits0.isImplied(545);
      assertEquals(1, lits0.realnVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(117);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.watches(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.realnVars();
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watch(0, (Propagatable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.undos(8);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(301);
      assertEquals(300, int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 545
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nVars();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      SearchParams searchParams0 = new SearchParams((-799.213601), 1.0E-20, 117, 0);
      PureOrder pureOrder0 = new PureOrder(111);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      atLeast0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.capacity();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getReason(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isUnassigned(0);
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
  }
}
