/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:32:52 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream0 = new JavaCharStream(reader0);
      javaCharStream0.available = 0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', '5').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4", (String) null).when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 935).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, 11).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), 935).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 47).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'k', 'b').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      token0.endColumn = (-1184);
      token0.beginLine = 0;
      token0.image = "6.0Eg";
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEA_C)Q&@$)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(52);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = javaParserTokenManager1.getNextToken();
      token0.next = token1;
      javaParserTokenManager1.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager2.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', '|').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), (-76)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 123).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 2, 2).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 65).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '.', 'w').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.lengthOfMatch = 40;
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-36);
      byteArray0[7] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6JUc1(nvtyHw4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      Token token0 = javaParserTokenManager1.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token1);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager4 = null;
      try {
        javaParserTokenManager4 = new JavaParserTokenManager((JavaCharStream) null, (-4095));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4095. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager1.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '&').when(javaCharStream0).BeginToken();
      doReturn(2263, 69, 387).when(javaCharStream0).getBeginColumn();
      doReturn(21, 69, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 30, (-931)).when(javaCharStream0).getEndColumn();
      doReturn(3542, 1515, 565).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      Token.newToken(60);
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 105;
      javaParserTokenManager0.jjmatchedKind = 85;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 'a').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, (int)'s', 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('s', '<', 's', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = Token.newToken((-5659));
      token1.endColumn = (-1184);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2544, 367);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2544, column 368.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 's').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token1.image = "6.0Eg";
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(10).when(javaCharStream0).getEndColumn();
      doReturn(10).when(javaCharStream0).getEndLine();
      doReturn('%', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.curChar = '?';
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 0, 5100);
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (int)'<').when(javaCharStream0).getBeginLine();
      doReturn(574, 574).when(javaCharStream0).getEndColumn();
      doReturn(574, 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', '^').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(50);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null, 574);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 574. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', '%').when(javaCharStream0).BeginToken();
      doReturn("bTof>@TG4K*)U`jAI").when(javaCharStream0).GetImage();
      doReturn((-1624), 6, (-501)).when(javaCharStream0).getBeginColumn();
      doReturn(3323, (-1624), 16).when(javaCharStream0).getBeginLine();
      doReturn(6, 2327, 6).when(javaCharStream0).getEndColumn();
      doReturn(6, 81, 17).when(javaCharStream0).getEndLine();
      doReturn('%', ':').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token0.kind = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, 1114);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 4285, 128);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o', '@').when(javaCharStream0).BeginToken();
      doReturn("rlfo\"J'Slr>\"p]").when(javaCharStream0).GetImage();
      doReturn(51, 41, 42).when(javaCharStream0).getBeginColumn();
      doReturn(773, 42, (-593)).when(javaCharStream0).getBeginLine();
      doReturn(773, 773, (-593)).when(javaCharStream0).getEndColumn();
      doReturn(773, (-1964), 1951).when(javaCharStream0).getEndLine();
      doReturn('@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("2rRC2nrp", "?t%1V=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ?t%1V=
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '&', 'a').when(javaCharStream0).BeginToken();
      doReturn(2263, 69, 387, 0).when(javaCharStream0).getBeginColumn();
      doReturn(21, 69, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 30, (-931), 0).when(javaCharStream0).getEndColumn();
      doReturn(3542, 1515, 565, 0).when(javaCharStream0).getEndLine();
      doReturn(')').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      Token.newToken(60);
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 105;
      javaParserTokenManager0.curLexState = 30;
      javaParserTokenManager0.jjmatchedKind = 85;
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, (int)'s').when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('s', '<', 's').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = Token.newToken((-5659));
      token1.endColumn = (-1184);
      Token.newToken((-5659));
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('%', 'b').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(36, 4, 36).when(javaCharStream0).getBeginColumn();
      doReturn(4, 26, 99).when(javaCharStream0).getBeginLine();
      doReturn(4, 26, 99).when(javaCharStream0).getEndColumn();
      doReturn(36, 3021, 26).when(javaCharStream0).getEndLine();
      doReturn('b', '%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 'r', '^').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4", (String) null).when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, 574).when(javaCharStream0).getBeginLine();
      doReturn(574, (int)'s', (int)'s', (int)'s').when(javaCharStream0).getEndColumn();
      doReturn((int)'s', 11, 119, 34).when(javaCharStream0).getEndLine();
      doReturn('^', '<', ';', ';', 's').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("~@(OEX6~4");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1626, 42);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"...\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2289, 29, 2289);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("\"switch\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '?').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 90).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 90).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 729).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 1672).when(javaCharStream0).getEndLine();
      doReturn('?').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = (-1184);
      token2.beginLine = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1090), (-1090)).when(javaCharStream0).getEndColumn();
      doReturn((-1090), 11, 139).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'R').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      token0.endColumn = (-1184);
      token0.beginLine = 0;
      token0.image = "6.0Eg";
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      StringReader stringReader0 = new StringReader("^3dlPX4qfV");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 46, 107);
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 16, (-1298));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(4);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', '[').when(javaCharStream0).BeginToken();
      doReturn("\"^=\"").when(javaCharStream0).GetImage();
      doReturn((-2279), (-2279), (-819)).when(javaCharStream0).getBeginColumn();
      doReturn(36, 36, 108).when(javaCharStream0).getBeginLine();
      doReturn((int)'6', 23, 36).when(javaCharStream0).getEndColumn();
      doReturn(36, 108, (-819)).when(javaCharStream0).getEndLine();
      doReturn('\\').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("\"^=\"", token0.toString());
      assertNotNull(token0);
      assertEquals(54, token0.endColumn);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals((-2279), token0.beginColumn);
      assertEquals(66, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(36, token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals(23, token1.endColumn);
      assertEquals((-2279), token1.beginColumn);
      assertEquals(108, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("[", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(36, token2.endColumn);
      assertEquals((-819), token2.endLine);
      assertEquals(81, token2.kind);
      assertEquals((-819), token2.beginColumn);
      assertEquals(108, token2.beginLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals("[", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("[", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("[", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("[", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1184), token2.endColumn);
      assertEquals((-819), token2.endLine);
      assertEquals(81, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals((-819), token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("\"^=\"", token0.toString());
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(54, token0.endColumn);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals((-2279), token0.beginColumn);
      assertEquals(66, token0.kind);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 108, (-1079));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '1').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(3542, 95, 114).when(javaCharStream0).getBeginColumn();
      doReturn(3542, 3542, 59).when(javaCharStream0).getBeginLine();
      doReturn(565, 95, 59).when(javaCharStream0).getEndColumn();
      doReturn(3542, 59, 44).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.curChar = '?';
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', '7').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(367);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', 'X').when(javaCharStream0).BeginToken();
      doReturn("", "", "=~fQ4|!t`x)nZMl").when(javaCharStream0).GetImage();
      doReturn(596, (-2699), (-41)).when(javaCharStream0).getBeginColumn();
      doReturn((-1272), (-1172), 2402).when(javaCharStream0).getBeginLine();
      doReturn((-41), 36, 27).when(javaCharStream0).getEndColumn();
      doReturn(36, 2577, 2941).when(javaCharStream0).getEndLine();
      doReturn('\\', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = (-1184);
      token2.beginLine = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 2577, (-1079));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('%', 'b').when(javaCharStream0).BeginToken();
      doReturn("[>n8", "[>n8", (String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(36, 4, 36, 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(4, 26, 99, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn(4, 26, 99, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(36, 3021, 26, 0, 0).when(javaCharStream0).getEndLine();
      doReturn('b', '%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-3141), 26);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|').when(javaCharStream0).BeginToken();
      doReturn(65, 526).when(javaCharStream0).getBeginColumn();
      doReturn(24, 34).when(javaCharStream0).getBeginLine();
      doReturn(34, (-662)).when(javaCharStream0).getEndColumn();
      doReturn(65, 26).when(javaCharStream0).getEndLine();
      doReturn('.').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 106, 65);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('w', '.', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(34, 34, (-310), 34).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 12).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, (-798)).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 28).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'd', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = 2;
      token1.beginLine = 0;
      javaParserTokenManager0.getNextToken();
      Token.newToken(34);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j=YR(P)(x4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"...\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2289, 29, 2289);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-913));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -913. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('\u0085').when(javaCharStream0).BeginToken();
      doReturn((int)'\u0085').when(javaCharStream0).getEndColumn();
      doReturn((int)'\u0085').when(javaCharStream0).getEndLine();
      doReturn('^').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 133, column 133.  Encountered: \"\\u0085\" (133), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1114, 1388);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token.newToken(1389);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', ':').when(javaCharStream0).BeginToken();
      doReturn("!XNtQ{Pg8&ZN").when(javaCharStream0).GetImage();
      doReturn((-323), 10, (-1), 10).when(javaCharStream0).getBeginColumn();
      doReturn((-3009), (-1416), 16, (-1988)).when(javaCharStream0).getBeginLine();
      doReturn(10, 48, 48, 2512).when(javaCharStream0).getEndColumn();
      doReturn(10, (-1988), 48, 657).when(javaCharStream0).getEndLine();
      doReturn('%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.curChar = '?';
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 0, 5100);
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j=YR(P)(x4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager1.getNextToken();
      Token token1 = javaParserTokenManager1.jjFillToken();
      Token.newToken(11);
      javaParserTokenManager2.SkipLexicalActions(token0);
      javaParserTokenManager1.TokenLexicalActions(token1);
      javaParserTokenManager1.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'd').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = 2;
      token1.beginLine = 0;
      token0.beginLine = (-5);
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('}', 'a').when(javaCharStream0).BeginToken();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn(128, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(128, 0, 0).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.beginColumn = 5;
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o', 'o').when(javaCharStream0).BeginToken();
      doReturn("[= -R>", "\"==\"", "d71{Dgf").when(javaCharStream0).GetImage();
      doReturn(773, (-1067), (-358), 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(1693, (-358), 773, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn(773, (-222), (-358), 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(773, (-1067), 52, 0, 0).when(javaCharStream0).getEndLine();
      doReturn('@', '\\').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Token token2 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SwitchTo(0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bTof>@TG4K*)U`jAI");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, (-1624));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 's').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4", "~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 2555).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, (-5659)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), 11).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 574).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'k', ']').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      token0.endColumn = (-1184);
      token0.beginLine = 119;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', '_').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(34, 34, (-310), 65, 0).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 65, 0).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 108, 0).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 113, 0).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'm', '.').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.image = "";
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'm';
      javaCharStream1.nextCharBuf = charArray0;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(23);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 23. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', 'a').when(javaCharStream0).BeginToken();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(3542, 0, 0).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o', '/').when(javaCharStream0).BeginToken();
      doReturn("").when(javaCharStream0).GetImage();
      doReturn((-824), (-61), 773).when(javaCharStream0).getBeginColumn();
      doReturn(773, (-61), (-1719)).when(javaCharStream0).getBeginLine();
      doReturn(773, 773, 2155).when(javaCharStream0).getEndColumn();
      doReturn(773, (-1934), (-1834)).when(javaCharStream0).getEndLine();
      doReturn('@', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = Token.newToken(1391);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.defaultLexState = 1654;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q\"Fc<w$'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 54, 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)114;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 54, column 63.  Encountered: <EOF> after : \"\\\"Fc<w$\\'\\u007f\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', ',').when(javaCharStream0).BeginToken();
      doReturn("n&4$GgfJOC0%O").when(javaCharStream0).GetImage();
      doReturn(10, 67, 15).when(javaCharStream0).getBeginColumn();
      doReturn(10, 15, 595).when(javaCharStream0).getBeginLine();
      doReturn(10, 54, 67).when(javaCharStream0).getEndColumn();
      doReturn(10, 56, 16).when(javaCharStream0).getEndLine();
      doReturn('%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      token0.endColumn = (-1184);
      token0.beginLine = 0;
      Reader reader0 = null;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', 'a').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 0).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 0).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 0).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 0).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'n', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = (-1184);
      token2.beginLine = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 0, 85);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~@(OEX6~4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1080), 752, 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.inBuf = 1;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(0, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn((-41), 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(36, 0, 0).when(javaCharStream0).getEndLine();
      doReturn('\\', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = (-1184);
      token2.beginLine = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 36, (-1079));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'Z').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = 2;
      token2.beginLine = 0;
      token2.specialToken = token0;
      token1.beginLine = (-5);
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      javaParserTokenManager0.SkipLexicalActions(token1);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 1998, (-5));
      Token.GTToken token_GTToken0 = new Token.GTToken();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'v').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'B').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 979, 56, 54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.debugStream = javaParserTokenManager1.debugStream;
      Token token0 = new Token();
      javaParserTokenManager1.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 56, 11);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "q\"Fc<w$'";
      StringReader stringReader0 = new StringReader("q\"Fc<w$'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 54, 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 54, column 63.  Encountered: <EOF> after : \"\\\"Fc<w$\\'\\u007f\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j=YR(P)(x4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 9, 36);
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', '<', ';').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 574).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, (-5659)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), (-1160)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 456).when(javaCharStream0).getEndLine();
      doReturn('^', '<', ';', 'x').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("~@(OEX6~4");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1626, 42);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', '%').when(javaCharStream0).BeginToken();
      doReturn("bTof>@TG4K*)U`jAI").when(javaCharStream0).GetImage();
      doReturn((-1624), 10, (-501)).when(javaCharStream0).getBeginColumn();
      doReturn(3323, (-1624), 16).when(javaCharStream0).getBeginLine();
      doReturn(10, 2327, 10).when(javaCharStream0).getEndColumn();
      doReturn(10, 81, 17).when(javaCharStream0).getEndLine();
      doReturn('%', ':').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.curChar = '?';
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-36);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("\"\uFFFD\"", token0.toString());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-54), (byte)34, (byte) (-98), (byte) (-34), (byte)32, (byte)38, (byte)114, (byte) (-36)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', ',').when(javaCharStream0).BeginToken();
      doReturn("n&4$GgfJOC0%O", (String) null).when(javaCharStream0).GetImage();
      doReturn(10, 67, 0).when(javaCharStream0).getBeginColumn();
      doReturn(10, 15, 0).when(javaCharStream0).getBeginLine();
      doReturn(10, 54, 0).when(javaCharStream0).getEndColumn();
      doReturn(10, 56, 0).when(javaCharStream0).getEndLine();
      doReturn('%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_MULTI_LINE_COMMENT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1, 30);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 'a', 'a').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 0).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, 0).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), 0).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 0).when(javaCharStream0).getEndLine();
      doReturn('^', '<', ';', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("~@(OEX6~4");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1626, 42);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("h", token0.toString());
      assertArrayEquals(new byte[] {(byte)104, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 11).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = (int) '.';
      javaParserTokenManager0.SkipLexicalActions(token1);
      token0.kind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AlAmU]=dSlyAzRM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-310), (-310), 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-1231), 26);
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', '6').when(javaCharStream0).BeginToken();
      doReturn("\"throw\"", "D", "\"throw\"").when(javaCharStream0).GetImage();
      doReturn(115, (-41), 3384).when(javaCharStream0).getBeginColumn();
      doReturn(2017, (-1321), 3384).when(javaCharStream0).getBeginLine();
      doReturn((-41), (-41), 115).when(javaCharStream0).getEndColumn();
      doReturn(63, 3384, 363).when(javaCharStream0).getEndLine();
      doReturn('\\', 'd').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.endColumn = (-1184);
      token2.beginColumn = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 3384, (-1079));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 1, (-570));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn((-992), 65, 47).when(javaCharStream0).getBeginColumn();
      doReturn(39, 90, 90).when(javaCharStream0).getBeginLine();
      doReturn(34, 39, 65).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, 39).when(javaCharStream0).getEndLine();
      doReturn('.', '{').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Reader reader0 = null;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-307), (-1815));
      javaParserTokenManager0.ReInit(javaCharStream1);
      javaCharStream1.bufpos = 90;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (-992));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -992. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn((-992), 65, 47).when(javaCharStream0).getBeginColumn();
      doReturn(39, 90, 90).when(javaCharStream0).getBeginLine();
      doReturn(34, 39, 65).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, 305).when(javaCharStream0).getEndLine();
      doReturn('.', '{').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-291), (-1815));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 564);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 564. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', '6', '|', '|', '|').when(javaCharStream0).BeginToken();
      doReturn("\"throw\"", "D", "\"throw\"").when(javaCharStream0).GetImage();
      doReturn(115, (-41), 3384, 832, 3384).when(javaCharStream0).getBeginColumn();
      doReturn(2017, (-1321), 3384, 115, 63).when(javaCharStream0).getBeginLine();
      doReturn((-41), (-41), 115, 778, 115).when(javaCharStream0).getEndColumn();
      doReturn(63, 3384, 363, 30, 25).when(javaCharStream0).getEndLine();
      doReturn('\\', 'd', '6', 'n', 'g').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.next = token0;
      Token token2 = javaParserTokenManager0.getNextToken();
      token1.next = token2;
      token1.next.endLine = 25;
      Token.newToken((-1623));
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('w', '.', '*').when(javaCharStream0).BeginToken();
      doReturn("up)Y#cFO_/").when(javaCharStream0).GetImage();
      doReturn(34, 34, (-315), 34).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 12).when(javaCharStream0).getBeginLine();
      doReturn(34, (-315), 30, (-798)).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-315), 28).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'd', '1').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = 2;
      token1.beginLine = 0;
      javaParserTokenManager0.getNextToken();
      Token token2 = new Token();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AlAmU]=dSlyAzRM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-310), (-310), 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(dataInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token1 = javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      StringReader stringReader1 = new StringReader("\n");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 115, (-3645));
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      javaCharStream2.buffer = charArray0;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager2.ReInit(javaCharStream2);
      javaParserTokenManager2.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1090), (-1090)).when(javaCharStream0).getEndColumn();
      doReturn((-1090), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'R').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token1.image = "6.0Eg";
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1602);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 90, 2, (-310));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader0 = new StringReader("\n");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 115, (-3645));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.ReInit(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'm').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'm';
      javaCharStream1.nextCharBuf = charArray0;
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 's').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', ';').when(javaCharStream0).BeginToken();
      doReturn(34, 483, 34, 0).when(javaCharStream0).getBeginColumn();
      doReturn(65, 65, 1495, 0).when(javaCharStream0).getBeginLine();
      doReturn(34, 65, 3409, 0).when(javaCharStream0).getEndColumn();
      doReturn(65, 483, (-1732), 0).when(javaCharStream0).getEndLine();
      doReturn('.').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '|').when(javaCharStream0).BeginToken();
      doReturn(65, 526, 5).when(javaCharStream0).getBeginColumn();
      doReturn(24, 34, (-1298)).when(javaCharStream0).getBeginLine();
      doReturn(34, (-662), 65).when(javaCharStream0).getEndColumn();
      doReturn(65, 26, 65).when(javaCharStream0).getEndLine();
      doReturn('.', 'v').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'W').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 11;
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token1.image = "6.0Eg";
      token1.kind = (-5659);
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('%', '4').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(36, 250, 36).when(javaCharStream0).getBeginColumn();
      doReturn((-2900), 36, 3823).when(javaCharStream0).getBeginLine();
      doReturn(4, 4, (-2900)).when(javaCharStream0).getEndColumn();
      doReturn(36, 9, 250).when(javaCharStream0).getEndLine();
      doReturn('b', 'Q').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(34).when(javaCharStream0).getEndColumn();
      doReturn(65).when(javaCharStream0).getEndLine();
      doReturn('.', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q&}s0Oa}aBdM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token.newToken(369);
      Token token0 = Token.newToken(1639);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3490), 84);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.TokenLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '9', 'a').when(javaCharStream0).BeginToken();
      doReturn("j?{Z<tfw7fDg#p6", "j?{Z<tfw7fDg#p6").when(javaCharStream0).GetImage();
      doReturn(1397, 1397, 928).when(javaCharStream0).getBeginColumn();
      doReturn(34, 1397, 928).when(javaCharStream0).getBeginLine();
      doReturn(34, 65, 34).when(javaCharStream0).getEndColumn();
      doReturn(65, 928, 1397).when(javaCharStream0).getEndLine();
      doReturn('.', ' ', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 40, 42);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^J\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 25);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 25. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '&', 'a').when(javaCharStream0).BeginToken();
      doReturn(2263, 69, 387).when(javaCharStream0).getBeginColumn();
      doReturn(21, 69, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 30, (-931)).when(javaCharStream0).getEndColumn();
      doReturn(3542, 1515, 565).when(javaCharStream0).getEndLine();
      doReturn('~', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o', '/').when(javaCharStream0).BeginToken();
      doReturn("").when(javaCharStream0).GetImage();
      doReturn((-824), (-61), 773).when(javaCharStream0).getBeginColumn();
      doReturn(773, (-61), (-1719)).when(javaCharStream0).getBeginLine();
      doReturn(773, 773, 2155).when(javaCharStream0).getEndColumn();
      doReturn(773, (-1934), (-1834)).when(javaCharStream0).getEndLine();
      doReturn('@', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '(').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j=YR(P)(x4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      StringReader stringReader1 = new StringReader("\n");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 115, (-3645));
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.ReInit(javaCharStream1);
      javaParserTokenManager2.SkipLexicalActions(token0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-449), 31);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager3.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager2.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'm').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AlAmU]=dSlyAzRM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-310), (-310), 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.jjFillToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-1231), 26);
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1602);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 90, 2, (-310));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader0 = new StringReader("\n");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 115, (-3645));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.ReInit(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Reader reader0 = null;
      int int0 = 119;
      int int1 = 2405;
      JavaCharStream javaCharStream2 = new JavaCharStream(reader0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = Token.newToken(3908);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager2.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bZ:GgY (G59O,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 4, 4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 5, 0, 4);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1).when(javaCharStream0).getBeginColumn();
      doReturn((-5659)).when(javaCharStream0).getBeginLine();
      doReturn(574).when(javaCharStream0).getEndColumn();
      doReturn((-1080)).when(javaCharStream0).getEndLine();
      doReturn('^').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q&}s0Oa}aBdM");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 88);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals("Q", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.endLine);
      assertEquals(88, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(108, token0.beginLine);
      assertEquals(88, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals("&", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(108, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(89, token1.beginColumn);
      assertEquals(108, token1.beginLine);
      assertEquals(89, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(105, token2.kind);
      assertEquals(89, token2.beginColumn);
      assertEquals(89, token2.endColumn);
      assertEquals(108, token2.beginLine);
      assertEquals(108, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = Token.newToken(369);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("}", token4.toString());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(80, token4.kind);
      assertEquals(108, token4.endLine);
      assertEquals(108, token4.beginLine);
      assertEquals(90, token4.endColumn);
      assertEquals(90, token4.beginColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('s', char0);
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("0", token5.toString());
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token5.beginLine);
      assertEquals(91, token5.beginColumn);
      assertEquals(91, token5.endColumn);
      assertEquals(66, token5.kind);
      assertEquals(108, token5.endLine);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      
      Token token6 = javaParserTokenManager0.jjFillToken();
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("0", token6.toString());
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertNotNull(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token6.beginLine);
      assertEquals(91, token6.endColumn);
      assertEquals(66, token6.kind);
      assertEquals(91, token6.beginColumn);
      assertEquals(108, token6.endLine);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      
      Token token7 = javaParserTokenManager0.getNextToken();
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals("Oa", token7.toString());
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token5));
      assertNotNull(token7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token7.kind);
      assertEquals(108, token7.endLine);
      assertEquals(93, token7.endColumn);
      assertEquals(92, token7.beginColumn);
      assertEquals(108, token7.beginLine);
      assertNotSame(token7, token0);
      assertNotSame(token7, token6);
      assertNotSame(token7, token1);
      assertNotSame(token7, token4);
      assertNotSame(token7, token2);
      assertNotSame(token7, token3);
      assertNotSame(token7, token5);
      
      Token token8 = javaParserTokenManager0.getNextToken();
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("}", token8.toString());
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token0));
      assertNotNull(token8);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(108, token8.beginLine);
      assertEquals(108, token8.endLine);
      assertEquals(94, token8.endColumn);
      assertEquals(94, token8.beginColumn);
      assertEquals(80, token8.kind);
      assertNotSame(token8, token7);
      assertNotSame(token8, token6);
      assertNotSame(token8, token4);
      assertNotSame(token8, token1);
      assertNotSame(token8, token3);
      assertNotSame(token8, token5);
      assertNotSame(token8, token2);
      assertNotSame(token8, token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(90, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(52, token0.beginColumn);
      assertEquals(90, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals("{", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(90, token1.beginLine);
      assertEquals(53, token1.endColumn);
      assertEquals(90, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(53, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals("{", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token2.kind);
      assertEquals(90, token2.endLine);
      assertEquals(90, token2.beginLine);
      assertEquals(53, token2.beginColumn);
      assertEquals(53, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals("G$Vb", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(54, token3.beginColumn);
      assertEquals(90, token3.endLine);
      assertEquals(57, token3.endColumn);
      assertEquals(90, token3.beginLine);
      assertEquals(74, token3.kind);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 90);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 90. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '|').when(javaCharStream0).BeginToken();
      doReturn(65, 526).when(javaCharStream0).getBeginColumn();
      doReturn(24, 34).when(javaCharStream0).getBeginLine();
      doReturn(34, (-662)).when(javaCharStream0).getEndColumn();
      doReturn(65, 26).when(javaCharStream0).getEndLine();
      doReturn('2', 'v').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(106, token0.kind);
      assertEquals(24, token0.beginLine);
      assertEquals(65, token0.endLine);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(26, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertEquals(106, token1.kind);
      assertEquals((-662), token1.endColumn);
      assertEquals(526, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken(1639);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '1').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(3542, 95, 114, 0).when(javaCharStream0).getBeginColumn();
      doReturn(3542, 3542, 59, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 95, 59, 0).when(javaCharStream0).getEndColumn();
      doReturn(3542, 59, 44, 0).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertEquals(3542, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(3542, token0.beginColumn);
      assertEquals(565, token0.endColumn);
      assertEquals(3542, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3542, token1.beginLine);
      assertEquals(95, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(59, token1.endLine);
      assertEquals(95, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(44, token2.endLine);
      assertEquals(114, token2.beginColumn);
      assertEquals(59, token2.endColumn);
      assertEquals(66, token2.kind);
      assertEquals(59, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertNull(token2.toString());
      
      token2.beginLine = 0;
      assertNull(token2.toString());
      
      token1.beginLine = 0;
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(44, token2.endLine);
      assertEquals(114, token2.beginColumn);
      assertEquals((-1184), token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(66, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(59, token3.endColumn);
      assertEquals(114, token3.beginColumn);
      assertEquals(85, token3.kind);
      assertEquals(44, token3.endLine);
      assertEquals(59, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 's').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4", (String) null).when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 2555).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, (-5659)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), 11).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 574).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'k', ']').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals(574, token0.endColumn);
      assertEquals((-5659), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1080), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(367, token1.beginColumn);
      assertEquals(109, token1.kind);
      assertEquals((-773), token1.beginLine);
      assertEquals(11, token1.endLine);
      assertEquals((-1080), token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(119, token2.endLine);
      assertEquals(1125, token2.beginColumn);
      assertEquals(109, token2.kind);
      assertEquals(491, token2.beginLine);
      assertEquals((-1080), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals("<<", token2.toString());
      
      token2.beginLine = 119;
      assertEquals("<<", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(11, token3.endColumn);
      assertEquals(2555, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals((-5659), token3.beginLine);
      assertEquals(574, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(119, token2.endLine);
      assertEquals((-1184), token2.endColumn);
      assertEquals(119, token2.beginLine);
      assertEquals(1125, token2.beginColumn);
      assertEquals(109, token2.kind);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 'a').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'k', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals((-5659), token0.beginLine);
      assertEquals((-1080), token0.endLine);
      assertEquals(574, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-773), token1.beginLine);
      assertEquals(11, token1.endLine);
      assertEquals(109, token1.kind);
      assertEquals((-1080), token1.endColumn);
      assertEquals(367, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(109, token2.kind);
      assertEquals(491, token2.beginLine);
      assertEquals((-1080), token2.endColumn);
      assertEquals(119, token2.endLine);
      assertEquals(1125, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals("<<", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("<<", token2.toString());
      
      token2.image = "6.0Eg";
      assertEquals("6.0Eg", token2.toString());
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      StringReader stringReader0 = new StringReader("^3dlPX4qfV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(107, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("3d", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(70, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("3d", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(70, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(107, token0.kind);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("3d", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(70, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 46, 70);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("3d", token3.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(70, token3.kind);
      assertEquals(2, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)122, (byte)122, (byte)5, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)122, (byte)122, (byte)5, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)112, 275, (byte)122);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)122, (byte)122, (byte)5, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)122, (byte)122, (byte)5, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(275);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 275. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("}", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("}", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(80, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("}", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(80, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j=YR(P)(x4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("j", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("=", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(87, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      StringReader stringReader1 = new StringReader("\n");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(121);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 1, 2372, 21);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2371, javaCharStream1.getEndColumn());
      assertEquals(2371, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2371, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token3.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(2371, token3.endColumn);
      assertEquals(2371, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("YR", token4.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(74, token4.kind);
      assertEquals(4, token4.endColumn);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager2.jjFillToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2371, javaCharStream1.getEndColumn());
      assertEquals(2371, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2371, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token5.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertNotNull(token5);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(2371, token5.endColumn);
      assertEquals(2371, token5.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      
      javaParserTokenManager1.SkipLexicalActions(token4);
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("YR", token4.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token5));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(74, token4.kind);
      assertEquals(4, token4.endColumn);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token5);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('`').when(javaCharStream0).BeginToken();
      doReturn(23).when(javaCharStream0).getEndColumn();
      doReturn(23).when(javaCharStream0).getEndLine();
      doReturn('`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 23, column 23.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '?', 'x').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 90).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 90).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 729).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 1672).when(javaCharStream0).getEndLine();
      doReturn('?', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("?", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(91, token1.kind);
      assertEquals(34, token1.beginLine);
      assertEquals(34, token1.beginColumn);
      assertEquals((-310), token1.endColumn);
      assertEquals(90, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("?", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, token2.beginLine);
      assertEquals(30, token2.endColumn);
      assertEquals((-310), token2.endLine);
      assertEquals(91, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals("?", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("?", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("?", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("?", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals((-1184), token2.endColumn);
      assertEquals((-310), token2.endLine);
      assertEquals(91, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 78, 34);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals("?", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(91, token3.kind);
      assertEquals(90, token3.beginLine);
      assertEquals(90, token3.beginColumn);
      assertEquals(729, token3.endColumn);
      assertEquals(1672, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 398, 0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNull(token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(30, token4.beginLine);
      assertEquals((-1959), token4.endLine);
      assertEquals(1520, token4.endColumn);
      assertEquals(55, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertNull(token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(30, token4.beginLine);
      assertEquals((-1959), token4.endLine);
      assertEquals(1520, token4.endColumn);
      assertEquals(55, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 2, 121).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 124, (-1221)).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 30, 124).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 121, 2).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'n', 'K').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(34, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(34, token1.beginLine);
      assertEquals((-310), token1.endColumn);
      assertEquals(90, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, token2.beginLine);
      assertEquals(30, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertEquals((-310), token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals(".", token2.toString());
      
      token2.beginLine = 0;
      assertEquals(".", token2.toString());
      
      token1.beginLine = 0;
      assertEquals(".", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertEquals((-310), token2.beginColumn);
      assertEquals((-310), token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(124, token3.beginLine);
      assertEquals(30, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(85, token3.kind);
      assertEquals(121, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("|", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(34, token0.beginColumn);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 0, 85);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token4.toString());
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertEquals(85, token4.kind);
      assertEquals(2, token4.endLine);
      assertEquals((-1221), token4.beginLine);
      assertEquals(121, token4.beginColumn);
      assertEquals(124, token4.endColumn);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals(574, token0.endColumn);
      assertEquals((-5659), token0.beginLine);
      assertEquals((-1080), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(11, token1.endLine);
      assertEquals((-773), token1.beginLine);
      assertEquals((-1080), token1.endColumn);
      assertEquals(109, token1.kind);
      assertEquals(367, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(109, token2.kind);
      assertEquals((-1080), token2.endColumn);
      assertEquals(491, token2.beginLine);
      assertEquals(119, token2.endLine);
      assertEquals(1125, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals("<<", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("<<", token2.toString());
      
      token2.image = "6.0Eg";
      assertEquals("6.0Eg", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("<<", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("6.0Eg", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(109, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(119, token2.endLine);
      assertEquals(1125, token2.beginColumn);
      assertEquals((-1184), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":71u:|`");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(92, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("71", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-1418));
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("71", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((-1080));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1080. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '&').when(javaCharStream0).BeginToken();
      doReturn(2263, 69, 387).when(javaCharStream0).getBeginColumn();
      doReturn(21, 69, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 30, (-931)).when(javaCharStream0).getEndColumn();
      doReturn(3542, 1515, 565).when(javaCharStream0).getEndLine();
      doReturn(')').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertEquals(78, token0.kind);
      assertEquals(2263, token0.beginColumn);
      assertEquals(3542, token0.endLine);
      assertEquals(565, token0.endColumn);
      assertEquals(21, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("&", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(30, token1.endColumn);
      assertEquals(1515, token1.endLine);
      assertEquals(69, token1.beginColumn);
      assertEquals(69, token1.beginLine);
      assertEquals(105, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.beginLine);
      assertEquals((-931), token2.endColumn);
      assertEquals(387, token2.beginColumn);
      assertEquals(105, token2.kind);
      assertEquals(565, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals("&", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("&", token2.toString());
      
      Token token3 = Token.newToken(60);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      token1.beginLine = 0;
      assertEquals("&", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.beginLine);
      assertEquals(387, token2.beginColumn);
      assertEquals((-1184), token2.endColumn);
      assertEquals(105, token2.kind);
      assertEquals(565, token2.endLine);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.jjmatchedKind = 105;
      javaParserTokenManager0.jjmatchedKind = 85;
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('\u0085').when(javaCharStream0).BeginToken();
      doReturn((int)'\u0085').when(javaCharStream0).getEndColumn();
      doReturn((-1080)).when(javaCharStream0).getEndLine();
      doReturn('^').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1080, column 133.  Encountered: \"\\u0085\" (133), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*%DM");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 374, 0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q&}s0Oa}aBdM");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 88);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("Q", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(88, token0.beginColumn);
      assertEquals(108, token0.endLine);
      assertEquals(108, token0.beginLine);
      assertEquals(88, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("&", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token1.endColumn);
      assertEquals(108, token1.beginLine);
      assertEquals(89, token1.beginColumn);
      assertEquals(108, token1.endLine);
      assertEquals(105, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token2.kind);
      assertEquals(108, token2.endLine);
      assertEquals(89, token2.endColumn);
      assertEquals(108, token2.beginLine);
      assertEquals(89, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = Token.newToken(369);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("}", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token4.endLine);
      assertEquals(90, token4.beginColumn);
      assertEquals(90, token4.endColumn);
      assertEquals(80, token4.kind);
      assertEquals(108, token4.beginLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("s0Oa", token5.toString());
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(108, token5.beginLine);
      assertEquals(74, token5.kind);
      assertEquals(108, token5.endLine);
      assertEquals(91, token5.beginColumn);
      assertEquals(94, token5.endColumn);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null, 89);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 89. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '&').when(javaCharStream0).BeginToken();
      doReturn(2263, 69, 387).when(javaCharStream0).getBeginColumn();
      doReturn(21, 69, 0).when(javaCharStream0).getBeginLine();
      doReturn(565, 30, (-931)).when(javaCharStream0).getEndColumn();
      doReturn(3542, 1515, 565).when(javaCharStream0).getEndLine();
      doReturn(')').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertEquals(3542, token0.endLine);
      assertEquals(2263, token0.beginColumn);
      assertEquals(565, token0.endColumn);
      assertEquals(21, token0.beginLine);
      assertEquals(78, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("&", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1515, token1.endLine);
      assertEquals(69, token1.beginLine);
      assertEquals(105, token1.kind);
      assertEquals(69, token1.beginColumn);
      assertEquals(30, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(105, token2.kind);
      assertEquals(565, token2.endLine);
      assertEquals(387, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals((-931), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals("&", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("&", token2.toString());
      
      Token token3 = Token.newToken(60);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      token1.beginLine = 0;
      assertEquals("&", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("&", token2.toString());
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(105, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertEquals(565, token2.endLine);
      assertEquals(387, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.jjmatchedKind = 105;
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', 'a').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 0).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 0).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 0).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 0).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '.', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(90, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("...", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-310), token1.endColumn);
      assertEquals(121, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(90, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(30, token2.endColumn);
      assertEquals(121, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertEquals((-310), token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 34, 1118);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(121, token3.kind);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals("...", token1.toString());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-310), token1.endColumn);
      assertEquals(121, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(90, token1.endLine);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)32;
      StringReader stringReader0 = new StringReader("$G~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)34, (byte)34, (byte)34);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals("$G", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.beginColumn);
      assertEquals(35, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals("~", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(34, token1.endLine);
      assertEquals(90, token1.kind);
      assertEquals(36, token1.beginColumn);
      assertEquals(36, token1.endColumn);
      assertEquals(34, token1.beginLine);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(36, token2.endColumn);
      assertEquals(34, token2.beginLine);
      assertEquals(36, token2.beginColumn);
      assertEquals(34, token2.endLine);
      assertEquals(0, token2.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, 16);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'B').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(106, token0.kind);
      assertEquals(90, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(34, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginLine);
      assertEquals(90, token1.endLine);
      assertEquals((-310), token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2, token2.beginLine);
      assertEquals(30, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertEquals((-310), token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertEquals(".", token2.toString());
      
      token2.beginLine = 0;
      assertEquals(".", token2.toString());
      
      token1.beginLine = 0;
      assertEquals(".", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("|", token0.toString());
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(106, token0.kind);
      assertEquals(90, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 57, 34);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('%', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(4).when(javaCharStream0).getEndColumn();
      doReturn(36).when(javaCharStream0).getEndLine();
      doReturn('b', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      assertEquals(108, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(36, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("%", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(108, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(36, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("%", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(36, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(108, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals("%", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("%", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("%", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("%", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginColumn);
      assertEquals(36, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals((-1184), token2.endColumn);
      assertEquals(108, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
      ObjectInputStream objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
      objectInputStream0.close();
      javaCharStream1.ReInit((InputStream) objectInputStream0);
      javaParserTokenManager0.ReInit(javaCharStream1, token1.endColumn);
      javaParserTokenManager0.SwitchTo(token1.beginColumn);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SwitchTo(token2.endLine);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119).when(javaCharStream0).getEndLine();
      doReturn('^', '<', ';').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals((-5659), token0.beginLine);
      assertEquals(574, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1080), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(367, token1.beginColumn);
      assertEquals(109, token1.kind);
      assertEquals((-773), token1.beginLine);
      assertEquals((-1080), token1.endColumn);
      assertEquals(11, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(109, token2.kind);
      assertEquals((-1080), token2.endColumn);
      assertEquals(1125, token2.beginColumn);
      assertEquals(119, token2.endLine);
      assertEquals(491, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals("<<", token2.toString());
      
      token2.beginLine = 0;
      assertEquals("<<", token2.toString());
      
      token2.image = "6.0Eg";
      assertEquals("6.0Eg", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("<<", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("6.0Eg", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(109, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(1125, token2.beginColumn);
      assertEquals(119, token2.endLine);
      assertEquals((-1184), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals("~@(OEX6~4", token0.toString());
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(74, token0.kind);
      assertEquals((-5659), token0.beginLine);
      assertEquals(574, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1080), token0.endLine);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(0, token1.beginLine);
      assertEquals(367, token1.beginColumn);
      assertEquals(109, token1.kind);
      assertEquals((-1080), token1.endColumn);
      assertEquals(11, token1.endLine);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<', 'a').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', 'v', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals((-5659), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(574, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1080), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-773), token1.beginLine);
      assertEquals(109, token1.kind);
      assertEquals((-1080), token1.endColumn);
      assertEquals(367, token1.beginColumn);
      assertEquals(11, token1.endLine);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'n').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      assertEquals(65, token0.endLine);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(90, token1.endLine);
      assertEquals((-310), token1.endColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(34, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals(30, token2.endColumn);
      assertEquals((-310), token2.endLine);
      assertEquals((-310), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals(".", token2.toString());
      
      token2.beginLine = 0;
      assertEquals(".", token2.toString());
      
      token1.beginLine = 0;
      assertEquals(".", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-1184), token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals((-310), token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals((-310), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '9').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn(1397, 1397, 928).when(javaCharStream0).getBeginColumn();
      doReturn(34, 1397, 928).when(javaCharStream0).getBeginLine();
      doReturn(34, (-45), 34).when(javaCharStream0).getEndColumn();
      doReturn(65, 928, 1397).when(javaCharStream0).getEndLine();
      doReturn('.', ' ').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals(1397, token0.beginColumn);
      assertEquals(65, token0.endLine);
      assertEquals(106, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1397, token1.beginLine);
      assertEquals(1397, token1.beginColumn);
      assertEquals((-45), token1.endColumn);
      assertEquals(928, token1.endLine);
      assertEquals(66, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(66, token2.kind);
      assertEquals(928, token2.beginLine);
      assertEquals(928, token2.beginColumn);
      assertEquals(34, token2.endColumn);
      assertEquals(1397, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertNull(token2.toString());
      
      token2.beginLine = 0;
      assertNull(token2.toString());
      
      token1.beginLine = 0;
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(66, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(928, token2.beginColumn);
      assertEquals((-1184), token2.endColumn);
      assertEquals(1397, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2265));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 88);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 88. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 11).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(65, token0.endLine);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-310), token1.endColumn);
      assertEquals(90, token1.endLine);
      assertEquals(34, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(11, token2.endColumn);
      assertEquals((-310), token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertEquals((-310), token2.endLine);
      assertEquals(85, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      token2.endColumn = (-1184);
      assertEquals(".", token2.toString());
      
      token2.beginLine = 0;
      assertEquals(".", token2.toString());
      
      token1.beginLine = (int) '.';
      assertEquals(".", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-310), token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals((-310), token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = Token.newToken(23);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token3));
      assertEquals((-310), token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals((-310), token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 979, 56, 54);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.debugStream = javaParserTokenManager1.debugStream;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(">>", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(979, token1.beginLine);
      assertEquals(57, token1.endColumn);
      assertEquals(56, token1.beginColumn);
      assertEquals(979, token1.endLine);
      assertEquals(124, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(56, token2.beginColumn);
      assertEquals(979, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(979, token2.endLine);
      assertEquals(56, token2.endColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(">>", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(979, token1.beginLine);
      assertEquals(57, token1.endColumn);
      assertEquals(56, token1.beginColumn);
      assertEquals(979, token1.endLine);
      assertEquals(124, token1.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(">", token3.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(57, token3.beginColumn);
      assertEquals(979, token3.endLine);
      assertEquals(124, token3.kind);
      assertEquals(57, token3.endColumn);
      assertEquals(979, token3.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(56, token2.beginColumn);
      assertEquals(979, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(979, token2.endLine);
      assertEquals(56, token2.endColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 54, 124, 56);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertEquals(979, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(979, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(979, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token4.kind);
      assertEquals(57, token4.endColumn);
      assertEquals(57, token4.beginColumn);
      assertEquals(979, token4.endLine);
      assertEquals(979, token4.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('w', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals(90, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token1.endColumn);
      assertEquals(90, token1.endLine);
      assertEquals(90, token1.beginLine);
      assertEquals(52, token1.beginColumn);
      assertEquals(79, token1.kind);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals("G$Vb", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(90, token2.beginLine);
      assertEquals(90, token2.endLine);
      assertEquals(53, token2.beginColumn);
      assertEquals(56, token2.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals("-", token3.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token3.beginLine);
      assertEquals(90, token3.endLine);
      assertEquals(102, token3.kind);
      assertEquals(57, token3.endColumn);
      assertEquals(57, token3.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals("{", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals(90, token0.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367, 1125, 0).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773), 491, 0).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080), (-1080), 0).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11, 119, 0).when(javaCharStream0).getEndLine();
      doReturn('^', '<', '^').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals((-5659), token0.beginLine);
      assertEquals((-1080), token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(574, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(109, token1.kind);
      assertEquals((-773), token1.beginLine);
      assertEquals(11, token1.endLine);
      assertEquals((-1080), token1.endColumn);
      assertEquals(367, token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(491, token2.beginLine);
      assertEquals((-1080), token2.endColumn);
      assertEquals(109, token2.kind);
      assertEquals(1125, token2.beginColumn);
      assertEquals(119, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.beginLine = 0;
      assertEquals("<<", token2.toString());
      
      Token token3 = Token.newToken(1);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      token2.image = "6.0Eg";
      assertEquals("6.0Eg", token2.toString());
      
      token1.beginLine = 0;
      assertEquals("<<", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("6.0Eg", token2.toString());
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals((-1080), token2.endColumn);
      assertEquals(109, token2.kind);
      assertEquals(1125, token2.beginColumn);
      assertEquals(119, token2.endLine);
      assertNotSame(token2, token3);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertEquals("<<", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(109, token4.kind);
      assertEquals(0, token4.beginLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('6', '6', '<').when(javaCharStream0).BeginToken();
      doReturn("\"throw\"", "D", "\"throw\"").when(javaCharStream0).GetImage();
      doReturn(115, (-41), 3384, 3384).when(javaCharStream0).getBeginColumn();
      doReturn(2017, (int)'6', 3384, 63).when(javaCharStream0).getBeginLine();
      doReturn((-41), (-41), 115, 91).when(javaCharStream0).getEndColumn();
      doReturn(63, 3384, 363, 93).when(javaCharStream0).getEndLine();
      doReturn('\\', 'd', '`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("\"throw\"", token0.toString());
      assertNotNull(token0);
      assertEquals(2017, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(115, token0.beginColumn);
      assertEquals(63, token0.endLine);
      assertEquals((-41), token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("D", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-41), token1.endColumn);
      assertEquals(70, token1.kind);
      assertEquals(54, token1.beginLine);
      assertEquals(3384, token1.endLine);
      assertEquals((-41), token1.beginColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("\"throw\"", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(115, token2.endColumn);
      assertEquals(70, token2.kind);
      assertEquals(3384, token2.beginLine);
      assertEquals(3384, token2.beginColumn);
      assertEquals(363, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals("<", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(88, token3.kind);
      assertEquals(3384, token3.beginColumn);
      assertEquals(93, token3.endLine);
      assertEquals(91, token3.endColumn);
      assertEquals(63, token3.beginLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(88);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 88. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, (-1713));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1713. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "ndiHs~s>lL\\zQ,dQA,@";
      StringReader stringReader0 = new StringReader("ndiHs~s>lLzQ,dQA,@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1654, 1654);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1654);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1654. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6JUc1(nvtyHw4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("JUc1", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("(", token3.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(77, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("nvtyHw4", token4.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(13, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      
      javaParserTokenManager1.SkipLexicalActions(token4);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("nvtyHw4", token4.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(13, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      
      javaParserTokenManager1.SkipLexicalActions(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("(", token3.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token4));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(77, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token4);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      Token token5 = javaParserTokenManager1.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("(", token5.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(77, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(13, token5.endColumn);
      assertEquals(7, token5.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("", token6.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertNotNull(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(13, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals(13, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token6, token3);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      
      javaParserTokenManager0.SkipLexicalActions(token6);
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("", token6.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(13, token6.endColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals(13, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token6, token3);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*_)u88-5%$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("_", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("_", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|').when(javaCharStream0).BeginToken();
      doReturn((int)'|').when(javaCharStream0).getBeginColumn();
      doReturn(11).when(javaCharStream0).getBeginLine();
      doReturn(11).when(javaCharStream0).getEndColumn();
      doReturn((int)'|').when(javaCharStream0).getEndLine();
      doReturn('|').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("||", token0.toString());
      assertNotNull(token0);
      assertEquals(124, token0.endLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(97, token0.kind);
      assertEquals(11, token0.endColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("||", token0.toString());
      assertEquals(124, token0.endLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(97, token0.kind);
      assertEquals(11, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('`').when(javaCharStream0).BeginToken();
      doReturn((int)'`').when(javaCharStream0).getEndColumn();
      doReturn((int)'`').when(javaCharStream0).getEndLine();
      doReturn('`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 96.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|').when(javaCharStream0).BeginToken();
      doReturn(65, 526).when(javaCharStream0).getBeginColumn();
      doReturn(24, 34).when(javaCharStream0).getBeginLine();
      doReturn(34, (-662)).when(javaCharStream0).getEndColumn();
      doReturn(65, 26).when(javaCharStream0).getEndLine();
      doReturn('|').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("||", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.endColumn);
      assertEquals(24, token0.beginLine);
      assertEquals(65, token0.beginColumn);
      assertEquals(65, token0.endLine);
      assertEquals(97, token0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals("||", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(26, token1.endLine);
      assertEquals((-662), token1.endColumn);
      assertEquals(97, token1.kind);
      assertEquals(526, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertNotSame(token1, token0);
      
      token1.endColumn = (-1184);
      assertEquals("||", token1.toString());
      
      token1.beginLine = 0;
      assertEquals("||", token1.toString());
      
      token0.beginLine = 0;
      assertEquals("||", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("||", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(26, token1.endLine);
      assertEquals(97, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(526, token1.beginColumn);
      assertEquals((-1184), token1.endColumn);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.jjmatchedKind = 0;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6JUc1(nvtyHw4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("6", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("JUc1", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("JUc1", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("JUc1", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("6", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2, 118);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("JUc1", token3.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (int)'.').when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (int)'.', 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (int)'.').when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'n').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(65, token0.endLine);
      assertEquals(90, token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(90, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertEquals(46, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(30, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals(46, token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertEquals(46, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("|", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals(65, token0.endLine);
      assertEquals(90, token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.beginColumn);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(90, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertEquals(46, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 106, 2);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 3089);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3089. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(574).when(javaCharStream0).getEndColumn();
      doReturn((-1080)).when(javaCharStream0).getEndLine();
      doReturn('^', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals((-1080), token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(574, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(574, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals((-1080), token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(74, token2.kind);
      assertEquals((-1080), token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(574, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertNull(token2.toString());
      
      token2.beginLine = 0;
      assertNull(token2.toString());
      
      token1.beginLine = 0;
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(74, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertEquals((-1080), token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
      ObjectInputStream objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
      objectInputStream0.close();
      javaCharStream1.ReInit((InputStream) objectInputStream0);
      javaParserTokenManager0.ReInit(javaCharStream1, token1.endColumn);
      javaParserTokenManager0.SwitchTo(token1.beginColumn);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SwitchTo(token2.endLine);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('z', '-').when(javaCharStream0).BeginToken();
      doReturn("bTof>@TG4K*)U`jAI").when(javaCharStream0).GetImage();
      doReturn((-1624), 6, (-501)).when(javaCharStream0).getBeginColumn();
      doReturn(3347, (-1624), 16).when(javaCharStream0).getBeginLine();
      doReturn(6, 2327, 6).when(javaCharStream0).getEndColumn();
      doReturn(6, 81, 17).when(javaCharStream0).getEndLine();
      doReturn('-', ':').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("bTof>@TG4K*)U`jAI", token0.toString());
      assertNotNull(token0);
      assertEquals(6, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1624), token0.beginColumn);
      assertEquals(3347, token0.beginLine);
      assertEquals(6, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("-", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(81, token1.endLine);
      assertEquals(2327, token1.endColumn);
      assertEquals((-1624), token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertEquals(102, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("-", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals((-501), token2.beginColumn);
      assertEquals(6, token2.endColumn);
      assertEquals(16, token2.beginLine);
      assertEquals(17, token2.endLine);
      assertEquals(102, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token1.kind = 0;
      assertEquals("-", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals("-", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-501), token2.beginColumn);
      assertEquals(6, token2.endColumn);
      assertEquals(16, token2.beginLine);
      assertEquals(17, token2.endLine);
      assertEquals(102, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("-", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(81, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(2327, token1.endColumn);
      assertEquals((-1624), token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<FLOATING_POINT_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 56, 1976);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(54, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(56, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(54, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals("FLOATING_POINT_LITERAL", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.bufpos);
      assertEquals(54, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(78, token1.endColumn);
      assertEquals(57, token1.beginColumn);
      assertEquals(54, token1.endLine);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(78, token2.endColumn);
      assertEquals(57, token2.beginColumn);
      assertEquals(54, token2.beginLine);
      assertEquals(54, token2.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 21, 54);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("C} Xq2M,Il` n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('}', 'N').when(javaCharStream0).BeginToken();
      doReturn(124).when(javaCharStream0).getBeginColumn();
      doReturn(128).when(javaCharStream0).getBeginLine();
      doReturn(128).when(javaCharStream0).getEndColumn();
      doReturn(128).when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("}", token0.toString());
      assertNotNull(token0);
      assertEquals(124, token0.beginColumn);
      assertEquals(128, token0.endLine);
      assertEquals(128, token0.endColumn);
      assertEquals(80, token0.kind);
      assertEquals(128, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.jjFillToken();
      token2.beginColumn = 5;
      token2.endColumn = (-1184);
      token2.beginLine = 0;
      token1.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', '.').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(34, 34, (-310), (-310), 90).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 1418, 94).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 2942, 2).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 34, 27).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '.', '0', '.').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("...", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(34, token1.beginColumn);
      assertEquals(90, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertEquals((-310), token1.endColumn);
      assertEquals(121, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(30, token2.endColumn);
      assertEquals(2, token2.beginLine);
      assertEquals((-310), token2.endLine);
      assertEquals(121, token2.kind);
      assertEquals((-310), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 34, 1118);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(2942, token3.endColumn);
      assertEquals(121, token3.kind);
      assertEquals((-310), token3.beginColumn);
      assertEquals(1418, token3.beginLine);
      assertEquals(34, token3.endLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals("...", token1.toString());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(34, token1.beginColumn);
      assertEquals(90, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertEquals((-310), token1.endColumn);
      assertEquals(121, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token3);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNull(token4.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertEquals(70, token4.kind);
      assertEquals(2, token4.endColumn);
      assertEquals(90, token4.beginColumn);
      assertEquals(94, token4.beginLine);
      assertEquals(27, token4.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(773).when(javaCharStream0).getEndColumn();
      doReturn(773).when(javaCharStream0).getEndLine();
      doReturn('@', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(773, token0.endColumn);
      assertEquals(773, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(773, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(773, token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(74, token2.kind);
      assertEquals(773, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(773, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token2.endColumn = (-1184);
      assertNull(token2.toString());
      
      token2.beginLine = 0;
      assertNull(token2.toString());
      
      token1.beginLine = 0;
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(74, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(773, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
      ObjectInputStream objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
      objectInputStream0.close();
      javaCharStream1.ReInit((InputStream) objectInputStream0);
      javaParserTokenManager0.ReInit(javaCharStream1, token1.endColumn);
      javaParserTokenManager0.SwitchTo(token2.kind);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '1').when(javaCharStream0).BeginToken();
      doReturn("\"throw\"").when(javaCharStream0).GetImage();
      doReturn(3569, 95).when(javaCharStream0).getBeginColumn();
      doReturn(3569, 3569).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 95).when(javaCharStream0).getEndColumn();
      doReturn(3569, 59).when(javaCharStream0).getEndLine();
      doReturn('&').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertEquals(3569, token0.beginLine);
      assertEquals(3569, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(3569, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("\"throw\"", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3569, token1.beginLine);
      assertEquals(95, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(95, token1.beginColumn);
      assertEquals(59, token1.endLine);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(")", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertEquals(3569, token0.beginLine);
      assertEquals(3569, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(3569, token0.endLine);
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', '|').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), (-76), 90).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 123, 96).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 2, 2, 1027).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 65, 1871).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '.', 'w').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(65, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(90, token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("...", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-310), token1.endColumn);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(121, token1.kind);
      assertEquals(90, token1.endLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, token2.endColumn);
      assertEquals((-310), token2.endLine);
      assertEquals(2, token2.beginLine);
      assertEquals((-310), token2.beginColumn);
      assertEquals(121, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 34, 1118);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals("...", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(65, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals((-76), token3.beginColumn);
      assertEquals(123, token3.beginLine);
      assertEquals(121, token3.kind);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals("...", token1.toString());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-310), token1.endColumn);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(121, token1.kind);
      assertEquals(90, token1.endLine);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token4.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(96, token4.beginLine);
      assertEquals(90, token4.beginColumn);
      assertEquals(106, token4.kind);
      assertEquals(1027, token4.endColumn);
      assertEquals(1871, token4.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertEquals("|", token5.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertNotNull(token5);
      assertEquals(1027, token5.endColumn);
      assertEquals(1871, token5.endLine);
      assertEquals(90, token5.beginColumn);
      assertEquals(106, token5.kind);
      assertEquals(96, token5.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<FLOATING_POINT_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 56, 1976);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(54, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(56, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(54, token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(54, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(56, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(54, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals("FLOATING_POINT_LITERAL", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.bufpos);
      assertEquals(54, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(78, token1.endColumn);
      assertEquals(57, token1.beginColumn);
      assertEquals(54, token1.endLine);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.', 'a').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', 'm', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertEquals(34, token0.endColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(34, token0.beginColumn);
      assertEquals(65, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(85, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals(90, token1.endLine);
      assertEquals((-310), token1.endColumn);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals((-310), token2.beginColumn);
      assertEquals((-310), token2.endLine);
      assertEquals(2, token2.beginLine);
      assertEquals(30, token2.endColumn);
      assertEquals(85, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token2.endColumn = (-1184);
      assertEquals(".", token2.toString());
      
      token2.beginLine = 0;
      assertEquals(".", token2.toString());
      
      token1.beginLine = 0;
      assertEquals(".", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(".", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-310), token2.beginColumn);
      assertEquals((-310), token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals((-1184), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'm';
      javaCharStream1.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals((-310), token3.endLine);
      assertEquals(2, token3.beginLine);
      assertEquals(30, token3.endColumn);
      assertEquals(85, token3.kind);
      assertEquals((-310), token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('s', '<').when(javaCharStream0).BeginToken();
      doReturn("~@(OEX6~4").when(javaCharStream0).GetImage();
      doReturn(1, 367).when(javaCharStream0).getBeginColumn();
      doReturn((-5659), (-773)).when(javaCharStream0).getBeginLine();
      doReturn(574, (-1080)).when(javaCharStream0).getEndColumn();
      doReturn((-1080), 11).when(javaCharStream0).getEndLine();
      doReturn('^', '<', '7').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("~@(OEX6~4", token0.toString());
      assertNotNull(token0);
      assertEquals((-1080), token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(574, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-5659), token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(367, token1.beginColumn);
      assertEquals(11, token1.endLine);
      assertEquals((-773), token1.beginLine);
      assertEquals((-1080), token1.endColumn);
      assertEquals(109, token1.kind);
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken(367);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("~@(OEX6~4", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals((-1080), token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(574, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-5659), token0.beginLine);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals("<<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(367, token1.beginColumn);
      assertEquals(11, token1.endLine);
      assertEquals((-773), token1.beginLine);
      assertEquals((-1080), token1.endColumn);
      assertEquals(109, token1.kind);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      int int0 = (-1184);
      token1.endColumn = int0;
      token1.beginLine = javaCharStream0.bufpos;
      int int1 = 0;
      token0.beginLine = int1;
      javaParserTokenManager0.SkipLexicalActions(token1);
      Reader reader0 = null;
      int int2 = (-2147483647);
      int int3 = (-2294);
      int int4 = 85;
      javaParserTokenManager0.jjmatchedKind = int4;
      JavaCharStream javaCharStream1 = new JavaCharStream(reader0, int2, int3);
      char[] charArray0 = new char[2];
      char char0 = '@';
      charArray0[0] = char0;
      char char1 = 'P';
      charArray0[1] = char1;
      javaCharStream1.nextCharBuf = charArray0;
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      ObjectInputStream objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
      objectInputStream0.close();
      javaCharStream1.ReInit((InputStream) objectInputStream0);
      javaParserTokenManager0.ReInit(javaCharStream1, token0.endColumn);
      javaParserTokenManager0.SwitchTo(token0.beginColumn);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SwitchTo(token1.endLine);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(90, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(52, token0.beginColumn);
      assertEquals(90, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals("{", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token1.kind);
      assertEquals(90, token1.endLine);
      assertEquals(53, token1.endColumn);
      assertEquals(53, token1.beginColumn);
      assertEquals(90, token1.beginLine);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals("{", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(90, token2.endLine);
      assertEquals(79, token2.kind);
      assertEquals(53, token2.beginColumn);
      assertEquals(90, token2.beginLine);
      assertEquals(53, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals("G$Vb", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(90, token3.endLine);
      assertEquals(57, token3.endColumn);
      assertEquals(90, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(54, token3.beginColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 52, 71);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bZ:GgY (G59O,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 30, 4, 81);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 30, 74, 4);
      javaParserTokenManager0.jjFillToken();
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ndiHs~s>lLzQ,dQA,@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1654, 1654);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1654);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1654. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w{G$Vb-fJj*zTq=j|'A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 52, 316);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(59, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '?', 'a').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310), 90).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2, 90).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30, 729).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310), 1672).when(javaCharStream0).getEndLine();
      doReturn('?', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 78, 34);
      Token token2 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token2);
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 398, 0);
      Token token3 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token3);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q&}s0Oa}aBdM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(369);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("aBdM", token1.toString());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('|', '.').when(javaCharStream0).BeginToken();
      doReturn(34, 34, (-310)).when(javaCharStream0).getBeginColumn();
      doReturn(90, 34, 2).when(javaCharStream0).getBeginLine();
      doReturn(34, (-310), 30).when(javaCharStream0).getEndColumn();
      doReturn(65, 90, (-310)).when(javaCharStream0).getEndLine();
      doReturn('.', '.', '|').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token1.endColumn = (-1184);
      token1.beginLine = 0;
      token0.beginLine = 0;
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.jjmatchedKind = 85;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-2147483647), (-2294));
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      javaCharStream1.nextCharBuf = charArray0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('o').when(javaCharStream0).BeginToken();
      doReturn("rlfo\"J'Slr>\"p]").when(javaCharStream0).GetImage();
      doReturn(51).when(javaCharStream0).getBeginColumn();
      doReturn(773).when(javaCharStream0).getBeginLine();
      doReturn(773).when(javaCharStream0).getEndColumn();
      doReturn(773).when(javaCharStream0).getEndLine();
      doReturn('@').when(javaCharStream0).readChar();
      StringReader stringReader0 = new StringReader("}=0#0H/y)Bl");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 773, 39, 773);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }
}
