/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:36:16 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtLeast_ESTest extends AtLeast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 45);
      IVecInt iVecInt0 = vecInt0.push(45);
      atLeast0.calcReasonOnTheFly(45, iVecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(45, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-502));
      atLeast0.calcReasonOnTheFly((-502), vecInt0, vecInt0);
      assertEquals((-502), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 882);
      atLeast0.calcReason((-125), vecInt0);
      assertEquals(882, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      int[] intArray0 = new int[6];
      intArray0[0] = (-199);
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>((-199));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams((-3094), (-945));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        atLeast0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(vecInt0, (-2914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-4889));
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      IVecInt iVecInt1 = iVecInt0.push(32);
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt1, 32);
      atLeast0.size();
      assertEquals(32, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder((-264));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 0);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, (-497));
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-497), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-18));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, miniSATRestarts0);
      int int0 = AtLeast.niceParameters(solver0, iLits0, iVecInt0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-4889));
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      int int0 = AtLeast.niceParameters(solver0, iLits0, vecInt0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.get(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.push(38);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 35);
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(948, 948);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 57);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 839);
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2053);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 35);
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.push((-10));
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-10));
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-502));
      // Undeclared exception!
      try { 
        atLeast0.propagatePI((MandatoryLiteralListener) null, (-502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 4229);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 4229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4229
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 57);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1589);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 1589);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1589
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, (IVecInt) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.push(882);
      // Undeclared exception!
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, iVecInt0, (-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(Integer.MAX_VALUE);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 2484);
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.push((-8));
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-8));
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 45);
      // Undeclared exception!
      try { 
        atLeast0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      vecInt0.shrinkTo(46);
      // Undeclared exception!
      try { 
        atLeast0.getAssertionLevel(vecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-502));
      // Undeclared exception!
      try { 
        atLeast0.get((-502));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -502
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      // Undeclared exception!
      try { 
        atLeast0.calcReasonOnTheFly((-1), (IVecInt) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 882);
      vecInt0.shrinkTo(882);
      // Undeclared exception!
      try { 
        atLeast0.calcReasonOnTheFly(882, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-5967));
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-3968));
      // Undeclared exception!
      try { 
        atLeast0.calcReason(1395, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1290));
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 12);
      // Undeclared exception!
      try { 
        atLeast0.calcReason(12, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1290
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, 65535);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, (ILits) null, readOnlyVecInt0, (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.push((-1));
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(40, 40);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 57);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(42, 2118);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 31);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, readOnlyVecInt0, 57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, (IVecInt) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.pop();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, iVecInt0, 12);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.shrinkTo(12);
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1));
      atLeast0.register();
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.push(26);
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 26);
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 112);
      atLeast0.size();
      assertEquals(112, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(40, 40);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 40);
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("");
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(" + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]   + 20[?]  >= 40", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 12);
      String string0 = atLeast0.toString((VarMapper) null);
      assertEquals(">= 12", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 45);
      IVecInt iVecInt0 = vecInt0.push(45);
      int int0 = atLeast0.getAssertionLevel(iVecInt0, 45);
      assertEquals(45, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      int int0 = atLeast0.getAssertionLevel(vecInt0, 65535);
      assertEquals((-1), int0);
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(32);
      vecInt0.growTo(50, 32);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 32);
      atLeast0.assertConstraint(solver0);
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(1, solver0.getPropagationLevel());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1336.1756689104));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(50, 249);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-52));
      boolean boolean0 = atLeast0.isSatisfied();
      assertFalse(boolean0);
      assertEquals((-52), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-4889));
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = AtLeast.atLeastNew(solver0, iLits0, vecInt0, (-1));
      constr0.calcReasonOnTheFly(32, vecInt0, vecInt0);
      assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.push(0);
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 0);
      String string0 = atLeast0.toString();
      assertEquals("Card (1) :  + 0[?@0]  >= 0", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 34);
      String string0 = atLeast0.toString();
      assertEquals("Card (0) : >= 34", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1336.1756689104));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(50, 249);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-52));
      atLeast0.assertConstraint(solver0);
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(1, solver0.getPropagationLevel());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1));
      atLeast0.calcReason((-1), vecInt0);
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      atLeast0.calcReason(65535, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(782, 782);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 782);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 783
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(29);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 3434);
      atLeast0.remove(solver0);
      assertEquals(3434, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(85, 85);
      vecInt0.push(37);
      // Undeclared exception!
      try { 
        cardinalityDataStructure0.createClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(40, 40);
      try { 
        cardinalityDataStructure0.createCardinalityConstraint(vecInt0, 40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(vecInt0, 0);
      assertTrue(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(85, 85);
      // Undeclared exception!
      try { 
        cardinalityDataStructure0.createClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, vecInt0, (-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, vecInt0, 1589);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 491);
      atLeast0.setActivity((-3365.68));
      assertEquals(491, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(29);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 3434);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(3434, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 35);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      boolean boolean0 = atLeast0.canBePropagatedMultipleTimes();
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(43);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 43);
      double double0 = atLeast0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(43, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 10);
      Constr constr0 = atLeast0.toConstraint();
      assertEquals(10, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 30);
      // Undeclared exception!
      try { 
        atLeast0.rescaleBy(30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 0);
      atLeast0.forwardActivity(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-502));
      boolean boolean0 = atLeast0.locked();
      assertTrue(boolean0);
      assertEquals((-502), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 882);
      atLeast0.undo(882);
      assertEquals(882, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1900));
      boolean boolean0 = atLeast0.simplify();
      assertEquals((-1900), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(40, 40);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 34);
      atLeast0.get(31);
      assertEquals(34, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(43);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 43);
      atLeast0.incActivity(0.0);
      assertEquals(43, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-4889));
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = AtLeast.atLeastNew(solver0, iLits0, vecInt0, (-1));
      boolean boolean0 = ((AtLeast) constr0).learnt();
      assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 498);
      boolean boolean0 = atLeast0.canBeSatisfiedByCountingLiterals();
      assertEquals(498, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }
}
