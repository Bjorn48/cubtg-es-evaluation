/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:00:34 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClausalCardinalitiesDecorator_ESTest extends ClausalCardinalitiesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(3555);
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      String string0 = clausalCardinalitiesDecorator0.toString();
      assertEquals("Dimacs output solver\nCardinality to SAT encoding: \nEncoding: org.sat4j.tools.encoding.Product\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      VecInt vecInt0 = new VecInt(1806);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly(vecInt0, 1806);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constr constr0 = Constr.TAUTOLOGY;
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(constr0).when(lexicoDecorator0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      VecInt vecInt0 = new VecInt(1806);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly(vecInt0, 1806);
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ManyCore<Minimal4CardinalityModel> manyCore0 = (ManyCore<Minimal4CardinalityModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<ManyCore<Minimal4CardinalityModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<Minimal4CardinalityModel>>(manyCore0);
      VecInt vecInt0 = new VecInt(1806);
      vecInt0.unsafePush(1598);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost(vecInt0, 1759);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(1806);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost(vecInt0, 1);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>((MaxSatDecorator) null, (EncodingStrategyAdapter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString("e-]sU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(110);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0, product0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, 110);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 110
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(1806);
      vecInt0.shrinkTo(1470);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost(vecInt0, 1);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1806);
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>>((FullClauseSelectorSolver<SolutionCounter>) null, (EncodingStrategyAdapter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, 235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ClausalCardinalitiesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      VecInt vecInt0 = new VecInt();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, (-2235));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast((IVecInt) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      VecInt vecInt0 = new VecInt(1806);
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      vecInt0.shrink(1598);
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ManyCore<Minimal4CardinalityModel> manyCore0 = (ManyCore<Minimal4CardinalityModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<ManyCore<Minimal4CardinalityModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<Minimal4CardinalityModel>>(manyCore0);
      VecInt vecInt0 = new VecInt(1806);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, 1759);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ManyCore<Minimal4InclusionModel> manyCore0 = (ManyCore<Minimal4InclusionModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(manyCore0).toString(anyString());
      ClausalCardinalitiesDecorator<ManyCore<Minimal4InclusionModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<Minimal4InclusionModel>>(manyCore0);
      String string0 = clausalCardinalitiesDecorator0.toString(">Du<!^XH/");
      assertEquals("null\nCardinality to SAT encoding: \nEncoding: Policy = [At most K: Native, at most 1: Native, exactly K: Native, exactly 1: Native]\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>>((FullClauseSelectorSolver<SolutionCounter>) null, product0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1806);
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SolutionCounter>>((FullClauseSelectorSolver<SolutionCounter>) null, binary0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, 1598);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(235);
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(1806);
      SolutionCounter solutionCounter0 = new SolutionCounter(clausalCardinalitiesDecorator0);
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      clausalCardinalitiesDecorator1.addAtLeast(vecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
