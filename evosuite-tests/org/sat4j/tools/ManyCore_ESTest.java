/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:39:20 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ConstrGroup;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.SearchListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertNotNull(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1869));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1869), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 2);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertNotNull(maxSatDecorator0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, checkMUSSolutionListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecorator0;
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(2, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.provideUnitClauses(solver0);
      assertEquals(2, clausalCardinalitiesDecoratorArray0.length);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4);
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-590));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-590), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-590));
      assertEquals(6, intArray0.length);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-590.0), randomWalkDecorator0.getProbability(), 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, randomWalkDecorator0, eMARestarts0, basicLauncher0);
      assertEquals(6, intArray0.length);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-590), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-590.0), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      
      solverArray0[0] = solver0;
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[7];
      ASolverFactory<AbstractMinimalModel> aSolverFactory1 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solverArray0[0], (-590), checkMUSSolutionListener0);
      assertEquals(4, solverArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[6] = modelIteratorToSATAdapterArray0[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      assertEquals(7, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.realNumberOfVariables();
      assertEquals(7, modelIteratorToSATAdapterArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(false);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[1];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minOneDecorator0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(1, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar(1);
      assertEquals(1, maxSatDecoratorArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4);
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-590));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-590), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-590));
      assertEquals(6, intArray0.length);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-590.0), randomWalkDecorator0.getProbability(), 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, randomWalkDecorator0, eMARestarts0, basicLauncher0);
      assertEquals(6, intArray0.length);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-590), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-590.0), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      solverArray0[0] = solver0;
      solverArray0[1] = solverArray0[0];
      solverArray0[2] = solver0;
      solverArray0[3] = solver0;
      ManyCore<Solver<CardinalityDataStructureYanMin>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMin>>(true, solverArray0);
      assertEquals(4, solverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar((-590));
      assertEquals(4, solverArray0.length);
      assertEquals((-590), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[6];
      String[] stringArray0 = new String[1];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(19);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, (-1), checkMUSSolutionListener0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore1);
      
      int int0 = manyCore1.nVars();
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      assertNotNull(solutionCounter0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 6);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solutionCounter0);
      assertNotNull(maxSatDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      assertNotNull(optToSatAdapter0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      Binomial binomial0 = new Binomial();
      assertNotNull(binomial0);
      
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binomial0);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecoratorArray0[0];
      clausalCardinalitiesDecoratorArray0[2] = clausalCardinalitiesDecoratorArray0[1];
      clausalCardinalitiesDecoratorArray0[3] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[4] = clausalCardinalitiesDecoratorArray0[3];
      clausalCardinalitiesDecoratorArray0[5] = clausalCardinalitiesDecoratorArray0[2];
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(6, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      int[] intArray0 = manyCore0.model();
      assertEquals(6, clausalCardinalitiesDecoratorArray0.length);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(48);
      assertNotNull(dimacsStringSolver0);
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      boolean boolean0 = manyCore0.isVerbose();
      assertEquals(2, dimacsStringSolverArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertNotNull(maxSatDecorator0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[3];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(maxSatDecorator0);
      assertNotNull(minOneDecorator0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[2] = minOneDecoratorArray0[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertEquals(3, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      boolean boolean0 = manyCore0.isSolverKeptHot();
      assertEquals(3, minOneDecoratorArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      VecInt vecInt0 = new VecInt(1386, 1386);
      assertNotNull(vecInt0);
      assertEquals(1386, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1386, vecInt0.last());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, vecInt0, solutionFoundListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(1386, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1386, vecInt0.last());
      
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, vecInt0, 1386);
      assertNotNull(subModelIterator0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(1386, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1386, vecInt0.last());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[1];
      subModelIteratorArray0[0] = subModelIterator0;
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      assertEquals(1, subModelIteratorArray0.length);
      assertNotNull(manyCore0);
      
      Map<String, Number> map0 = manyCore0.getStat();
      assertEquals(1, subModelIteratorArray0.length);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`W/M64M(`j,/a<nW";
      stringArray0[1] = "W";
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 8);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(minOneDecorator0).getStat();
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      assertNotNull(negationDecorator0);
      assertFalse(negationDecorator0.isSatisfiable());
      
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(negationDecorator0);
      assertNotNull(minOneDecorator1);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator1, solutionFoundListener0);
      assertNotNull(optToSatAdapter0);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator1);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(clausalCardinalitiesDecorator1.equals((Object)clausalCardinalitiesDecorator0));
      
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecorator1;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator2 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, (EncodingStrategyAdapter) null);
      assertNotNull(clausalCardinalitiesDecorator2);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(clausalCardinalitiesDecorator2.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator2.equals((Object)clausalCardinalitiesDecorator1));
      
      clausalCardinalitiesDecoratorArray0[2] = clausalCardinalitiesDecorator2;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator3 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator3);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(clausalCardinalitiesDecorator3.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator3.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator3.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      clausalCardinalitiesDecoratorArray0[3] = clausalCardinalitiesDecorator3;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator4 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator4);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(clausalCardinalitiesDecorator4.equals((Object)clausalCardinalitiesDecorator3));
      assertFalse(clausalCardinalitiesDecorator4.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator4.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(clausalCardinalitiesDecorator4.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      clausalCardinalitiesDecoratorArray0[4] = clausalCardinalitiesDecorator4;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator5 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, (EncodingStrategyAdapter) null);
      assertNotNull(clausalCardinalitiesDecorator5);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(clausalCardinalitiesDecorator5.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator5.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(clausalCardinalitiesDecorator5.equals((Object)clausalCardinalitiesDecorator3));
      assertFalse(clausalCardinalitiesDecorator5.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator5.equals((Object)clausalCardinalitiesDecorator4));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      clausalCardinalitiesDecoratorArray0[5] = clausalCardinalitiesDecorator5;
      OptToSatAdapter optToSatAdapter1 = new OptToSatAdapter(minOneDecorator1);
      assertNotNull(optToSatAdapter1);
      assertFalse(optToSatAdapter1.isOptimal());
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter1.equals((Object)optToSatAdapter0));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator6 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter1, (EncodingStrategyAdapter) null);
      assertNotNull(clausalCardinalitiesDecorator6);
      assertFalse(optToSatAdapter1.isOptimal());
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter1.equals((Object)optToSatAdapter0));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator3));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator4));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator5));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      clausalCardinalitiesDecoratorArray0[6] = clausalCardinalitiesDecorator6;
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator7 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter1, (EncodingStrategyAdapter) null);
      assertNotNull(clausalCardinalitiesDecorator7);
      assertFalse(optToSatAdapter1.isOptimal());
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(optToSatAdapter1.equals((Object)optToSatAdapter0));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator4));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator5));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator3));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator7.equals((Object)clausalCardinalitiesDecorator6));
      
      clausalCardinalitiesDecoratorArray0[7] = clausalCardinalitiesDecorator7;
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore1 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(stringArray0, clausalCardinalitiesDecoratorArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(8, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.registerLiteral(939);
      assertEquals(2, stringArray0.length);
      assertEquals(8, clausalCardinalitiesDecoratorArray0.length);
      
      Map<String, Number> map0 = manyCore1.getStat();
      assertEquals(2, stringArray0.length);
      assertEquals(8, clausalCardinalitiesDecoratorArray0.length);
      assertNull(map0);
      
      MinOneDecorator minOneDecorator2 = new MinOneDecorator(clausalCardinalitiesDecorator6);
      assertNotNull(minOneDecorator2);
      assertFalse(optToSatAdapter1.isOptimal());
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertTrue(minOneDecorator2.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator2.isOptimal());
      assertFalse(minOneDecorator2.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter1.equals((Object)optToSatAdapter0));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator3));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator2));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator4));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator7));
      assertFalse(clausalCardinalitiesDecorator6.equals((Object)clausalCardinalitiesDecorator5));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(minOneDecorator2.equals((Object)minOneDecorator0));
      assertFalse(minOneDecorator2.equals((Object)minOneDecorator1));
      
      NegationDecorator<MinOneDecorator> negationDecorator1 = new NegationDecorator<MinOneDecorator>(minOneDecorator1);
      assertNotNull(negationDecorator1);
      assertFalse(negationDecorator1.isSatisfiable());
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(negationDecorator1.equals((Object)negationDecorator0));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator2));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertNotNull(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1869));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1869), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 2);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertNotNull(maxSatDecorator0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, checkMUSSolutionListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals((-1869), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecoratorArray0[0];
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(2, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      Map<String, Number> map0 = manyCore0.getStat();
      assertEquals(2, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(true, clausalCardinalitiesDecoratorArray0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      List<ClausalCardinalitiesDecorator<OptToSatAdapter>> list0 = manyCore0.getSolvers();
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, vecInt0, solutionFoundListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[3];
      minimal4CardinalityModelArray0[0] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[1] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[2] = minimal4CardinalityModel0;
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(minimal4CardinalityModelArray0);
      assertEquals(3, minimal4CardinalityModelArray0.length);
      assertNotNull(manyCore0);
      
      String string0 = manyCore0.getLogPrefix();
      assertEquals(3, minimal4CardinalityModelArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[1];
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(stringArray0, maxSatDecoratorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      IVecInt iVecInt0 = manyCore0.createBlockingClauseForCurrentModel();
      assertEquals(0, stringArray0.length);
      assertEquals(1, maxSatDecoratorArray0.length);
      assertNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(1.0E100, 3);
      assertNotNull(searchParams0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, searchParams0.getInitConflictBound());
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertNotNull(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(3);
      assertNotNull(percentLengthLearning0);
      assertEquals(3, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      assertNotNull(fullClauseSelectorSolver0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertTrue(fullClauseSelectorSolver0.isSatisfiable());
      
      FullClauseSelectorSolver<OptToSatAdapter>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<OptToSatAdapter>[]) Array.newInstance(FullClauseSelectorSolver.class, 9);
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[2] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[3] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[4] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[5] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[6] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[7] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[8] = fullClauseSelectorSolver0;
      ManyCore<FullClauseSelectorSolver<OptToSatAdapter>> manyCore0 = new ManyCore<FullClauseSelectorSolver<OptToSatAdapter>>(fullClauseSelectorSolverArray0);
      assertEquals(9, fullClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(manyCore0);
      assertEquals(9, fullClauseSelectorSolverArray0.length);
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore1);
      
      IConstr iConstr0 = manyCore1.addClause(iVecInt0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertEquals(9, fullClauseSelectorSolverArray0.length);
      assertNotNull(iConstr0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      assertNotNull(mockPrintWriter0);
      
      GroupClauseSelectorSolver<MaxSatDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MaxSatDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 3);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[1] = groupClauseSelectorSolverArray0[0];
      groupClauseSelectorSolverArray0[2] = groupClauseSelectorSolverArray0[0];
      ManyCore<GroupClauseSelectorSolver<MaxSatDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolverArray0);
      assertEquals(3, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.printStat((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(2981, 2981);
      assertNotNull(vecInt0);
      assertEquals(2981, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2981, vecInt0.size());
      
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, vecInt0, 2981);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(subModelIterator0);
      assertEquals(2981, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2981, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      
      GateTranslator gateTranslator0 = new GateTranslator(subModelIterator0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(gateTranslator0);
      assertEquals(2981, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2981, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[1];
      gateTranslatorArray0[0] = gateTranslator0;
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      assertEquals(1, gateTranslatorArray0.length);
      assertNotNull(manyCore1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        manyCore1.printStat((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ModelIterator modelIterator0 = new ModelIterator(solver0);
      assertNotNull(modelIterator0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      SubModelIterator subModelIterator0 = new SubModelIterator(modelIterator0, vecInt0, (-1801L));
      assertNotNull(subModelIterator0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[1];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(1, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant(1266);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(stringArray0, maxSatDecoratorArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      GroupClauseSelectorSolver<ModelIterator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<ModelIterator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 9);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[1] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[2] = groupClauseSelectorSolverArray0[1];
      groupClauseSelectorSolverArray0[3] = groupClauseSelectorSolverArray0[0];
      groupClauseSelectorSolverArray0[4] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[5] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[6] = groupClauseSelectorSolverArray0[4];
      groupClauseSelectorSolverArray0[7] = groupClauseSelectorSolverArray0[4];
      groupClauseSelectorSolverArray0[8] = groupClauseSelectorSolverArray0[5];
      ManyCore<GroupClauseSelectorSolver<ModelIterator>> manyCore1 = new ManyCore<GroupClauseSelectorSolver<ModelIterator>>(false, groupClauseSelectorSolverArray0);
      assertEquals(9, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore1);
      
      // Undeclared exception!
      try { 
        manyCore1.primeImplicant();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(true, gateTranslatorArray0);
      assertEquals(0, gateTranslatorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.nVars();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(1, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.getTimeoutMs();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      String[] stringArray0 = new String[7];
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[7];
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, (-2752L), checkMUSSolutionListener0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[3];
      modelIteratorToSATAdapterArray0[6] = modelIteratorToSATAdapterArray0[1];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(stringArray0, modelIteratorToSATAdapterArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore1);
      
      // Undeclared exception!
      try { 
        manyCore1.getTimeout();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[3];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolverArray0[0];
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      assertEquals(3, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(50);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[5];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      maxSatDecoratorArray0[2] = maxSatDecoratorArray0[0];
      maxSatDecoratorArray0[3] = maxSatDecoratorArray0[2];
      maxSatDecoratorArray0[4] = maxSatDecoratorArray0[3];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(5, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      assertNotNull(solutionCounter0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[6];
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      solutionCounterArray0[4] = solutionCounter0;
      solutionCounterArray0[5] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      assertEquals(6, solutionCounterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addParity((IVecInt) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, subsetVarOrder0, noRestarts0);
      assertEquals(0, intArray0.length);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(solver0);
      assertEquals(0, intArray0.length);
      assertNotNull(minOneDecorator1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(minOneDecorator1.isOptimal());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator1;
      minOneDecoratorArray0[3] = minOneDecorator1;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, minOneDecoratorArray0);
      assertEquals(4, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      try { 
        manyCore0.addExactly(vecInt0, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      assertNotNull(solutionCounter0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      
      GateTranslator gateTranslator0 = new GateTranslator(groupClauseSelectorSolver0);
      assertNotNull(gateTranslator0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      assertNotNull(minOneDecorator0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertNotNull(iVecInt0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, solutionCounter0.lowerBound());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecorator0;
      minOneDecoratorArray0[5] = minOneDecorator0;
      minOneDecoratorArray0[6] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertEquals(7, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addExactly(iVecInt0, 19);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 19
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      String[] stringArray0 = new String[2];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator1);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator1.isOptimal());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      
      minOneDecoratorArray0[1] = minOneDecorator1;
      minOneDecoratorArray0[2] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[3] = minOneDecoratorArray0[1];
      minOneDecoratorArray0[4] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[5] = minOneDecorator1;
      minOneDecoratorArray0[6] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore1 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(7, minOneDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      // Undeclared exception!
      try { 
        manyCore1.addExactly((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      
      FullClauseSelectorSolver<OptToSatAdapter>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<OptToSatAdapter>[]) Array.newInstance(FullClauseSelectorSolver.class, 2);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      assertNotNull(minOneDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      assertNotNull(fullClauseSelectorSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolverArray0[0];
      ManyCore<FullClauseSelectorSolver<OptToSatAdapter>> manyCore0 = new ManyCore<FullClauseSelectorSolver<OptToSatAdapter>>(fullClauseSelectorSolverArray0);
      assertEquals(2, fullClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        manyCore0.addAtMost(iVecInt0, 1237);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 1237
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[6];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      assertNotNull(maxSatDecorator0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      maxSatDecoratorArray0[2] = maxSatDecorator0;
      maxSatDecoratorArray0[3] = maxSatDecorator0;
      maxSatDecoratorArray0[4] = maxSatDecoratorArray0[3];
      maxSatDecoratorArray0[5] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(6, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addAtLeast((IVecInt) null, 13);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 13
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-2954));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(maxSatDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addAtLeast((IVecInt) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      
      ModelIterator modelIterator0 = new ModelIterator(solver0);
      assertNotNull(modelIterator0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIterator0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      NegationDecorator<AbstractMinimalModel>[] negationDecoratorArray0 = (NegationDecorator<AbstractMinimalModel>[]) Array.newInstance(NegationDecorator.class, 8);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(minOneDecorator0, vecInt0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      assertNotNull(negationDecorator0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(negationDecorator0.isSatisfiable());
      
      negationDecoratorArray0[0] = negationDecorator0;
      negationDecoratorArray0[1] = negationDecorator0;
      negationDecoratorArray0[2] = negationDecoratorArray0[1];
      negationDecoratorArray0[3] = negationDecoratorArray0[2];
      negationDecoratorArray0[4] = negationDecorator0;
      negationDecoratorArray0[5] = negationDecoratorArray0[1];
      negationDecoratorArray0[6] = negationDecoratorArray0[5];
      negationDecoratorArray0[7] = negationDecorator0;
      ManyCore<NegationDecorator<AbstractMinimalModel>> manyCore0 = new ManyCore<NegationDecorator<AbstractMinimalModel>>(true, negationDecoratorArray0);
      assertEquals(8, negationDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addAllClauses((IVec<IVecInt>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[1];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[8];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>((String[]) null, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, (DimacsOutputSolver[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      String[] stringArray0 = new String[2];
      ManyCore<MaxSatDecorator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<MaxSatDecorator>(stringArray0, maxSatDecoratorArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, vecInt0, solutionFoundListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[2];
      GateTranslator gateTranslator0 = new GateTranslator(minimal4CardinalityModel0);
      assertNotNull(gateTranslator0);
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      gateTranslatorArray0[0] = gateTranslator0;
      ManyCore<GateTranslator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<GateTranslator>(true, stringArray0, gateTranslatorArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[3];
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(false, (String[]) null, dimacsOutputSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(50);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IConstr iConstr0 = manyCore0.addBlockingClause(iVecInt0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(iConstr0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      assertNotNull(maxSatDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      assertNotNull(negationDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      NegationDecorator<MaxSatDecorator>[] negationDecoratorArray0 = (NegationDecorator<MaxSatDecorator>[]) Array.newInstance(NegationDecorator.class, 5);
      negationDecoratorArray0[0] = negationDecorator0;
      negationDecoratorArray0[1] = negationDecorator0;
      negationDecoratorArray0[2] = negationDecorator0;
      negationDecoratorArray0[3] = negationDecorator0;
      negationDecoratorArray0[4] = negationDecorator0;
      ManyCore<NegationDecorator<MaxSatDecorator>> manyCore0 = new ManyCore<NegationDecorator<MaxSatDecorator>>(false, negationDecoratorArray0);
      assertEquals(5, negationDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setSearchListener((SearchListener<Solver<CardinalityDataStructureYanMin>>) null);
      assertEquals(5, negationDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(3564);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      try { 
        manyCore0.isSatisfiable((IVecInt) vecInt0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[6];
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, vecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      minimal4InclusionModelArray0[0] = minimal4InclusionModel0;
      minimal4InclusionModelArray0[1] = minimal4InclusionModel0;
      minimal4InclusionModelArray0[2] = minimal4InclusionModelArray0[1];
      minimal4InclusionModelArray0[3] = minimal4InclusionModel0;
      minimal4InclusionModelArray0[4] = minimal4InclusionModelArray0[0];
      minimal4InclusionModelArray0[5] = minimal4InclusionModelArray0[4];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(true, minimal4InclusionModelArray0);
      assertEquals(6, minimal4InclusionModelArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addParity((IVecInt) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(11);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IConstr iConstr0 = manyCore0.addParity(vecInt0, false);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[3];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      optToSatAdapterArray0[1] = optToSatAdapter0;
      optToSatAdapterArray0[2] = optToSatAdapterArray0[1];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(3, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":");
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printStat((PrintWriter) mockPrintWriter0);
      assertEquals(3, optToSatAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, vecInt0, solutionFoundListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(minimal4CardinalityModel0);
      assertNotNull(minOneDecorator0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecoratorArray0[1];
      minOneDecoratorArray0[3] = minOneDecoratorArray0[2];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(4, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setKeepSolverHot(false);
      assertEquals(2, stringArray0.length);
      assertEquals(4, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, (SolutionFoundListener) null);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[1];
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(1, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.registerLiteral((-2867));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[6];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      SolutionCounter solutionCounter0 = new SolutionCounter(maxSatDecoratorArray0[0]);
      assertEquals(6, maxSatDecoratorArray0.length);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      String[] stringArray0 = new String[1];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[3];
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(stringArray0, solutionCounterArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(3, solutionCounterArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setLogPrefix((String) null);
      assertEquals(1, stringArray0.length);
      assertEquals(3, solutionCounterArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(11);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Binomial binomial0 = new Binomial();
      assertNotNull(binomial0);
      
      IConstr iConstr0 = binomial0.addAtLeast(manyCore0, vecInt0, 11);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      boolean boolean0 = minOneDecorator0.removeSubsumedConstr(iConstr0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(18, 18);
      assertNotNull(vecInt0);
      assertEquals(18, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(18, vecInt0.last());
      
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, vecInt0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(subModelIterator0);
      assertEquals(18, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(18, vecInt0.last());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[6];
      subModelIteratorArray0[0] = subModelIterator0;
      subModelIteratorArray0[1] = subModelIterator0;
      subModelIteratorArray0[2] = subModelIterator0;
      subModelIteratorArray0[3] = subModelIterator0;
      subModelIteratorArray0[4] = subModelIterator0;
      subModelIteratorArray0[5] = subModelIterator0;
      ManyCore<SubModelIterator> manyCore1 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      assertEquals(6, subModelIteratorArray0.length);
      assertNotNull(manyCore1);
      
      // Undeclared exception!
      try { 
        manyCore1.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove a group of constraints!
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[7];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, vecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      minimal4CardinalityModelArray0[0] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[1] = minimal4CardinalityModelArray0[0];
      minimal4CardinalityModelArray0[2] = minimal4CardinalityModelArray0[0];
      minimal4CardinalityModelArray0[3] = minimal4CardinalityModelArray0[1];
      minimal4CardinalityModelArray0[4] = minimal4CardinalityModelArray0[3];
      minimal4CardinalityModelArray0[5] = minimal4CardinalityModelArray0[0];
      minimal4CardinalityModelArray0[6] = minimal4CardinalityModel0;
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(minimal4CardinalityModelArray0);
      assertEquals(7, minimal4CardinalityModelArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addBlockingClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore1 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      IConstr iConstr0 = manyCore1.discardCurrentModel();
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(iConstr0);
      assertEquals(2, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[2];
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      assertEquals(2, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals(2, dimacsOutputSolverArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(1, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      assertEquals(1, dimacsOutputSolverArray0.length);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<MaxSatDecorator>(true, maxSatDecoratorArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      ManyCore<MaxSatDecorator> manyCore1 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.setDBSimplificationAllowed(true);
      assertEquals(2, maxSatDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(true, true, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, true, 1564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      assertNotNull(solutionCounter0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, solutionCounter0.lowerBound());
      
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[3];
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      assertEquals(3, solutionCounterArray0.length);
      assertNotNull(manyCore0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printInfos((PrintWriter) mockPrintWriter0, "gTNzW0S2&xRfV\"u8?%");
      assertEquals(3, solutionCounterArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      assertNotNull(minOneDecorator0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minOneDecorator0);
      assertNotNull(iVecInt0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, iVecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4InclusionModel0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[7];
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[1] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[2] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[3] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[4] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[5] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[6] = (AbstractMinimalModel) minimal4InclusionModel0;
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      assertEquals(7, abstractMinimalModelArray0.length);
      assertNotNull(manyCore0);
      
      String string0 = manyCore0.toString("s)");
      assertEquals(7, abstractMinimalModelArray0.length);
      assertEquals("s)ManyCore solver with 7 solvers running in parallel\ns)>>>>>>>>>> Solver number 0 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 1 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 2 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 3 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 4 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 5 <<<<<<<<<<<<<<<<<<\nDimacs output solver\ns)>>>>>>>>>> Solver number 6 <<<<<<<<<<<<<<<<<<\nDimacs output solver", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(1, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeoutOnConflicts((-1489));
      assertEquals(1, dimacsOutputSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[7];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, vecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      minimal4CardinalityModelArray0[0] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[1] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[2] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[3] = minimal4CardinalityModel0;
      minimal4CardinalityModelArray0[4] = minimal4CardinalityModelArray0[0];
      minimal4CardinalityModelArray0[5] = minimal4CardinalityModelArray0[3];
      minimal4CardinalityModelArray0[6] = minimal4CardinalityModel0;
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(minimal4CardinalityModelArray0);
      assertEquals(7, minimal4CardinalityModelArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeoutMs(787L);
      assertEquals(7, minimal4CardinalityModelArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-2954));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(maxSatDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeout((-2954));
      assertEquals(2, maxSatDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(optToSatAdapter0.isOptimal());
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      optToSatAdapterArray0[1] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(2, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setExpectedNumberOfClauses(2714);
      assertEquals(2, optToSatAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      GroupClauseSelectorSolver<MaxSatDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MaxSatDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 5);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[1] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[2] = groupClauseSelectorSolver0;
      groupClauseSelectorSolverArray0[3] = groupClauseSelectorSolverArray0[2];
      groupClauseSelectorSolverArray0[4] = groupClauseSelectorSolver0;
      ManyCore<GroupClauseSelectorSolver<MaxSatDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolverArray0);
      assertEquals(5, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.reset();
      assertEquals(5, groupClauseSelectorSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-2954));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(maxSatDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2954), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      MockFile mockFile0 = new MockFile("org.sat4j.tools.AbstractMinimalModel", "Ts)");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printStat((PrintWriter) mockPrintWriter0, "org.sat4j.tools.AbstractMinimalModel");
      assertEquals(2, maxSatDecoratorArray0.length);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/org.sat4j.tools.AbstractMinimalModel", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/org.sat4j.tools.AbstractMinimalModel/Ts)", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Ts)", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[4];
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      maxSatDecoratorArray0[2] = maxSatDecoratorArray0[0];
      maxSatDecoratorArray0[3] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(4, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar(11);
      assertEquals(4, maxSatDecoratorArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(1, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.expireTimeout();
      assertEquals(1, dimacsOutputSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minOneDecorator0);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.clearLearntClauses();
      assertEquals(2, maxSatDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      FullClauseSelectorSolver<OptToSatAdapter>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<OptToSatAdapter>[]) Array.newInstance(FullClauseSelectorSolver.class, 6);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(optToSatAdapter0);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(fullClauseSelectorSolver0);
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[2] = fullClauseSelectorSolverArray0[0];
      fullClauseSelectorSolverArray0[3] = fullClauseSelectorSolverArray0[2];
      fullClauseSelectorSolverArray0[4] = fullClauseSelectorSolverArray0[2];
      fullClauseSelectorSolverArray0[5] = fullClauseSelectorSolverArray0[3];
      ManyCore<FullClauseSelectorSolver<OptToSatAdapter>> manyCore1 = new ManyCore<FullClauseSelectorSolver<OptToSatAdapter>>(false, fullClauseSelectorSolverArray0);
      assertEquals(6, fullClauseSelectorSolverArray0.length);
      assertNotNull(manyCore1);
      
      VecInt vecInt0 = new VecInt(11, 11);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(11, vecInt0.last());
      assertEquals(11, vecInt0.size());
      
      // Undeclared exception!
      try { 
        manyCore1.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(11);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Binomial binomial0 = new Binomial();
      assertNotNull(binomial0);
      
      ConstrGroup constrGroup0 = (ConstrGroup)binomial0.addExactlyOne(manyCore0, vecInt0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(constrGroup0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, constrGroup0.getActivity(), 0.01);
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
      assertEquals(2, constrGroup0.size());
      
      constrGroup0.removeFrom(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, constrGroup0.getActivity(), 0.01);
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
      assertEquals(2, constrGroup0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[2];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore1 = new ManyCore<MinOneDecorator>(false, minOneDecoratorArray0);
      assertEquals(2, minOneDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = manyCore1.addExactly(vecInt0, (-1));
      assertEquals(2, minOneDecoratorArray0.length);
      assertNotNull(iConstr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(2, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(fullClauseSelectorSolver0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      FullClauseSelectorSolver<OptToSatAdapter>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<OptToSatAdapter>[]) Array.newInstance(FullClauseSelectorSolver.class, 2);
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolver0;
      ManyCore<FullClauseSelectorSolver<OptToSatAdapter>> manyCore1 = new ManyCore<FullClauseSelectorSolver<OptToSatAdapter>>(fullClauseSelectorSolverArray0);
      assertEquals(2, fullClauseSelectorSolverArray0.length);
      assertNotNull(manyCore1);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IConstr iConstr0 = manyCore1.addAtMost(iVecInt0, (-1610));
      assertEquals(2, fullClauseSelectorSolverArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(11);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[2];
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      optToSatAdapterArray0[1] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore1 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      assertEquals(2, optToSatAdapterArray0.length);
      assertNotNull(manyCore1);
      
      IConstr iConstr0 = manyCore1.addAtLeast(vecInt0, 17);
      assertEquals(2, optToSatAdapterArray0.length);
      assertNotNull(iConstr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(2, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[3];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      LexicoDecorator<MaxSatDecorator>[] lexicoDecoratorArray0 = (LexicoDecorator<MaxSatDecorator>[]) Array.newInstance(LexicoDecorator.class, 6);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolverArray0[0], true);
      assertEquals(3, dimacsOutputSolverArray0.length);
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      assertEquals(3, dimacsOutputSolverArray0.length);
      assertNotNull(lexicoDecorator0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      
      lexicoDecoratorArray0[0] = lexicoDecorator0;
      lexicoDecoratorArray0[1] = lexicoDecorator0;
      lexicoDecoratorArray0[2] = lexicoDecoratorArray0[0];
      lexicoDecoratorArray0[3] = lexicoDecorator0;
      lexicoDecoratorArray0[4] = lexicoDecorator0;
      lexicoDecoratorArray0[5] = lexicoDecoratorArray0[1];
      ManyCore<LexicoDecorator<MaxSatDecorator>> manyCore0 = new ManyCore<LexicoDecorator<MaxSatDecorator>>(lexicoDecoratorArray0);
      assertEquals(6, lexicoDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        manyCore0.addAllClauses(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(0, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>(14);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      manyCore0.addAllClauses(vec0);
      assertEquals(0, dimacsOutputSolverArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[6];
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, vecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      minimal4InclusionModelArray0[0] = minimal4InclusionModel0;
      ManyCore<Minimal4InclusionModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Minimal4InclusionModel>(true, minimal4InclusionModelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jQu.JXMb9cw56*]Og", "jQu.JXMb9cw56*]Og");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertNotNull(dimacsOutputSolver0);
      assertEquals("jQu.JXMb9cw56*]Og", mockFile0.getName());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/jQu.JXMb9cw56*]Og", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/jQu.JXMb9cw56*]Og/jQu.JXMb9cw56*]Og", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.sat4j.tools.encoding.EncodingStrategy";
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      assertNotNull(solutionCounter0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solutionCounter0);
      assertNotNull(minOneDecorator0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0).when(aSolverFactory0).createSolverByName(anyString());
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(aSolverFactory0, false, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      // Undeclared exception!
      try { 
        manyCore0.model((-602));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ManyCore<OptToSatAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.isDBSimplificationAllowed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(19);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      FullClauseSelectorSolver<OptToSatAdapter>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<OptToSatAdapter>[]) Array.newInstance(FullClauseSelectorSolver.class, 4);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, true);
      assertNotNull(fullClauseSelectorSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(optToSatAdapter0.isOptimal());
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolverArray0[0];
      fullClauseSelectorSolverArray0[2] = fullClauseSelectorSolverArray0[0];
      fullClauseSelectorSolverArray0[3] = fullClauseSelectorSolverArray0[0];
      ManyCore<FullClauseSelectorSolver<OptToSatAdapter>> manyCore0 = new ManyCore<FullClauseSelectorSolver<OptToSatAdapter>>(fullClauseSelectorSolverArray0);
      assertEquals(4, fullClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant(1266);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(true, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.getStat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      String[] stringArray0 = new String[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(stringArray0, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      ClausalCardinalitiesDecorator<GateTranslator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<GateTranslator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 3);
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(gateTranslator0);
      
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(clausalCardinalitiesDecorator0);
      
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[2] = clausalCardinalitiesDecoratorArray0[1];
      ManyCore<ClausalCardinalitiesDecorator<GateTranslator>> manyCore1 = new ManyCore<ClausalCardinalitiesDecorator<GateTranslator>>(false, stringArray0, clausalCardinalitiesDecoratorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(3, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      List<ClausalCardinalitiesDecorator<GateTranslator>> list0 = manyCore1.getSolvers();
      assertEquals(0, stringArray0.length);
      assertEquals(3, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(clausalCardinalitiesDecorator0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.getSearchListener();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      assertEquals(0, optToSatAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet in ManyCore
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClausalCardinalitiesDecorator<OptToSatAdapter>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<OptToSatAdapter>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<OptToSatAdapter>>(clausalCardinalitiesDecoratorArray0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.isVerbose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[5];
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      assertEquals(0, maxSatDecoratorArray0.length);
      assertNotNull(gateTranslator0);
      
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslatorArray0[0];
      gateTranslatorArray0[2] = gateTranslatorArray0[0];
      gateTranslatorArray0[3] = gateTranslator0;
      gateTranslatorArray0[4] = gateTranslatorArray0[3];
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      assertEquals(5, gateTranslatorArray0.length);
      assertNotNull(manyCore1);
      
      // Undeclared exception!
      try { 
        manyCore0.setUnitClauseProvider(manyCore1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[4];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[3] = dimacsOutputSolverArray0[2];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      long long0 = manyCore0.getTimeoutMs();
      assertEquals(2, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      assertNotNull(solutionCounter0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[1];
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertNotNull(iVecInt0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0, iVecInt0, checkMUSSolutionListener0);
      assertNotNull(minimal4InclusionModel0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4InclusionModel0;
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      assertEquals(1, abstractMinimalModelArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.getTimeout();
      assertEquals(1, abstractMinimalModelArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.realNumberOfVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      try { 
        manyCore0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.model(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      String[] stringArray0 = new String[0];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[1];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(optToSatAdapter0);
      gateTranslatorArray0[0] = gateTranslator0;
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 14);
      // Undeclared exception!
      try { 
        manyCore1.addConstr(binaryClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet in ManyCore: cannot add a specific constraint to each solver
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.nConstraints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSolverKeptHot();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(optToSatAdapterArray0);
      manyCore0.learnUnit(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[4];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`J&{5uh)#u3Al28|ER");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolverArray0[1];
      dimacsOutputSolverArray0[3] = dimacsOutputSolverArray0[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FullClauseSelectorSolver<SingleSolutionDetector>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<SingleSolutionDetector>[]) Array.newInstance(FullClauseSelectorSolver.class, 0);
      ManyCore<FullClauseSelectorSolver<SingleSolutionDetector>> manyCore0 = new ManyCore<FullClauseSelectorSolver<SingleSolutionDetector>>(false, fullClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ASolverFactory<ManyCore<SolutionCounter>> aSolverFactory0 = (ASolverFactory<ManyCore<SolutionCounter>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ManyCore<SolutionCounter>> manyCore0 = new ManyCore<ManyCore<SolutionCounter>>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.getLogPrefix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
