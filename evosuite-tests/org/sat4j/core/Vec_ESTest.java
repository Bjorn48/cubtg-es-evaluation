/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:30:53 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 4);
      int int0 = 526;
      Vec<Object> vec0 = new Vec<Object>(526);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec2);
      readOnlyVec3.clone();
      readOnlyVecArray0[3] = readOnlyVec3;
      // Undeclared exception!
      try { 
        readOnlyVec2.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      vec0.insertFirstWithShifting(objectArray0[5]);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 6);
      Vec<Object> vec1 = new Vec<Object>(1146);
      vecArray0[0] = vec1;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      vecArray0[4] = vec0;
      vecArray0[5] = vec0;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      // Undeclared exception!
      try { 
        vec2.indexOf(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Vec<Integer> vec1 = new Vec<Integer>(0, (Integer) null);
      // Undeclared exception!
      try { 
        vec1.get(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.push((Integer) int0);
      vec0.clear();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec1 = new Vec<Object>();
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>();
      vecArray0[1] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(vecArray0);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec3.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0, (Object) null);
      Vec<Object> vec1 = new Vec<Object>(4506, vec0);
      vec1.contains((Object) null);
      // Undeclared exception!
      try { 
        vec0.unsafePush((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>();
      vec0.moveTo((IVec<Vec<Integer>>) vec1);
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.moveTo((IVec<Vec<String>>) vec0);
      vec0.growTo(1161, (Vec<String>) null);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-349), (-349), 1161, 1, 1292).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec0.sort(comparator0);
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(5, 1, comparator1);
      Vec<Object> vec2 = new Vec<Object>(1161);
      // Undeclared exception!
      try { 
        vec2.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      Vec<Object> vec1 = new Vec<Object>(1547, (Object) null);
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>(vecArray0);
      vecArray0[4] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1547, vec2);
      vec3.indexOf(vecArray0[1]);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 94;
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(94);
      vec0.selectionSort(1, 1, (Comparator<Vec<Integer>>) null);
      Vec<Object> vec1 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(94, 94, comparator0);
      vec1.hashCode();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0);
      vec2.clear();
      Vec<String> vec3 = new Vec<String>(94);
      vec3.insertFirst("*uYaZu'l55F6yROme");
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 3);
      vecArray0[0] = vec3;
      vecArray0[1] = vec3;
      vec3.unsafePush("");
      vecArray0[2] = vec3;
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(vecArray0);
      // Undeclared exception!
      try { 
        vec3.shrink(94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(1, vec0);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec2 = new Vec<Object>(1);
      vecArray0[0] = vec2;
      Vec<Object> vec3 = new Vec<Object>(1, vec2);
      vecArray0[1] = vec3;
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(vecArray0);
      vec4.contains(vec3);
      Vec<Comparable<String>> vec5 = new Vec<Comparable<String>>();
      Vec<Vec<Object>> vec6 = new Vec<Vec<Object>>(1, (Vec<Object>) null);
      vec6.toString();
      // Undeclared exception!
      try { 
        vec5.remove("null");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1539);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.sort(0, 1539, comparator0);
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((-424), "e[AS+x&Gwt");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[1] = "";
      stringArray0[7] = "";
      stringArray0[1] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.toString();
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z@#k=~pH'vW";
      stringArray0[1] = "LS}}`793Z->I";
      stringArray0[2] = "YhN`wfYV=JI1[Hy1";
      stringArray0[3] = "Q-a\"";
      stringArray0[4] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[5] = "";
      stringArray0[6] = "";
      vec0.copyTo(stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Vec<Integer>> vec1 = null;
      try {
        vec1 = new Vec<Vec<Integer>>((-1929), vec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(1311);
      Vec<Object> vec0 = new Vec<Object>(1311, integer0);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 8);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      vecArray0[4] = vec0;
      vecArray0[5] = vec0;
      vecArray0[6] = vec0;
      Vec<Object> vec1 = new Vec<Object>(1311);
      vecArray0[7] = vec1;
      // Undeclared exception!
      try { 
        vec0.copyTo(vecArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.get((-1336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1336
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      Vec<String> vec1 = new Vec<String>(5, ":mz?_>z-\",GrXPbO");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5, 5, 5, 5, (-639)).when(comparator0).compare(anyString() , anyString());
      vec1.sort(comparator0);
      // Undeclared exception!
      try { 
        vec1.sort((-1), 5, (Comparator<String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      vec0.pop();
      vec0.hashCode();
      Vec<String> vec1 = new Vec<String>();
      vec1.insertFirst((String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(36);
      vec0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        vec0.delete(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      ReadOnlyVec<Vec<String>> readOnlyVec0 = new ReadOnlyVec<Vec<String>>(vec0);
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Vec<String>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1282);
      vec0.clone();
      Vec<String> vec1 = new Vec<String>(1282, "{/G=8K;9&*tv0TX%q");
      vec1.toString();
      vec0.copyTo((IVec<String>) vec1);
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
      // Undeclared exception!
      try { 
        vec0.selectionSort(0, 5, (Comparator<ReadOnlyVec<Object>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(524);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(524, vec0);
      vec1.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",";
      stringArray0[1] = "";
      stringArray0[2] = "fj2YN6#";
      stringArray0[3] = "YN $";
      stringArray0[4] = "oNY+*i;+*#dn>isq-km";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.indexOf("");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(516);
      vec0.toString();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(0, (Vec<String>) null);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<String>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Vec<String>>) toLongFunction0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<String>> comparator2 = comparator0.thenComparing(comparator1);
      vec1.sort(597, (-3002), comparator2);
      vec1.clear();
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(516);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      vec2.growTo(3931, readOnlyVec0);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>((IVec<Object>) null);
      readOnlyVecArray0[0] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[1] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec2);
      readOnlyVecArray0[2] = readOnlyVec3;
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec3.last();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1497));
      integer0.toString();
      integerArray0[0] = integer0;
      Integer.toBinaryString((-1));
      integerArray0[1] = (Integer) (-1);
      Integer integer1 = Integer.valueOf(2);
      integer1.intValue();
      integer1.intValue();
      integerArray0[2] = (Integer) 2;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1762;
      Vec<String> vec0 = new Vec<String>(1762, (String) null);
      // Undeclared exception!
      try { 
        vec0.remove("DmzoS`^{f");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1762
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      vec0.insertFirstWithShifting(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      Vec<Object> vec1 = new Vec<Object>(0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer(1311);
      Vec<Object> vec0 = new Vec<Object>(1311, integer0);
      vec0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Iterator<ReadOnlyVec<Object>> iterator0 = vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(5, vec0);
      Vec<Object> vec2 = new Vec<Object>(5, iterator0);
      vec1.contains(iterator0);
      // Undeclared exception!
      try { 
        vec1.unsafePush(iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(1, vec0);
      // Undeclared exception!
      try { 
        vec1.moveTo(1, (-3607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3607
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Vec<Integer> vec0 = new Vec<Integer>(5);
      int int0 = 1;
      Integer integer2 = Integer.valueOf(465);
      vec0.set(1, integer2);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(6);
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(1, vec0);
      // Undeclared exception!
      try { 
        vec2.moveTo(5, (-679));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -679
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.push((Integer) int0);
      vec0.clear();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec1 = new Vec<Object>();
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>();
      vecArray0[1] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(vecArray0);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec3.sortUnique(comparator0);
      try { 
        Integer.parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(2476);
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.contains(iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.toString();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        vec0.remove(object0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      vec0.hashCode();
      IVec<String> iVec0 = vec0.clone();
      Vec<Object> vec1 = new Vec<Object>(1152);
      vec1.shrinkTo(3944);
      // Undeclared exception!
      try { 
        vec1.insertFirstWithShifting(iVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Vec<Object> vec0 = new Vec<Object>(0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(0, 0, comparator0);
      Vec<Vec<Object>> vec2 = null;
      try {
        vec2 = new Vec<Vec<Object>>((Vec<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>();
      String string0 = "\"o-S%";
      vec1.equals("\"o-S%");
      Vec<Object> vec2 = new Vec<Object>();
      int int0 = 13;
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(963);
      // Undeclared exception!
      try { 
        vec3.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.delete(2115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2115
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(15);
      int int0 = 1212;
      Integer integer0 = new Integer(1212);
      // Undeclared exception!
      try { 
        vec0.set((-863), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -863
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",";
      stringArray0[1] = "";
      stringArray0[2] = "fj2YN6#";
      stringArray0[3] = "YN $";
      stringArray0[4] = "oNY+*i;+*#dn>isq-km";
      stringArray0[5] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>();
      vec0.moveTo((IVec<String>) vec1);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      vec2.size();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19, 19);
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      vec0.sortUnique(comparator0);
      // Undeclared exception!
      try { 
        vec0.delete(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0, "org.sat4j.core.Vec");
      Integer integer0 = new Integer(0);
      Vec<Object> vec1 = new Vec<Object>(0);
      Vec<Object> vec2 = new Vec<Object>(0);
      vec2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      vec0.toString();
      IVec<Vec<Object>> iVec0 = vec1.clone();
      vec0.push(iVec0);
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1774);
      Integer integer0 = Integer.valueOf((-1774));
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      Integer.valueOf(1);
      Integer integer1 = new Integer((-820));
      integer1.toString();
      vec0.growTo((-829), integer1);
      vec0.toString();
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -830
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        vec0.remove(object0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(17);
      vec0.hashCode();
      Vec<Object> vec1 = new Vec<Object>(40);
      vec1.selectionSort(17, 17, (Comparator<Object>) null);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      vecArray0[0] = vec1;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      vec2.toArray();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Object object0 = new Object();
      Vec<Object> vec0 = new Vec<Object>(461, object0);
      vecArray0[0] = vec0;
      Vec<Object> vec1 = new Vec<Object>(1083);
      vecArray0[1] = vec1;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      // Undeclared exception!
      try { 
        vec2.get(461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 461
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(2165);
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cza";
      stringArray0[2] = "";
      stringArray0[0] = "cza";
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2101, vec1);
      vec2.growTo((-1), vec1);
      Vec<Object> vec3 = new Vec<Object>();
      vec2.indexOf(vec3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      vec0.hashCode();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(248, vec0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Integer> vec1 = new Vec<Integer>();
      vec0.copyTo((IVec<Integer>) vec1);
      Vec<Object> vec2 = new Vec<Object>(1, vec0);
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>();
      vec3.moveTo(1, 0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Vec<Object> vec0 = new Vec<Object>();
      objectArray0[0] = (Object) vec0;
      int int1 = 2165;
      Integer integer1 = new Integer(2165);
      Object object0 = new Object();
      objectArray0[1] = object0;
      String string0 = ",";
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      // Undeclared exception!
      try { 
        vec1.moveTo(0, 2165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2165
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Object object0 = new Object();
      Vec<Object> vec1 = new Vec<Object>(1158);
      Integer integer0 = new Integer(1158);
      vec1.insertFirstWithShifting(integer0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1158, vec1);
      vec2.growTo(1158, vec1);
      vec2.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object> vec1 = new Vec<Object>(757, vec0);
      vec1.insertFirstWithShifting(vec0);
      vec1.clone();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Vec<Object> vec0 = new Vec<Object>(36, object0);
      vec0.pop();
      vec0.hashCode();
      Vec<String> vec1 = new Vec<String>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(36);
      vec2.contains(vec0);
      Integer integer0 = new Integer(0);
      integer0.toString();
      Vec<Integer> vec3 = new Vec<Integer>(36, integer0);
      // Undeclared exception!
      try { 
        vec3.selectionSort(0, 36, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      vec0.equals(readOnlyVecArray0[0]);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      Vec<String> vec2 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      Vec<String> vec3 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(readOnlyVec2);
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      // Undeclared exception!
      try { 
        vec4.equals(readOnlyVec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.shrink(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>();
      vec0.insertFirst(vec1);
      assertEquals(1, vec0.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec2.sort((-2791), (-1890), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2341
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>(3, "");
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super Vec<String>>) toIntFunction0);
      Comparator.reverseOrder();
      vec0.sort(comparator0);
      Vec<String> vec1 = new Vec<String>();
      vec1.shrink((-118));
      vec0.insertFirst(vec1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      Integer integer0 = Integer.valueOf(0);
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.clear();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = Integer.valueOf(3037);
      Vec<Integer> vec0 = new Vec<Integer>(0, integer0);
      Vec<Integer> vec1 = new Vec<Integer>(5);
      vec0.copyTo((IVec<Integer>) vec1);
      vec0.ensure(3037);
      Vec<Object> vec2 = new Vec<Object>(3037);
      vec2.clear();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      // Undeclared exception!
      try { 
        readOnlyVec0.ensure(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = Integer.valueOf((-1139));
      integer0.toString();
      vec0.insertFirst(integer0);
      Integer.toBinaryString((-1));
      vec0.growTo(1355, (Integer) (-1));
      vec0.clear();
      vec0.clone();
      vec0.clear();
      Vec<String> vec1 = new Vec<String>();
      vec1.shrink((-1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<Object>> comparator1 = Comparator.nullsLast((Comparator<? super Vec<Object>>) comparator0);
      vec1.sortUnique(comparator1);
      Vec<Object> vec2 = new Vec<Object>(vecArray0);
      Vec<Object> vec3 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec2.removeFromLast(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      int int0 = (-730);
      // Undeclared exception!
      try { 
        vec1.shrinkTo((-730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(524);
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>();
      vec1.moveTo(906, 906);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Vec<Object> vec0 = new Vec<Object>(2, integer0);
      vec0.pop();
      vec0.hashCode();
      Vec<String> vec1 = new Vec<String>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2);
      vec2.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Vec<String> vec1 = new Vec<String>();
      objectArray0[0] = object0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.remove(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.moveTo((IVec<Vec<String>>) vec0);
      vec0.growTo(1161, (Vec<String>) null);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3601, 1161, 4501, 3601, (-2787)).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      // Undeclared exception!
      try { 
        vec0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1161
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      vecArray0[0] = vec0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",";
      stringArray0[1] = "";
      stringArray0[2] = "YN $";
      stringArray0[3] = "YN $";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.indexOf(",");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.shrinkTo(5);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1844;
      Vec<Integer> vec0 = new Vec<Integer>(1844);
      vec0.clear();
      Vec<Object> vec1 = new Vec<Object>(1844, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(19);
      Vec<Object> vec0 = new Vec<Object>(3351, integer0);
      vec0.pop();
      int int0 = new Integer(3351);
      Vec<String> vec1 = new Vec<String>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(3351, vec0);
      // Undeclared exception!
      vec2.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) vec1;
      objectArray0[2] = (Object) vec1;
      objectArray0[3] = (Object) vec0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.delete(0);
      // Undeclared exception!
      try { 
        vec2.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      Vec<Integer> vec2 = new Vec<Integer>(0);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec2);
      vec1.insertFirstWithShifting(readOnlyVec0);
      vec1.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(1, vec0);
      Integer integer0 = new Integer((-1017));
      integer0.intValue();
      vec0.insertFirst(integer0);
      vec1.insertFirst(vec0);
      // Undeclared exception!
      try { 
        vec1.get((-2169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2169
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "";
      stringArray0[2] = "CJLykuxF";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.shrink((-641));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      Vec<String> vec1 = new Vec<String>(5, ":mz?_>z-\",GrXPbO");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2215, 2215, 2215, 5, (-639)).when(comparator0).compare(anyString() , anyString());
      vec1.sort(comparator0);
      // Undeclared exception!
      try { 
        vec1.sort((-1), 5, (Comparator<String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 19;
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19, 19);
      int int1 = 3405;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "czKgkCa?koI";
      stringArray0[1] = "org.sat4j.core.Vec$1";
      stringArray0[2] = "iSEalH}OnB_";
      stringArray0[3] = ")$\"}e}KCL{VcQl2F";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.indexOf("L[o|t?");
      vec0.growTo(3405, (-1));
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1473, (-1329), 3405, 2, (-1329)).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 19;
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19, 19);
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(19, (-556), 2645, 19, (-556)).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(0);
      Vec<Object> vec0 = new Vec<Object>();
      objectArray0[0] = (Object) vec0;
      Integer integer1 = new Integer(2165);
      Object object0 = new Object();
      Vec<String> vec1 = new Vec<String>(0, "");
      Vec<Object> vec2 = new Vec<Object>();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(431, vec2);
      Vec<Object> vec4 = new Vec<Object>(objectArray0);
      vec3.contains(vec4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Integer> vec1 = new Vec<Integer>();
      vec0.copyTo((IVec<Integer>) vec1);
      Vec<Object> vec2 = new Vec<Object>(1, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.iterator();
      vec0.equals("\"o-S%");
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Object> vec2 = new Vec<Object>(3943);
      vec2.shrinkTo(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.sort((-180), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      int int0 = 0;
      Vec<Object> vec1 = new Vec<Object>(0);
      Vec<String> vec2 = new Vec<String>();
      vec2.moveTo((IVec<String>) vec2);
      // Undeclared exception!
      try { 
        vec2.moveTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "fj2YN6#";
      stringArray0[3] = "YN $";
      stringArray0[4] = "oNY+*i;+*#dn>isq-km";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast("667r}T%='SHQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((-3607));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.sortUnique((Comparator<String>) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      String string0 = "org.sat4j.core.Vec";
      Vec<Object> vec0 = new Vec<Object>(0, "org.sat4j.core.Vec");
      int int1 = 0;
      vec0.shrinkTo(0);
      int int2 = 1743;
      vec0.ensure(1743);
      // Undeclared exception!
      try { 
        vec0.delete((-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(2165);
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.moveTo((IVec<Vec<String>>) vec0);
      vec0.growTo(1161, (Vec<String>) null);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec0.sort(comparator0);
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(5, 1, comparator1);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator3);
      vec1.sort(1161, (-1), comparator2);
      vec0.insertFirstWithShifting(vec1);
      vec1.indexOf("");
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 5);
      Vec<Object> vec2 = new Vec<Object>();
      vecArray0[0] = vec2;
      Vec<Object> vec3 = new Vec<Object>();
      vecArray0[1] = vec3;
      Vec<Object> vec4 = new Vec<Object>();
      vecArray0[2] = vec4;
      Vec<Object> vec5 = new Vec<Object>();
      vecArray0[3] = vec5;
      Vec<Object> vec6 = new Vec<Object>(0);
      vecArray0[4] = vec6;
      Vec<Vec<Object>> vec7 = new Vec<Vec<Object>>(vecArray0);
      vec7.remove(vec4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(36);
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 2);
      Vec<String> vec1 = new Vec<String>(36);
      vecArray0[0] = vec1;
      Vec<String> vec2 = new Vec<String>();
      vecArray0[1] = vec2;
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(vecArray0);
      vec3.insertFirst(vec2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<Object>> comparator1 = Comparator.nullsLast((Comparator<? super Vec<Object>>) comparator0);
      vec1.sortUnique(comparator1);
      vec0.toString();
      IVec<Vec<Object>> iVec0 = vec1.clone();
      vec0.push(iVec0);
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Comparator<String> comparator0 = null;
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      Vec<Integer> vec0 = new Vec<Integer>(0);
      int int1 = 1212;
      Integer integer0 = new Integer(1212);
      // Undeclared exception!
      try { 
        vec0.set((-863), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -863
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(0);
      vec0.iterator();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      vec1.toString();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(2);
      vec0.toString();
      Vec<Integer> vec1 = new Vec<Integer>();
      int int0 = (-1497);
      Integer integer0 = new Integer((-1497));
      integer0.toString();
      vec1.growTo(0, integer0);
      // Undeclared exception!
      try { 
        vec1.moveTo(1, (-2476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2476
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<Vec<String>> vec0 = null;
      try {
        vec0 = new Vec<Vec<String>>((Vec<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>(363, "fdz~UCjjgsa");
      vec0.unsafePush(vec1);
      Vec<String> vec2 = new Vec<String>();
      vec0.insertFirst(vec2);
      Vec<Object> vec3 = new Vec<Object>(1546, vec0);
      vec3.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec1 = new Vec<Object>(1547, (Object) null);
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>(vecArray0);
      vecArray0[1] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1547, vec2);
      // Undeclared exception!
      try { 
        vec3.indexOf(vec2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 8);
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      vec0.shrink(0);
      vec0.clear();
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      Vec<Object> vec0 = new Vec<Object>(0);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      vec0.toString();
      vec1.clone();
      Vec<String> vec2 = new Vec<String>();
      vec2.get(0);
      vec0.push((Object) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.unsafePush("");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      // Undeclared exception!
      try { 
        vec0.unsafePush((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=0F_d<\"_?aJze-";
      stringArray0[1] = ",";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      IVec<String> iVec0 = vec0.clone();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(iVec0);
      Vec<ReadOnlyVec<String>> vec1 = null;
      try {
        vec1 = new Vec<ReadOnlyVec<String>>((-858), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 5);
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      ReadOnlyVec<String> readOnlyVec0 = vec0.delete(1);
      vec0.equals(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(817);
      Object object0 = new Object();
      Vec<Object> vec0 = new Vec<Object>(817, object0);
      vec0.growTo((-1), object0);
      vec0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1213;
      Integer integer0 = new Integer((-5108));
      integer0.intValue();
      integer0.intValue();
      Integer integer1 = new Integer((-5108));
      integer1.intValue();
      Vec<Integer> vec0 = new Vec<Integer>(1213, (Integer) (-5108));
      // Undeclared exception!
      try { 
        vec0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1213;
      Integer integer0 = new Integer((-5108));
      integer0.intValue();
      Integer integer1 = new Integer(0);
      integer1.intValue();
      Integer integer2 = new Integer(0);
      integer2.intValue();
      Vec<Integer> vec0 = new Vec<Integer>(1213, (Integer) 0);
      // Undeclared exception!
      try { 
        vec0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.moveTo((IVec<Vec<String>>) vec0);
      vec0.growTo(1161, (Vec<String>) null);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1161, (-583), (-583), (-583), 1161).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec0.sort(comparator0);
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(5, (-18), comparator1);
      int int0 = (-1);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator3);
      vec1.sort(1161, (-1), comparator2);
      vec0.insertFirstWithShifting(vec1);
      vec1.indexOf("");
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 5);
      Vec<Object> vec2 = new Vec<Object>();
      vecArray0[0] = vec2;
      Vec<Object> vec3 = new Vec<Object>();
      vecArray0[1] = vec3;
      Vec<Object> vec4 = new Vec<Object>();
      vecArray0[2] = vec4;
      Vec<Object> vec5 = new Vec<Object>();
      vecArray0[3] = vec5;
      vec4.unsafePush(vec5);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      Vec<ReadOnlyVec<String>> vec6 = new Vec<ReadOnlyVec<String>>(0, readOnlyVec0);
      // Undeclared exception!
      try { 
        vec6.moveTo(0, 4490);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4490
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 15);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      Vec<String> vec2 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      Vec<String> vec3 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(vec3);
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(readOnlyVec2);
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      boolean boolean0 = vec4.equals(readOnlyVec0);
      assertEquals(0, vec4.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 2);
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec1.ensure((-616));
      Vec<Vec<Integer>> vec2 = null;
      try {
        vec2 = new Vec<Vec<Integer>>((-616));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      vec0.toString();
      IVec<Vec<Object>> iVec0 = vec1.clone();
      String string0 = "org.sat4j.core.ReadOnlyVec";
      vec0.push(iVec0);
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Integer integer0 = new Integer(2165);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " sINgC";
      stringArray0[1] = "Sr9gF[D^^kWurD+a";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec1.removeFromLast("Sr9gF[D^^kWurD+a");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(744);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort(744, 937, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(952);
      int int0 = (-1799);
      Vec<Integer> vec1 = new Vec<Integer>();
      vec0.growTo((-1799), vec1);
      Vec<String> vec2 = new Vec<String>();
      Vec<Vec<String>> vec3 = null;
      try {
        vec3 = new Vec<Vec<String>>((-1799), vec2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 0);
      vec0.copyTo(vecArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      vec0.copyTo(stringArray0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(2806);
      Vec<String> vec2 = new Vec<String>(stringArray0);
      IVec<String> iVec0 = vec2.clone();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(iVec0);
      vec1.insertFirst(readOnlyVec0);
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ",";
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      vec0.moveTo(1311, 1311);
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>();
      vec1.toString();
      // Undeclared exception!
      try { 
        vec1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(1, vec0);
      Vec<Object> vec2 = new Vec<Object>();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1, vec2);
      vec3.growTo(567, vec2);
      int int0 = vec3.indexOf(vec2);
      assertEquals(567, vec3.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.toString();
      Vec<Object> vec1 = new Vec<Object>();
      int int0 = (-762);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-762), 2293, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19, 19);
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(19, 5, (-1282), (-1282), 5).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      vec0.sortUnique(comparator0);
      // Undeclared exception!
      try { 
        vec0.delete(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer(0);
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "#Lp*]pH";
      Vec<String> vec0 = new Vec<String>(1800, "V*(/");
      Object object0 = new Object();
      objectArray0[2] = object0;
      Vec<Object> vec1 = new Vec<Object>();
      vec1.insertFirstWithShifting((Object) null);
      vec1.delete(0);
      Integer integer1 = new Integer(0);
      objectArray0[3] = (Object) integer1;
      Integer integer2 = new Integer((-1754));
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) "org.sat4j.core.Vec";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertFalse(vec2.equals((Object)vec1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(3595);
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      Vec<String> vec1 = new Vec<String>();
      Vec<Object> vec2 = new Vec<Object>();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1565, vec2);
      Vec<Object> vec4 = new Vec<Object>();
      boolean boolean0 = vec3.contains(vec0);
      assertEquals(1565, vec3.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(19);
      int int0 = 2138;
      Vec<Integer> vec1 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec1.copyTo((IVec<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(7, (Object) null);
      Vec<Object> vec1 = new Vec<Object>(4506, vec0);
      // Undeclared exception!
      try { 
        vec0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
