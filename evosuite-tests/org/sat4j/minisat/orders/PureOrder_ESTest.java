/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:28:06 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PureOrder_ESTest extends PureOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      ASolverFactory<NegationDecorator<SubModelIterator>> aSolverFactory0 = (ASolverFactory<NegationDecorator<SubModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<NegationDecorator<SubModelIterator>> basicLauncher0 = new BasicLauncher<NegationDecorator<SubModelIterator>>(aSolverFactory0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      SearchParams searchParams0 = new SearchParams((-748.6393), 5000);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2616);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      iLits0.nextFreeVarId(true);
      iLits0.nextFreeVarId(true);
      // Undeclared exception!
      try { 
        pureOrder0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PureOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.lits = (ILits) lits0;
      lits0.getFromPool(1);
      pureOrder0.init();
      int int0 = pureOrder0.select();
      assertEquals(3, int0);
      assertEquals(20, pureOrder0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(0);
      int int0 = pureOrder0.getPeriod();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder((-1));
      int int0 = pureOrder0.getPeriod();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(2848);
      pureOrder0.setPeriod(1660);
      assertEquals(1660, pureOrder0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.lits = (ILits) lits0;
      lits0.getFromPool(1);
      lits0.satisfies(2);
      // Undeclared exception!
      try { 
        pureOrder0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.lits = (ILits) lits0;
      pureOrder0.init();
      pureOrder0.select();
      pureOrder0.select();
      assertEquals(20, pureOrder0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      String string0 = pureOrder0.toString();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      int int0 = pureOrder0.getPeriod();
      assertEquals(20, int0);
  }
}
