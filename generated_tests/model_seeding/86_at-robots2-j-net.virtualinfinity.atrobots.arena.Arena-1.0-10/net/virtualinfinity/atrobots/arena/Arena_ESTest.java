/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 02:20:38 GMT 2019
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.ExplosionFunction;
import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.LinearDamageFunction;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.arena.RoundTimer;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.hardware.missiles.Missile;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Arena_ESTest extends Arena_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Arena arena0 = new Arena();
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("net.virtualinfinity.atrobots.computer.DebugInfo", 0, robotScoreKeeper0);
      // Undeclared exception!
      try { 
        arena0.addRobot(robot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arena arena0 = new Arena();
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("net.virtualinfinity.atrobts.computer.Debugfo", (-454), robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((-454));
      Position position0 = new Position();
      Missile missile0 = robot0.createMissile(absoluteAngle0, position0, (-454));
      arena0.addCollidable(missile0);
      // Undeclared exception!
      try { 
        arena0.simulate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      frameBuilder0.addSimulationObserver((SimulationObserver) null);
      // Undeclared exception!
      try { 
        arena0.simulate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.SimulationFrameBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Arena arena0 = new Arena();
      // Undeclared exception!
      try { 
        arena0.explosion((DamageInflicter) null, (ExplosionFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Arena", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      frameBuilder0.observers = null;
      // Undeclared exception!
      try { 
        arena0.endRound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.SimulationFrameBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      frameBuilder0.addSimulationObserver((SimulationObserver) null);
      // Undeclared exception!
      try { 
        arena0.endRound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.SimulationFrameBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Arena arena0 = new Arena();
      // Undeclared exception!
      try { 
        arena0.addCollidable((CollidableArenaObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Arena", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arena arena0 = new Arena();
      arena0.addIntangible((ArenaObject) null);
      assertEquals(0, arena0.countActiveRobots());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Arena arena0 = new Arena();
      arena0.determineWinners();
      assertEquals(0, arena0.countActiveRobots());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Arena arena0 = new Arena();
      Position position0 = new Position();
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-1732.23026448388), (-1732.23026448388));
      arena0.explosion((DamageInflicter) null, linearDamageFunction0);
      assertEquals(0, arena0.countActiveRobots());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Arena arena0 = new Arena();
      arena0.buildFrame();
      assertEquals(0, arena0.countActiveRobots());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      int int0 = arena0.countActiveRobots();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      arena0.visitActiveRobots((ArenaObjectVisitor) null);
      assertEquals(0, arena0.countActiveRobots());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      arena0.addIntangible((ArenaObject) null);
      assertFalse(arena0.isOnlyOneRobotAlive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arena arena0 = new Arena();
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("/J7", 0, robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(0);
      Position position0 = Position.random(0, 0, 0, 0);
      Missile missile0 = robot0.createMissile(absoluteAngle0, position0, 0);
      arena0.addCollidable(missile0);
      arena0.simulate();
      assertFalse(arena0.isOnlyOneRobotAlive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("net.virtualinfinity.atrobots.computer.DebugInfo", 0, robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((-650.974403));
      Position position0 = Position.random(0, 0.0, 1.0, (-1476.8004659));
      Missile missile0 = robot0.createMissile(absoluteAngle0, position0, 0.0);
      arena0.addCollidable(missile0);
      arena0.buildFrame();
      assertFalse(arena0.isOnlyOneRobotAlive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arena arena0 = new Arena();
      arena0.endRound();
      assertFalse(arena0.isOnlyOneRobotAlive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arena arena0 = new Arena();
      RoundTimer roundTimer0 = arena0.getRoundTimer();
      assertNotNull(roundTimer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Arena arena0 = new Arena();
      RadioDispatcher radioDispatcher0 = arena0.getRadioDispatcher();
      assertNotNull(radioDispatcher0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FrameBuilder frameBuilder0 = new FrameBuilder();
      Arena arena0 = new Arena(frameBuilder0);
      boolean boolean0 = arena0.isOnlyOneRobotAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Arena arena0 = new Arena();
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("/J7", (-444), robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-444));
      Position position0 = Position.random((-444), (-444), (-444), (-444));
      Missile missile0 = robot0.createMissile(absoluteAngle0, position0, (-444));
      arena0.addCollidable(missile0);
      arena0.simulate();
      assertEquals(0, arena0.countActiveRobots());
  }
}
