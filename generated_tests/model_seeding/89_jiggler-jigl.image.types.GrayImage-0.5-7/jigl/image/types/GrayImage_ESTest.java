/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:42:21 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.HeadlessException;
import java.awt.image.DirectColorModel;
import java.awt.image.VolatileImage;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 14;
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.addbuffer(5, 220, 6);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(14, 14);
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(3, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(6, 6, 6, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(182, 10);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.toString(rOI0);
      ROI rOI1 = new ROI(128, 3220, 153, 154);
      rOI1.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(128, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 154
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 182;
          GrayImage grayImage0 = new GrayImage(0, 182);
          int int1 = 3;
          InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
          Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
          Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
          grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
          interpolatedGrayImage0.sqrSum();
          String[] stringArray0 = new String[9];
          stringArray0[0] = "x4=nwv-iOZ";
          stringArray0[1] = ":";
          stringArray0[2] = ":";
          stringArray0[3] = "z";
          stringArray0[4] = "jigl.image.types.GrayImage";
          stringArray0[5] = "EiYN|x0b";
          stringArray0[6] = "EiYN|x0b";
          stringArray0[7] = "jwZ";
          stringArray0[8] = ":";
          // Undeclared exception!
          try { 
            image0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.GrayImage.getJavaImage(GrayImage.java:608)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(182, 172);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      int int0 = 6;
      interpolatedGrayImage0.addbuffer(6, 172, 137);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(149, 149);
      Integer.valueOf(416);
      Integer.valueOf(416);
      // Undeclared exception!
      interpolatedGrayImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(2, 7, 3347, 8);
      rOI0.setROI(8, 0, 1496, 7);
      rOI1.Y();
      rOI0.X();
      rOI0.setROI((-16777216), 9, 163, 1);
      grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) grayImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 2998;
      int int1 = (-647);
      int int2 = (-1149);
      grayImage0.addbuffer(int0, int0, int1, int2, int2);
      grayImage0.addbuffer(int2, int2, int2);
      grayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 2038, 2038);
      ROI rOI0 = new ROI();
      grayImage1.copy(rOI0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.interp(0.0);
      int int0 = (-1980);
      int int1 = 172;
      int int2 = 16;
      interpolatedGrayImage0.addbuffer(int0, int1, int0, int2, int2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      GrayImage grayImage1 = grayImage0.addbuffer(6, 220, 6);
      grayImage1.max();
      grayImage1.max();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(6, 6);
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      int int0 = (-1690);
      intArray1[0] = (-1690);
      intArray1[1] = (-1266);
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      ROI rOI0 = new ROI();
      int int1 = (-134);
      // Undeclared exception!
      try { 
        grayImage0.add((-134), (-1), (-1749), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 28, (-4301));
      ROI rOI0 = new ROI();
      rOI0.setROI(28, (-4301), (-4301), (-4301));
      // Undeclared exception!
      try { 
        grayImage0.get(2, (-4301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4301
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 18);
      int int0 = (-1);
      ROI rOI0 = new ROI();
      int int1 = (-1961);
      int int2 = new Integer(18);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage1);
      interpolatedGrayImage0.min();
      rOI0.setROI((-1961), 1, 9, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, (-1), (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      GrayImage grayImage1 = grayImage0.divide((-1270));
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      interpolatedGrayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 774;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(774, 774, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(3, 3, 787, (-1467));
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      rOI2.X();
      ROI rOI3 = new ROI(1, 913, 0, 0);
      rOI3.Y();
      rOI2.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage1.Y());
      assertEquals(3, interpolatedGrayImage1.X());
      
      ROI rOI0 = new ROI(174, 137, (-431), 9);
      assertNotNull(rOI0);
      assertEquals(9, rOI0.uy());
      assertEquals(129, rOI0.Y());
      assertEquals(174, rOI0.lx());
      assertEquals(606, rOI0.X());
      assertEquals(137, rOI0.ly());
      assertEquals((-431), rOI0.ux());
      
      rOI0.setROI(9, 182, 174, 147);
      assertEquals(36, rOI0.Y());
      assertEquals(166, rOI0.X());
      assertEquals(9, rOI0.ux());
      assertEquals(174, rOI0.lx());
      assertEquals(147, rOI0.uy());
      assertEquals(182, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      int int1 = 0;
      int int2 = (-4263);
      Integer.valueOf((-4263));
      Integer integer0 = Integer.valueOf(515);
      integer0.byteValue();
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(112, 112);
      interpolatedGrayImage0.addbuffer(112, 0, 4478);
      ROI rOI0 = new ROI(0, 8, 112, 2718);
      rOI0.setROI(16, 29, 8, 4);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.addbuffer(3, 2038, 2038);
      grayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      short[][] shortArray0 = new short[0][4];
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[][] shortArray0 = new short[4][1];
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short) (-1007);
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short)0;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[8];
      shortArray2[0] = (short) (-1856);
      shortArray2[1] = (short) (-1007);
      shortArray2[2] = (short)0;
      shortArray2[3] = (short)0;
      shortArray2[4] = (short) (-1007);
      shortArray2[5] = (short) (-1007);
      shortArray2[6] = (short)0;
      shortArray2[7] = (short)0;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[2];
      shortArray3[0] = (short)0;
      shortArray3[1] = (short)0;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[9];
      shortArray4[0] = (short)0;
      shortArray4[1] = (short) (-1856);
      shortArray4[2] = (short) (-1007);
      shortArray4[3] = (short)0;
      shortArray4[4] = (short)0;
      shortArray4[5] = (short)0;
      shortArray4[6] = (short) (-1007);
      shortArray4[7] = (short)0;
      shortArray4[8] = (short)0;
      shortArray0[3] = shortArray4;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5686;
      GrayImage grayImage0 = new GrayImage(774, 0, shortArray0);
      GrayImage grayImage1 = new GrayImage(0, 0);
      grayImage0.divide((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short[][] shortArray0 = new short[7][2];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) (-899);
      shortArray2[1] = (short)255;
      shortArray2[2] = (short)1677;
      short short0 = (short) (-2405);
      shortArray2[3] = (short) (-2405);
      shortArray2[4] = (short)0;
      shortArray2[5] = (short) (-1);
      shortArray2[6] = (short) (-58);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[0];
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[5];
      shortArray4[0] = (short)255;
      shortArray4[1] = (short) (-58);
      shortArray4[2] = (short) (-163);
      shortArray4[3] = (short)1677;
      shortArray4[4] = (short)6;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[1];
      shortArray5[0] = (short) (-2405);
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[7];
      shortArray6[0] = (short)255;
      shortArray6[1] = (short) (-58);
      shortArray6[2] = (short) (-58);
      shortArray6[3] = (short)6;
      shortArray6[4] = (short) (-1);
      shortArray6[5] = (short)0;
      shortArray6[6] = (short) (-1);
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[9];
      shortArray7[0] = (short)6;
      shortArray7[1] = (short) (-163);
      shortArray7[2] = (short)255;
      shortArray7[3] = (short) (-2405);
      shortArray7[4] = (short)1677;
      shortArray7[5] = (short) (-899);
      shortArray7[6] = (short)1677;
      shortArray7[7] = (short)255;
      shortArray7[8] = (short) (-1);
      shortArray0[6] = shortArray7;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(3, 3, 2456, 3);
      rOI1.Y();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      int int1 = 0;
      int int2 = (-4263);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        grayImage0.subtract(128, (-1), (-4263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[1] = 0;
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.min();
      ROI rOI0 = new ROI((-2705), 2651, (-2705), (-2705));
      rOI0.Y();
      ROI rOI1 = new ROI(780, 725, 5357, (-1636));
      ROI rOI2 = new ROI((-3788), (-2028), 725, (-1563));
      rOI2.Y();
      // Undeclared exception!
      try { 
        grayImage0.min(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2028
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.copy(rOI0);
      rOI0.X();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      interpolatedGrayImage0.clear(integer0);
      rOI0.setROI(3, 3, 787, (-1467));
      interpolatedGrayImage0.copy();
      ROI rOI1 = new ROI();
      ColorImage colorImage0 = new ColorImage(787, 787);
      int int0 = 8;
      // Undeclared exception!
      try { 
        colorImage0.plane(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 182);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      rOI0.X();
      ROI rOI1 = new ROI((-898), 1, 1, 5);
      rOI0.setROI(1, 892, 1499, 1);
      rOI1.Y();
      rOI1.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) grayImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -898
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(3, 3, 787, (-1467));
      ROI rOI1 = new ROI(1063, 4, 0, (-82));
      rOI0.Y();
      rOI0.X();
      rOI1.setROI(1764, 4, 1838, 182);
      rOI1.setROI(785, 0, 14, 0);
      // Undeclared exception!
      interpolatedGrayImage0.median(173);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      GrayImage grayImage2 = grayImage0.clear();
      int int1 = 0;
      int int2 = 3;
      ROI rOI0 = new ROI(0, 0, 3, 0);
      // Undeclared exception!
      try { 
        grayImage2.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(255, 3526);
      // Undeclared exception!
      try { 
        grayImage0.multiply(6, 3526, 255, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((-308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(149, 149);
      Integer.valueOf(416);
      Integer integer0 = Integer.valueOf(416);
      Integer.compareUnsigned(149, 3089);
      interpolatedGrayImage0.set(10, 10, integer0);
      ROI rOI0 = new ROI();
      rOI0.setROI(3089, 416, 10, 149);
      // Undeclared exception!
      interpolatedGrayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 14;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(14, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      intArray1[1] = (-1270);
      int int0 = (-43);
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      int[] intArray2 = new int[3];
      intArray2[0] = 255;
      intArray2[1] = (-3651);
      intArray2[2] = 1580;
      GrayImage grayImage1 = new GrayImage(255, 0, intArray2);
      GrayImage grayImage2 = grayImage1.add(255);
      grayImage2.min();
      Button button0 = null;
      try {
        button0 = new Button("d9LdtTCrn");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-172);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-3318);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "by";
      stringArray0[2] = "PREWITT_Y";
      stringArray0[3] = "";
      stringArray0[4] = "VH_!e]bMw4V)";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(112, 112);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(112, 145);
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(145, 145, 145);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[][] shortArray0 = new short[2][3];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)32767;
      shortArray2[1] = (short)732;
      shortArray2[2] = (short)255;
      shortArray0[1] = shortArray2;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(79, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(79, 1, 0, 0);
      rOI0.Y();
      rOI0.X();
      rOI0.setROI(80, 0, 2, 0);
      interpolatedGrayImage0.addbuffer(6, 515, Integer.MAX_VALUE, Integer.MAX_VALUE, 17);
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      int int1 = 0;
      int int2 = (-4263);
      interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1611, 1611);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1611, 3);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI((-82), 182, (-3241), 3);
      rOI0.setROI(3, (-518), 3, (-992));
      rOI0.Y();
      rOI1.X();
      rOI0.setROI(182, (-1189), (-4057), 0);
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 4, 0, (-82));
      rOI1.setROI(3, 1, 0, 0);
      rOI0.Y();
      rOI0.X();
      rOI1.setROI(1, 0, 14, 0);
      interpolatedGrayImage0.addbuffer(6, 515, Integer.MAX_VALUE, Integer.MAX_VALUE, 5);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 1;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      int int1 = 514;
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(514, 499, 514);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 14;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(14, 182);
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1;
      GrayImage grayImage0 = new GrayImage(0, 0);
      int int1 = 976;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 976);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      ROI rOI0 = new ROI();
      rOI0.setROI(3, 182, 0, 3);
      rOI0.X();
      int[] intArray0 = new int[6];
      intArray0[0] = (-82);
      intArray0[1] = 386;
      intArray0[2] = (-405);
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = 4;
      GrayImage grayImage1 = new GrayImage(163, 0, intArray0);
      grayImage0.absSum();
      // Undeclared exception!
      try { 
        grayImage1.divide(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 22;
      GrayImage grayImage0 = new GrayImage(22, 22);
      int int1 = 0;
      GrayImage grayImage1 = grayImage0.addbuffer(0, 22, 22);
      // Undeclared exception!
      try { 
        grayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      interpolatedGrayImage0.addbuffer(3, 182, 0, (-2370), 3);
      ROI rOI0 = new ROI();
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1063, 4, 0, (-82));
      rOI1.setROI(3, 1, 0, 0);
      rOI0.Y();
      rOI0.X();
      rOI1.setROI(1, 0, 14, 0);
      // Undeclared exception!
      try { 
        grayImage0.multiply(1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(6, 2591);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      ROI rOI0 = null;
      interpolatedGrayImage0.min();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      short short0 = (short)0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      int[][] intArray0 = new int[0][3];
      GrayImage grayImage2 = new GrayImage(intArray0);
      grayImage1.toString();
      interpolatedGrayImage0.addbuffer(1607, 0, 1952, 0, 0);
      grayImage1.addbuffer(170, 16, (-2615));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(16, 5, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(182, 3);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      int int1 = 0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int1 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      interpolatedGrayImage0.clear(integer0);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x4=nwv-iOZ";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = "z";
      stringArray0[4] = "jigl.image.types.GrayImage";
      stringArray0[5] = "EiYN|x0b";
      stringArray0[6] = "";
      stringArray0[7] = "jwZ";
      stringArray0[8] = "jigl.image.types.InterpolatedColorImage";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[][] intArray0 = new int[19][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.add((-1690));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 913, 0, 0);
      rOI1.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 182
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      GrayImage grayImage1 = grayImage0.addbuffer(14, 14, 1, (-2370), 170);
      ROI rOI0 = new ROI();
      rOI0.setROI((-1467), 4175, (-2370), (-438));
      ROI rOI1 = new ROI(2589, 1063, 14, (-1382));
      grayImage1.addSum();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.divide((-28));
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.add((-28));
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, intArray0.length);
      
      int int0 = grayImage2.addSum();
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      ROI rOI0 = new ROI();
      rOI0.setROI((-133), 0, 0, 166);
      rOI0.X();
      ROI rOI1 = new ROI(134, 913, 0, 0);
      rOI1.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage1.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      intArray1[1] = (-1270);
      intArray1[2] = (-43);
      intArray1[3] = (-16777216);
      intArray1[4] = 173;
      intArray1[5] = 50;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.divide((-43));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      GrayImage grayImage1 = interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      int int1 = 787;
      int int2 = 6;
      // Undeclared exception!
      try { 
        grayImage1.multiply(6, (-2728), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2728
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 4, 0, (-82));
      rOI1.setROI(3, 1, 0, 0);
      rOI0.Y();
      rOI0.X();
      rOI1.setROI(1, 0, 14, 0);
      interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      int int0 = (-1270);
      intArray1[1] = (-1270);
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3136;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1915, 1915, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI(0, 0, 3, 0);
      rOI0.setROI(0, 0, 0, (-3120));
      ROI rOI1 = new ROI(0, (-1829), 182, 13);
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-130), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3120
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage1 = interpolatedGrayImage0.copy();
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(0, 0);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.addSum();
      String[] stringArray0 = null;
      int int1 = (-1574);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.addbuffer((-1574), 0, 0, 19, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer.valueOf(0);
      Integer integer1 = Integer.valueOf(0);
      integer1.byteValue();
      GrayImage grayImage0 = interpolatedGrayImage0.clear(integer1);
      GrayImage grayImage1 = grayImage0.add((Image<Integer>) interpolatedGrayImage0);
      int int0 = (-1502);
      int int1 = 1422;
      // Undeclared exception!
      try { 
        grayImage1.addbuffer((-1502), 3, (-1389), (int) (byte)0, 1422);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 170;
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(160, 4, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      rOI0.X();
      rOI0.setROI(3, 3, 787, (-1467));
      grayImage0.copy();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      interpolatedGrayImage0.splat((double) 0, 182);
      interpolatedGrayImage0.addbuffer(19, 0, 19, 19, 1);
      int int0 = (-1355);
      ROI rOI0 = new ROI(0, 161, 46, 11);
      ROI rOI1 = new ROI();
      Button button0 = null;
      try {
        button0 = new Button("]R+ngrxX>!r");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[][] intArray0 = new int[19][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      intArray1[1] = (-1270);
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      rOI0.setROI(3, 3, 2196, (-1467));
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(2194, rOI0.X());
      assertEquals(2196, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      interpolatedGrayImage0.copy();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(0, 0);
      ROI rOI0 = new ROI();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set((-354), 0, integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1321;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1321, 1321);
      ROI rOI0 = new ROI();
      rOI0.X();
      int int1 = 913;
      int int2 = 0;
      ROI rOI1 = new ROI(1, 913, 0, 0);
      rOI1.Y();
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(913, Integer.MIN_VALUE, 913);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(18, 18);
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(18);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage0.min();
      rOI0.setROI((-1961), (-1961), 9, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1961
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 112;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(112, 112);
      int int1 = 4478;
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(112, 0, 4478);
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = (-214.92940141);
      int int2 = (-2728);
      int int3 = (-582);
      int int4 = 787;
      GrayImage grayImage1 = grayImage0.copy();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage1.multiply((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(163, 151, 834);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 4, 0, (-82));
      rOI1.setROI(3, 1, 0, 0);
      rOI0.Y();
      rOI0.X();
      rOI1.setROI(0, 3, 0, 3);
      rOI1.setROI(1, 0, 14, 0);
      interpolatedGrayImage0.addbuffer(6, 515, Integer.MAX_VALUE, Integer.MAX_VALUE, (-11));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.setROI(3, 182, 0, 3);
      rOI0.X();
      int[] intArray0 = new int[6];
      intArray0[0] = (-82);
      intArray0[1] = 386;
      intArray0[2] = (-405);
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 2;
      GrayImage grayImage1 = new GrayImage(163, 0, intArray0);
      grayImage0.absSum();
      // Undeclared exception!
      try { 
        grayImage1.divide(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      grayImage0.min();
      int int0 = (-1563);
      // Undeclared exception!
      try { 
        grayImage0.divide((-1563));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-43);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(20, 20);
      int int0 = 0;
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      int int2 = (-1);
      ROI rOI0 = new ROI();
      int int3 = (-1961);
      int int4 = 9;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          GrayImage grayImage0 = new GrayImage(14, 14);
          int int0 = 1;
          GrayImage grayImage1 = grayImage0.addbuffer(14, 14, 1, (-2370), 170);
          grayImage1.max();
          ROI rOI0 = new ROI();
          DirectColorModel directColorModel0 = null;
          try {
            directColorModel0 = new DirectColorModel((-1), 1, (-2370), (-1));
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:152)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      ROI rOI0 = new ROI();
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      interpolatedGrayImage0.clear(integer0);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x4=nwv-iOZ";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = "z";
      stringArray0[4] = "jigl.image.types.GrayImage";
      stringArray0[5] = "EiYN|x0b";
      stringArray0[6] = "EiYN|x0b";
      stringArray0[7] = "jwZ";
      stringArray0[8] = ":";
      // Undeclared exception!
      try { 
        grayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      int int0 = (-1961);
      interpolatedGrayImage0.min();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.get(1, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      grayImage1.min();
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-1563), 1069, (-4041));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      intArray1[1] = (-1266);
      intArray1[2] = (-43);
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 112;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(112, 112);
      int int1 = 4478;
      interpolatedGrayImage0.addbuffer(112, 0, 4478);
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = (-214.92940141);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-2728), (-582), 787);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -582
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int0 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(182, 178);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      int int3 = 0;
      interpolatedGrayImage0.splat((double) 0, 182);
      ROI rOI0 = new ROI();
      rOI0.setROI((-2315), 935, 935, 166);
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2315
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          int int1 = 182;
          GrayImage grayImage0 = new GrayImage(0, 182);
          assertNotNull(grayImage0);
          assertEquals(0, grayImage0.addSum());
          assertEquals(0L, grayImage0.sqrSum());
          assertEquals(0, grayImage0.X());
          assertEquals(0, grayImage0.absSum());
          assertEquals(182, grayImage0.Y());
          
          int int2 = 3;
          InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
          assertNotNull(interpolatedGrayImage0);
          assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
          assertEquals(3, interpolatedGrayImage0.X());
          assertEquals(182, interpolatedGrayImage0.Y());
          
          Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
          assertNotNull(integer0);
          assertFalse(integer0.equals((Object)int2));
          assertFalse(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)int1));
          assertEquals((-30000), (int)integer0);
          
          Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
          assertNotNull(image0);
          assertFalse(integer0.equals((Object)int2));
          assertFalse(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)int1));
          assertSame(interpolatedGrayImage0, image0);
          assertEquals(16380000, interpolatedGrayImage0.absSum());
          assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
          assertEquals(3, interpolatedGrayImage0.X());
          assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
          assertEquals((-16380000), interpolatedGrayImage0.addSum());
          assertEquals(182, interpolatedGrayImage0.Y());
          assertEquals(3, image0.X());
          assertEquals(182, image0.Y());
          
          GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
          assertNotNull(grayImage1);
          assertSame(grayImage0, grayImage1);
          assertSame(interpolatedGrayImage0, image0);
          assertSame(grayImage1, grayImage0);
          assertEquals(0, grayImage0.addSum());
          assertEquals(0L, grayImage0.sqrSum());
          assertEquals(0, grayImage0.X());
          assertEquals(0, grayImage0.absSum());
          assertEquals(182, grayImage0.Y());
          assertEquals(16380000, interpolatedGrayImage0.absSum());
          assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
          assertEquals(3, interpolatedGrayImage0.X());
          assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
          assertEquals((-16380000), interpolatedGrayImage0.addSum());
          assertEquals(182, interpolatedGrayImage0.Y());
          assertEquals(0, grayImage1.X());
          assertEquals(0L, grayImage1.sqrSum());
          assertEquals(182, grayImage1.Y());
          assertEquals(0, grayImage1.absSum());
          assertEquals(0, grayImage1.addSum());
          
          long long0 = interpolatedGrayImage0.sqrSum();
          assertSame(interpolatedGrayImage0, image0);
          assertEquals(16380000, interpolatedGrayImage0.absSum());
          assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
          assertEquals(3, interpolatedGrayImage0.X());
          assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
          assertEquals((-16380000), interpolatedGrayImage0.addSum());
          assertEquals(182, interpolatedGrayImage0.Y());
          assertEquals(491400000000L, long0);
          
          String[] stringArray0 = new String[9];
          stringArray0[0] = "x4=nwv-iOZ";
          stringArray0[1] = ":";
          stringArray0[2] = ":";
          stringArray0[3] = "z";
          stringArray0[4] = "jigl.image.types.GrayImage";
          stringArray0[5] = "EiYN|x0b";
          stringArray0[6] = "EiYN|x0b";
          stringArray0[7] = "jwZ";
          stringArray0[8] = ":";
          // Undeclared exception!
          try { 
            image0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.GrayImage.getJavaImage(GrayImage.java:608)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(182, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      
      int int3 = 0;
      int int4 = 3;
      int int5 = 0;
      interpolatedGrayImage0.splat((double) 0, 182);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      
      ROI rOI0 = new ROI(2, 3220, 2, 3220);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3220, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(3220, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(2, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3220, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(3220, rOI0.ly());
      assertEquals(1, int0);
      
      Integer integer2 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-30000), (int)integer2);
      
      GrayImage grayImage1 = grayImage0.clear(integer2);
      assertNotNull(grayImage1);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3220
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 22;
      GrayImage grayImage0 = new GrayImage(22, 22);
      assertNotNull(grayImage0);
      assertEquals(22, grayImage0.X());
      assertEquals(22, grayImage0.Y());
      
      int int1 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(22, grayImage0.X());
      assertEquals(22, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(22, interpolatedGrayImage0.Y());
      assertEquals(22, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(30, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(30, interpolatedGrayImage0.X());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(30, interpolatedGrayImage0.X());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(182, grayImage1.Y());
      
      int[][] intArray0 = new int[0][3];
      GrayImage grayImage2 = new GrayImage(intArray0);
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, intArray0.length);
      
      String string0 = grayImage1.toString();
      assertNotNull(string0);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(30, interpolatedGrayImage0.X());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(182, grayImage1.Y());
      assertEquals("0:182\n", string0);
      
      int int0 = grayImage0.absSum();
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(774, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(774, grayImage0.X());
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      GrayImage grayImage1 = grayImage0.divide((Image<Integer>) grayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(774, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(774, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(128, interpolatedGrayImage0.Y());
      
      int int1 = 0;
      int int2 = (-4263);
      // Undeclared exception!
      interpolatedGrayImage0.max();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 735);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      rOI0.setROI(1, 1, 0, (-32768));
      assertEquals(32770, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-32768), rOI0.uy());
      
      ROI rOI1 = new ROI(1, 0, 787, 0);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(787, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(787, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(32770, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-32768), rOI0.uy());
      assertEquals(32770, int1);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals("0:735\n", string0);
      
      int int2 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(787, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(787, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(787, int2);
      
      rOI0.setROI(993, Integer.MIN_VALUE, 0, 1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(994, rOI0.X());
      assertEquals((-2147483646), rOI0.Y());
      assertEquals(993, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      rOI1.setROI(Integer.MIN_VALUE, 508, 1, (-401));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(Integer.MIN_VALUE, rOI1.ux());
      assertEquals((-401), rOI1.uy());
      assertEquals(910, rOI1.Y());
      assertEquals(508, rOI1.ly());
      assertEquals((-2147483646), rOI1.X());
      assertEquals(1, rOI1.lx());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add(14);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(735, interpolatedGrayImage1.Y());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      
      rOI2.setROI(5016, 993, 1, 2021);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(5016, rOI2.lx());
      assertEquals(1, rOI2.ux());
      assertEquals(993, rOI2.uy());
      assertEquals(2021, rOI2.ly());
      assertEquals(5016, rOI2.X());
      assertEquals(1029, rOI2.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.max(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 993
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(128, interpolatedGrayImage0.X());
      
      int int1 = (-4263);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      assertNotNull(grayImage0);
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      int int2 = (-1);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(149, 149);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(149, interpolatedGrayImage0.Y());
      assertEquals(149, interpolatedGrayImage0.X());
      
      Integer integer0 = Integer.valueOf(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(100, (int)integer1);
      
      int int0 = Integer.remainderUnsigned(149, (-3545));
      assertEquals(149, int0);
      
      int int1 = Integer.compareUnsigned((-3545), 3089);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      interpolatedGrayImage0.set(10, 10, integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(149, interpolatedGrayImage0.Y());
      assertEquals(149, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI(1, 4, 0, (-82));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(2, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals((-82), rOI1.uy());
      assertEquals(4, rOI1.ly());
      assertEquals(87, rOI1.Y());
      
      rOI1.setROI(3, 1, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(4, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(3, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      rOI1.setROI(1, 0, 14, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(14, rOI1.lx());
      assertEquals(14, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(182, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply((Image<Integer>) grayImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      int int1 = (-1);
      int int2 = (-1961);
      int int3 = 9;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(1, interpolatedGrayImage1.Y());
      
      try { 
        interpolatedGrayImage1.interp(1665.0F, 1665.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1665
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 149;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(149, 149);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(149, interpolatedGrayImage0.X());
      assertEquals(149, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      int int1 = 10;
      int int2 = 416;
      Integer integer0 = Integer.valueOf(416);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(416, (int)integer0);
      
      Integer integer1 = Integer.valueOf(416);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(416, (int)integer1);
      
      int int3 = Integer.compareUnsigned((-3545), 3089);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      interpolatedGrayImage0.set(10, 10, integer1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(149, interpolatedGrayImage0.X());
      assertEquals(149, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      int int4 = 147;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      assertNotNull(grayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      rOI0.setROI(3, 3, 787, (-1467));
      assertEquals(3, rOI0.ux());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(785, rOI0.X());
      assertEquals(787, rOI0.lx());
      assertEquals(3, rOI0.ly());
      
      ROI rOI1 = new ROI(1063, (-1467), 0, 1063);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-1467), rOI1.uy());
      assertEquals(2531, rOI1.Y());
      assertEquals(1064, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(1063, rOI1.lx());
      assertEquals(1063, rOI1.ly());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(3, rOI0.ux());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(785, rOI0.X());
      assertEquals(787, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(1471, int1);
      
      ROI rOI2 = new ROI(3, 1, 3229, (-394));
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(1, rOI2.ly());
      assertEquals(3227, rOI2.X());
      assertEquals(396, rOI2.Y());
      assertEquals(3, rOI2.ux());
      assertEquals(3229, rOI2.lx());
      assertEquals((-394), rOI2.uy());
      
      int int2 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1467), rOI1.uy());
      assertEquals(2531, rOI1.Y());
      assertEquals(1064, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(1063, rOI1.lx());
      assertEquals(1063, rOI1.ly());
      assertEquals(2531, int2);
      
      int int3 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1467), rOI1.uy());
      assertEquals(2531, rOI1.Y());
      assertEquals(1064, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(1063, rOI1.lx());
      assertEquals(1063, rOI1.ly());
      assertEquals(1064, int3);
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -394
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 255;
      intArray0[1] = (-3651);
      intArray0[2] = 1580;
      GrayImage grayImage0 = new GrayImage(255, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(255, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {255, (-3651), 1580}, intArray0);
      
      GrayImage grayImage1 = grayImage0.add(255);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(255, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(255, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {255, (-3651), 1580}, intArray0);
      
      // Undeclared exception!
      try { 
        grayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      String string0 = interpolatedGrayImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals("3:182\nnull \n", string0);
      
      ROI rOI1 = new ROI(0, 0, 128, 154);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(129, rOI1.X());
      assertEquals(154, rOI1.ly());
      assertEquals(128, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(155, rOI1.Y());
      
      int int1 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(129, rOI1.X());
      assertEquals(154, rOI1.ly());
      assertEquals(128, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(155, rOI1.Y());
      assertEquals(129, int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(729, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = 3;
      rOI0.setROI(0, 233, 0, 3);
      assertEquals(233, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(231, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      int int0 = (-2274);
      int int1 = 4;
      // Undeclared exception!
      try { 
        grayImage0.set((-2274), 4, (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-1270);
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-1270), 321, 321, Integer.MIN_VALUE, (-1270));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(3, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.absSum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = (short)5686;
      int int0 = (-3714);
      short[] shortArray0 = null;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, (-3714), (short[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNotNull(integer0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      grayImage0.addbuffer(177, 147, 147, 3374, 177);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[][] intArray0 = new int[19][9];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(9, grayImage0.X());
      assertEquals(19, grayImage0.Y());
      assertEquals(19, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 182;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(182, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      interpolatedGrayImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(182, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      
      // Undeclared exception!
      try { 
        grayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI(1, 4, 0, (-82));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(4, rOI1.ly());
      assertEquals((-82), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(2, rOI1.X());
      assertEquals(1, rOI1.lx());
      assertEquals(87, rOI1.Y());
      
      rOI1.setROI(3, 1, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(3, rOI1.lx());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      GrayImage grayImage1 = new GrayImage(0, 1);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      
      int int3 = grayImage1.absSum();
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer((-2478));
      assertNotNull(integer0);
      assertEquals((-2478), (int)integer0);
      
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-2478), (-2478));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals(182, image0.Y());
      assertEquals(3, image0.X());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(grayImage1, grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(182, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      long long0 = interpolatedGrayImage0.sqrSum();
      assertSame(interpolatedGrayImage0, image0);
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals(491400000000L, long0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x4=nwv-iOZ";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = "z";
      stringArray0[4] = "jigl.image.types.GrayImage";
      stringArray0[5] = "EiYN|x0b";
      stringArray0[6] = "EiYN|x0b";
      stringArray0[7] = "jwZ";
      stringArray0[8] = ":";
      GrayImage grayImage2 = grayImage1.addbuffer(146, 3, 32767);
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertEquals(14351946, grayImage2.addSum());
      assertEquals(146, grayImage2.X());
      assertEquals(3, grayImage2.Y());
      assertEquals(14351946, grayImage2.absSum());
      assertEquals(470270214582L, grayImage2.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(182, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      int int0 = interpolatedGrayImage0.absSum();
      assertSame(interpolatedGrayImage0, image0);
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(16380000, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 182;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      
      rOI0.setROI(3, 3, 787, (-1467));
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(785, rOI0.X());
      assertEquals(787, rOI0.lx());
      
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 128;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(128, interpolatedGrayImage0.X());
      
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      assertNotNull(grayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(3, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(872, 872);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(872, interpolatedGrayImage0.X());
      assertEquals(872, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[][] intArray0 = new int[19][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(9, grayImage0.X());
      assertEquals(19, grayImage0.Y());
      assertEquals(19, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(182, grayImage0.Y());
      
      short short0 = (short)0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(171, (short)0, 182, 0);
      assertEquals(182, rOI0.lx());
      assertEquals(171, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(12, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(0, 171, (-30), 0);
      assertEquals(0, rOI0.lx());
      assertEquals(171, rOI0.ly());
      assertEquals(31, rOI0.X());
      assertEquals(172, rOI0.Y());
      assertEquals((-30), rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(56, 56);
      assertNotNull(grayImage0);
      assertEquals(56, grayImage0.Y());
      assertEquals(56, grayImage0.X());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      ROI rOI0 = new ROI(2, 3220, 2, 3220);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(3220, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.ux());
      assertEquals(3220, rOI0.ly());
      assertEquals(2, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(3220, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.ux());
      assertEquals(3220, rOI0.ly());
      assertEquals(2, rOI0.lx());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3220
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      assertNotNull(grayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        grayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1690);
      intArray1[1] = (-1270);
      intArray1[2] = (-43);
      intArray1[3] = (-16777216);
      intArray1[4] = 173;
      intArray1[5] = 50;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.add(50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(1611, 1611);
      assertNotNull(grayImage0);
      assertEquals(1611, grayImage0.Y());
      assertEquals(1611, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1611, 3);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1611, interpolatedGrayImage0.X());
      assertEquals(3, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      grayImage0.max();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      assertNotNull(grayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(182, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      
      // Undeclared exception!
      try { 
        grayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      assertNotNull(grayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      rOI0.setROI(3, 3, 787, (-1467));
      assertEquals((-1467), rOI0.uy());
      assertEquals(1471, rOI0.Y());
      assertEquals(785, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(787, rOI0.lx());
      assertEquals(3, rOI0.ly());
      
      ROI rOI1 = new ROI(1063, (-1467), 0, 1063);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1064, rOI1.X());
      assertEquals(2531, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1063, rOI1.lx());
      assertEquals(1063, rOI1.ly());
      assertEquals((-1467), rOI1.uy());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals((-1467), rOI0.uy());
      assertEquals(1471, rOI0.Y());
      assertEquals(785, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(787, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(1471, int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((-1707), (-1707), Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1707
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI(0, (-405), 386, (-898));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals((-898), rOI1.uy());
      assertEquals(386, rOI1.lx());
      assertEquals(387, rOI1.X());
      assertEquals((-405), rOI1.ly());
      assertEquals(494, rOI1.Y());
      
      rOI1.setROI((-82), 4, 386, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals((-82), rOI1.ux());
      assertEquals(4, rOI1.ly());
      assertEquals(5, rOI1.Y());
      assertEquals(386, rOI1.lx());
      assertEquals(469, rOI1.X());
      
      int int1 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals((-82), rOI1.ux());
      assertEquals(4, rOI1.ly());
      assertEquals(5, rOI1.Y());
      assertEquals(386, rOI1.lx());
      assertEquals(469, rOI1.X());
      assertEquals(5, int1);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int2);
      
      rOI1.setROI(32767, (-898), 1237, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals((-898), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(899, rOI1.Y());
      assertEquals(32767, rOI1.lx());
      assertEquals(1237, rOI1.ux());
      assertEquals(31531, rOI1.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.divide((-1270));
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 4);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(4, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(3, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 910;
      int[] intArray0 = new int[3];
      intArray0[0] = 910;
      intArray0[1] = 910;
      intArray0[2] = 910;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(910, 910, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(128, 128);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(128, 0, (-4263));
      assertNotNull(grayImage0);
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(128, interpolatedGrayImage0.Y());
      assertEquals(128, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 14;
      GrayImage grayImage0 = new GrayImage(14, 14);
      assertNotNull(grayImage0);
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.addbuffer(14, 14, 1, (-2370), 170);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      assertEquals(5664400L, grayImage1.sqrSum());
      assertEquals(14, grayImage1.Y());
      assertEquals(33320, grayImage1.absSum());
      assertEquals(33320, grayImage1.addSum());
      assertEquals(14, grayImage1.X());
      
      int int1 = 3;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int2 = 0;
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(182, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.add(0, 0, (-1749), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 735);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      rOI0.setROI(1, 1, 0, (-32768));
      assertEquals((-32768), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(32770, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      ROI rOI1 = new ROI(1, 0, 787, (-2272));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(787, rOI1.X());
      assertEquals(2273, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals((-2272), rOI1.uy());
      assertEquals(787, rOI1.lx());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals((-32768), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(32770, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(32770, int1);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals("0:735\n", string0);
      
      int int2 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(787, rOI1.X());
      assertEquals(2273, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals((-2272), rOI1.uy());
      assertEquals(787, rOI1.lx());
      assertEquals(787, int2);
      
      rOI0.setROI(993, Integer.MIN_VALUE, 0, 1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(993, rOI0.lx());
      assertEquals(994, rOI0.X());
      assertEquals((-2147483646), rOI0.Y());
      
      rOI1.setROI(Integer.MIN_VALUE, 508, 1, (-401));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.lx());
      assertEquals(910, rOI1.Y());
      assertEquals(Integer.MIN_VALUE, rOI1.ux());
      assertEquals((-401), rOI1.uy());
      assertEquals(508, rOI1.ly());
      assertEquals((-2147483646), rOI1.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add(14);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(735, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(735, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addbuffer((-401), (-1327), (-32768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(3, 0);
      assertNotNull(interpolatedGrayImage2);
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI((-82), 632, 35, 3);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(632, rOI1.ly());
      assertEquals(3, rOI1.uy());
      assertEquals(118, rOI1.X());
      assertEquals(630, rOI1.Y());
      assertEquals(35, rOI1.lx());
      assertEquals((-82), rOI1.ux());
      
      rOI0.setROI(1, 3, 1, 1024);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.ux());
      assertEquals(1024, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1022, rOI0.Y());
      assertEquals(3, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.ux());
      assertEquals(1024, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1022, rOI0.Y());
      assertEquals(3, rOI0.uy());
      assertEquals(1022, int1);
      
      rOI1.setROI(Integer.MAX_VALUE, 0, 255, (-2782));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals((-2782), rOI1.uy());
      assertEquals(2147483393, rOI1.X());
      assertEquals(2783, rOI1.Y());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(255, rOI1.ux());
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage1.divide((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage3);
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.X());
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage0.add((Image<Integer>) null);
      assertNotNull(interpolatedGrayImage4);
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.X());
      assertEquals(0, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.add(35, 45, (-82));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, image0.X());
      assertEquals(182, image0.Y());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(182, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      
      long long0 = interpolatedGrayImage0.sqrSum();
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(491400000000L, long0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x4=nwv-iOZ";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = "z";
      stringArray0[4] = "jigl.image.types.GrayImage";
      GrayImage grayImage2 = grayImage0.divide((Image<Integer>) grayImage1);
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(16380000, interpolatedGrayImage0.absSum());
      assertEquals((-16380000), interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(491400000000L, interpolatedGrayImage0.sqrSum());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(182, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(182, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 14;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(14, 182);
      assertNotNull(grayImage0);
      assertEquals(182, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      
      int int2 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(182, interpolatedGrayImage0.Y());
      
      Integer integer0 = grayImage0.get(3, 6);
      assertNull(integer0);
      assertEquals(182, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      
      int int3 = 0;
      int int4 = 3;
      int int5 = 0;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.splat((double) 14, 182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, (-1358), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(3, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(1, 1, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(11, 22);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(22, interpolatedGrayImage0.Y());
      assertEquals(11, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(22, interpolatedGrayImage0.Y());
      assertEquals(11, interpolatedGrayImage0.X());
      assertEquals(22, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(11, interpolatedGrayImage1.X());
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.subtract(11, 934, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 934
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      byte byte0 = integer2.byteValue();
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((byte)0, byte0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.clear(integer2);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(integer2.equals((Object)integer0));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(1, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.add((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertFalse(integer2.equals((Object)integer0));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(1, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.X());
      assertEquals(1, interpolatedGrayImage2.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.addbuffer((-1502), 3, (-1389), (int) (byte)0, 1422);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNotNull(integer0);
      assertEquals(1, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(1, intArray0.length);
      assertEquals(0, (int)integer0);
      
      int int0 = 177;
      int int1 = 147;
      Integer integer1 = grayImage0.max();
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(1, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(1, intArray0.length);
      assertEquals(0, (int)integer1);
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-3170), 177, 177, 147, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(182, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(3, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      assertEquals("0:0\n", string0);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(3, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(intArray0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.add(3113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = (-1749);
      String[] stringArray0 = new String[1];
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(182, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(182, grayImage1.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.divide(206, 193, 3160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 193
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(1611, 1611);
      assertNotNull(grayImage0);
      assertEquals(1611, grayImage0.Y());
      assertEquals(1611, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1611, 3);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1611, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI((-82), 182, (-3241), 3);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-3241), rOI1.ux());
      assertEquals(3, rOI1.uy());
      assertEquals(180, rOI1.Y());
      assertEquals((-82), rOI1.lx());
      assertEquals(3160, rOI1.X());
      assertEquals(182, rOI1.ly());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1611, interpolatedGrayImage0.X());
      
      rOI1.setROI(1, (-296), 79, 3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(79, rOI1.X());
      assertEquals((-296), rOI1.uy());
      assertEquals(79, rOI1.lx());
      assertEquals(3, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(300, rOI1.Y());
      
      rOI0.setROI(3, (-518), 3, (-992));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(3, rOI0.lx());
      assertEquals(475, rOI0.Y());
      assertEquals((-992), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals((-518), rOI0.ly());
      
      int int2 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI0, rOI1);
      assertEquals(3, rOI0.lx());
      assertEquals(475, rOI0.Y());
      assertEquals((-992), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals((-518), rOI0.ly());
      assertEquals(475, int2);
      
      int int3 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(79, rOI1.X());
      assertEquals((-296), rOI1.uy());
      assertEquals(79, rOI1.lx());
      assertEquals(3, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(300, rOI1.Y());
      assertEquals(79, int3);
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -992
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(182, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI(1063, 4, 0, (-82));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1063, rOI1.lx());
      assertEquals(1064, rOI1.X());
      assertEquals(87, rOI1.Y());
      assertEquals(4, rOI1.ly());
      assertEquals((-82), rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      rOI1.setROI(3, 1, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(2, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(3, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      int int0 = (-2274);
      int int1 = 4;
      // Undeclared exception!
      try { 
        grayImage0.set((-2274), 4, (Integer) (-2274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1690);
      intArray0[1] = (-1270);
      intArray0[2] = (-43);
      intArray0[3] = (-16777216);
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      
      int int1 = 0;
      long long0 = interpolatedGrayImage0.sqrSum();
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, long0);
      
      String string0 = "z";
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage0 = interpolatedGrayImage0.copy(rOI0);
      assertNotNull(grayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      rOI0.setROI(3, 3, 787, (-1467));
      assertEquals(3, rOI0.ly());
      assertEquals(787, rOI0.lx());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(785, rOI0.X());
      assertEquals(3, rOI0.ux());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(182, interpolatedGrayImage0.Y());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, rOI0.ly());
      assertEquals(787, rOI0.lx());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1467), rOI0.uy());
      assertEquals(785, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      rOI1.setROI(787, (-1467), 732, (-338));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(732, rOI1.ux());
      assertEquals(787, rOI1.lx());
      assertEquals(56, rOI1.X());
      assertEquals((-338), rOI1.ly());
      assertEquals((-1467), rOI1.uy());
      assertEquals(1130, rOI1.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1467
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = new Integer(9);
      assertEquals(9, int0);
      
      rOI0.setROI(9, 9, 2231, (-1426));
      assertEquals(2223, rOI0.X());
      assertEquals(1436, rOI0.Y());
      assertEquals(9, rOI0.ux());
      assertEquals(2231, rOI0.lx());
      assertEquals((-1426), rOI0.uy());
      assertEquals(9, rOI0.ly());
      
      short[][] shortArray0 = new short[1][0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(452, 452);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(452, interpolatedGrayImage0.Y());
      assertEquals(452, interpolatedGrayImage0.X());
      
      int int0 = 28;
      Integer integer0 = Integer.valueOf(166);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(166, (int)integer0);
      
      Integer integer1 = Integer.valueOf(166);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(166, (int)integer1);
      
      byte byte0 = integer1.byteValue();
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((byte) (-90), byte0);
      
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 455;
      GrayImage grayImage0 = new GrayImage(455, 455);
      assertNotNull(grayImage0);
      assertEquals(455, grayImage0.Y());
      assertEquals(455, grayImage0.X());
      
      // Undeclared exception!
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 149;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(149, 149);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(149, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(149, interpolatedGrayImage0.Y());
      
      Integer integer0 = Integer.valueOf(149);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(149, (int)integer0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(100, (int)integer1);
      
      int int1 = Integer.compareUnsigned(149, 3089);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(149, 149, integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 149
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(872, 872);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 182);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      ROI rOI0 = new ROI();
      rOI0.X();
      String string0 = interpolatedGrayImage0.toString(rOI0);
      assertEquals("3:182\nnull \n", string0);
      
      rOI0.setROI((-2572), 182, 0, (-2572));
      ROI rOI1 = new ROI((-2572), 1, (-1310), (-1335));
      int int0 = grayImage0.addSum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      int int1 = 3;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3, 182);
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      int int2 = (-1);
      ROI rOI0 = new ROI();
      int int3 = (-1961);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 0;
      int int1 = 182;
      GrayImage grayImage0 = new GrayImage(0, 182);
      ROI rOI0 = new ROI();
      int int2 = (-1749);
      // Undeclared exception!
      try { 
        grayImage0.add(0, 0, (-1749), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}
