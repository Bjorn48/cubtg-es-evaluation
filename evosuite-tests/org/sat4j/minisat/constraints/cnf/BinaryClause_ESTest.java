/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:45:55 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.GateTranslator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("X,({I{!UoKY1N");
      originalBinaryClause0.head = (-2462);
      // Undeclared exception!
      try { 
        originalBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      VecInt vecInt1 = new VecInt(47);
      IVecInt iVecInt0 = vecInt1.push(861);
      vecInt1.moveTo(0, 1);
      int int0 = learntBinaryClause0.getAssertionLevel(iVecInt0, (-2399));
      assertEquals((-1), int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.tail = (-486);
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, 2);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(30, 5).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      // Undeclared exception!
      try { 
        OriginalBinaryClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      originalBinaryClause0.tail = 1037;
      int[] intArray0 = originalBinaryClause0.getLits();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {2, 1037}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      originalBinaryClause0.tail = 931;
      // Undeclared exception!
      try { 
        originalBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      originalBinaryClause0.rescaleBy(0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      originalBinaryClause0.tail = 2065;
      int int0 = originalBinaryClause0.get(0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.get((-963));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      learntBinaryClause0.head = 543;
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      learntBinaryClause0.head = 9;
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      originalBinaryClause0.forwardActivity(1329.5712582);
      double double0 = originalBinaryClause0.getActivity();
      assertEquals(1329.5712582, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = null;
      try {
        learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.getAssertionLevel((IVecInt) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason(2678, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      String string0 = learntBinaryClause0.toString();
      assertEquals("1[?] 1[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      VecInt vecInt1 = new VecInt(47);
      IVecInt iVecInt0 = vecInt1.push(861);
      int int0 = learntBinaryClause0.getAssertionLevel(iVecInt0, (-2399));
      assertEquals((-1), int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      Object object0 = new Object();
      boolean boolean0 = learntBinaryClause0.equals(object0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, basicLauncher0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      learntBinaryClause0.assertConstraint(solver0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.get(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.satisfies(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      // Undeclared exception!
      try { 
        OriginalBinaryClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int int0 = learntBinaryClause0.size();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      boolean boolean0 = originalBinaryClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      double double0 = originalBinaryClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReasonOnTheFly(1194, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      originalBinaryClause0.hashCode();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = originalBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      int int0 = originalBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      originalBinaryClause0.rescaleBy(2);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(iLits0).valueToString(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
