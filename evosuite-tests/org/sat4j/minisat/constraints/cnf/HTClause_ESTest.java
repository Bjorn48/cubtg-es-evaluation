/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:51:58 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("3Sz\"9&KCQ");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      int[] intArray0 = new int[5];
      intArray0[0] = 3259;
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      String string0 = originalHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals("-1629[null] 0[null] 0[null] 0[null] 0[null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, iLits0);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>(")L&CvG82");
      String string0 = originalHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals("0[?] 0[?] 2[?]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      vecInt0.unsafePush(56);
      int int0 = originalHTClause0.getAssertionLevel(vecInt0, 61);
      assertEquals(0, int0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(56, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      vecInt0.insertFirst((-1653));
      int int0 = originalHTClause0.getAssertionLevel(vecInt0, 1);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(40, originalHTClause0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(57, 57);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.tail = 738;
      // Undeclared exception!
      try { 
        originalHTClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly((-827), iVecInt0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      IVecInt iVecInt0 = vecInt0.push(0);
      IVecInt iVecInt1 = vecInt0.push(2);
      vecInt0.pushAll(iVecInt1);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      originalHTClause0.hashCode();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      vecInt0.push(0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.hashCode();
      assertEquals(41, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      IVecInt iVecInt0 = vecInt0.push((-261));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      int[] intArray0 = originalHTClause0.getLits();
      assertEquals(5, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {4, 4, 4, 4, (-261)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt(23, 23);
      vecInt0.push(0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.rescaleBy(0.0);
      assertEquals(40, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.get(56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, iLits0);
      String string0 = originalHTClause0.toString();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals("0[?] 0[?] 2[?]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 80);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      vecInt0.push(35);
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      boolean boolean0 = originalHTClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(57, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(29, 80);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 50);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(2);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 80);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      vecInt0.push(35);
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      boolean boolean0 = originalHTClause0.simplify();
      assertEquals(57, originalHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(34, 2);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.tail = 34;
      // Undeclared exception!
      try { 
        originalHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(iLits0).isFalsified(anyInt());
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      VecInt vecInt1 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, vecInt1);
      originalHTClause0.calcReasonOnTheFly((-146), vecInt0, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(44, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(iLits0).isFalsified(anyInt());
      int[] intArray0 = new int[5];
      intArray0[0] = 3228;
      VecInt vecInt1 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, vecInt1);
      originalHTClause0.calcReasonOnTheFly((-146), vecInt0, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(44, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      VecInt vecInt1 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, vecInt1);
      originalHTClause0.calcReasonOnTheFly((-146), vecInt0, vecInt0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(5, originalHTClause0.size());
      assertEquals(40, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      Constr constr0 = learntHTClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(56, constr0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.getVocabulary();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(56, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      IVecInt iVecInt0 = vecInt0.push((-261));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      int int0 = originalHTClause0.get(4);
      assertEquals((-261), int0);
      assertEquals(5, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("=ZCf}Aovt.");
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 65535);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("learnt ternary clauses\t: ");
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(30, (-1));
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, (-333));
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(57, 829);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 828
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(72, (-1705));
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -853
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(59, 59);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.getAssertionLevel((IVecInt) null, (-31));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, 50);
      vecInt0.insertFirst(711);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly(50, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 711
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReason(56, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 1217);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReason(56, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1217
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1679, 1679);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1679
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, (-2343));
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2343
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.calcReason(500, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(56, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int int0 = originalHTClause0.size();
      assertEquals(40, int0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      IVecInt iVecInt1 = vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      vecInt0.push(0);
      int int0 = originalHTClause0.getAssertionLevel(iVecInt1, 1);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(0, int0);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      IVecInt iVecInt1 = vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      vecInt0.insertFirst(3138);
      int int0 = originalHTClause0.getAssertionLevel(iVecInt1, 1);
      assertEquals(3, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      IVecInt iVecInt1 = vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      iVecInt1.shrink((-724));
      // Undeclared exception!
      try { 
        originalHTClause0.getAssertionLevel(iVecInt1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(57, 57);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertEquals(57, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      iVecInt0.copyTo((IVecInt) vecInt0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      boolean boolean0 = originalHTClause0.equals((Object) null);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt(59, 59);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      Object object0 = new Object();
      boolean boolean0 = originalHTClause0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(59, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(56, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt(80, 80);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, eMARestarts0);
      originalHTClause0.assertConstraint(solver0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(80, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(17, 10);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint(unitPropagationListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(95, 95);
      EMARestarts eMARestarts0 = new EMARestarts();
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, varOrderHeap0, eMARestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, iLits0, vecInt0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(59, 59);
      vecInt0.push(59);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int int0 = originalHTClause0.get(59);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(60, originalHTClause0.size());
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt(66);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(66);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      int int0 = originalHTClause0.get(0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(0, int0);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      IVecInt iVecInt1 = vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt1, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.get((-3493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3494
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      Lits lits0 = new Lits();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      originalHTClause0.getVocabulary();
      assertEquals(3, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      int int0 = originalHTClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(3, originalHTClause0.size());
      assertEquals(1, int0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      boolean boolean0 = learntHTClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(56, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      Constr constr0 = originalHTClause0.toConstraint();
      assertEquals(56, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.push(4);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
      boolean boolean0 = originalHTClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt(40, 40);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      double double0 = originalHTClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(40, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VecInt vecInt0 = new VecInt(56, 56);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.rescaleBy(56);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(56, originalHTClause0.size());
  }
}
