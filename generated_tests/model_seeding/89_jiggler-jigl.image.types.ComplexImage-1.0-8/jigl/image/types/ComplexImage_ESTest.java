/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:06:12 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.ColorConvertOp;
import java.awt.image.ImageProducer;
import java.util.HashMap;
import javax.swing.JLayeredPane;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      Integer integer0 = new Integer(6);
      int int0 = new Integer(0);
      int int1 = new Integer(0);
      rOI0.ux();
      rOI0.ly();
      ComplexImage complexImage1 = new ComplexImage(759, 1);
      rOI0.setROI(8, 759, 627, 255);
      complexImage1.addbuffer(0, 1792, (float) 6, (float) 0);
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(0, (-1), 2422, (-1160), (float) 0, (float) 2422);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(1, (-15), (-15), 1);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1261, (-1024), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1039
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(640, 640);
      // Undeclared exception!
      try { 
        complexImage0.getReal(4053, 640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 640
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = (-477.0F);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.setROI((-16777216), (-1189), 1, 685);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      complexImage1.toString();
      int int0 = (-2545);
      ComplexImage complexImage2 = null;
      try {
        complexImage2 = new ComplexImage((-2545), (-2545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(759, 1, 1, 1);
      rOI0.uy();
      rOI0.setROI(1, 759, 1070, 6);
      rOI0.X();
      rOI0.Y();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.setROI(1815, 0, 1, 128);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-1), 1070, (float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1070
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 1208, (-378), 1070);
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(139, 0, (-549), 0);
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-549), (-549), (-32768.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-1534), (-1534), (-1707), (-1707));
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      complexImage0.multiply(3711.0F, (float) (-1707));
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex();
      Complex complex2 = new Complex(complex1);
      Complex complex3 = new Complex(complex2);
      complex3.real();
      complex2.magnitude();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      rOI0.lx();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1383), 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1383
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      complexImage1.divide(complexImage0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.subtract(1443.07F, 1443.07F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      int int0 = 3202;
      // Undeclared exception!
      try { 
        complexImage0.multiply(3179, 3202, (float) 2286, (float) 3179, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      complexImage0.multiply(complexImage0);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      complexImage0.subtract(complexImage1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(25, 25);
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.multiply((float) 0, (float) 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-1404), (-1404));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      ComplexImage complexImage1 = complexImage0.subtract(2546.7F, (float) 1);
      complexImage1.multiply(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.setImag(3238, 0, (-2497.075F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3238
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, 1942.69F);
      complexImage1.multiply(complexImage0);
      complexImage1.divide(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3058), 59, (float) 59, (float) 59);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(759);
      rOI0.ux();
      rOI0.lx();
      Integer integer1 = new Integer(759);
      Integer integer2 = new Integer(1410);
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.min();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3206);
      complexImage0.magnitudeImage();
      complexImage0.max();
      // Undeclared exception!
      complexImage0.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.setROI(0, 759, 759, 338);
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 2172, (float) 759, (float) 2172, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      complexImage0.multiply((float) 0, (float) 0);
      complexImage0.imaginary();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      complexImage0.Y();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(2300, 2300, (float) 2300, (float) 2300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 15);
      complexImage0.min();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage1.diff(complexImage0);
      complexImage1.add((float) 15, 0.0F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      complexImage0.getMagnitudeImage();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ComplexImage complexImage2 = complexImage0.add((float) 1, (float) 1);
      Complex complex0 = complexImage0.min();
      Complex complex1 = complexImage2.max();
      complex1.cos();
      Complex.mult(complex0, complex1);
      // Undeclared exception!
      try { 
        complexImage2.setImaginary(1, (-1733), (-1839.0197F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1733
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(1, 1, 1, 1);
      Complex complex0 = complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.set((-1707), 1, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.subtract((float) 0, (float) 0);
      // Undeclared exception!
      try { 
        complexImage0.set(3073, (-2070), (-1.0F), 414.11194F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.subtract(2300, 2300, (float) 2300, (float) 2300, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 56);
      complexImage0.min();
      // Undeclared exception!
      try { 
        complexImage0.setReal(56, 56, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      Complex complex0 = complexImage0.min();
      // Undeclared exception!
      try { 
        complexImage0.set(0, 1578, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1578
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      int int0 = (-679);
      complexImage0.min();
      // Undeclared exception!
      try { 
        complexImage0.getReal((-679), (-679));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      int int1 = 6;
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-446.4934F), (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.imaginary();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.multiply(1268, 1268, (-464.2733F), (-464.2733F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      complexImage0.multiply((-446.4934F), (float) 255);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-2096), 1, 759, 1, (float) 0, (float) 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      int int1 = 95;
      ComplexImage complexImage0 = new ComplexImage(0, 95);
      // Undeclared exception!
      complexImage0.addbuffer(95, 95, 95, 3173, 1.0F, (-3195.793F));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      complexImage0.setImag(0, 0, (float) 68, rOI0);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(8, 255, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      // Undeclared exception!
      try { 
        complexImage1.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      complexImage0.diff(complexImage1);
      complexImage0.magnitudeImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.setROI(6, (-1944), 0, 0);
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(255, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1944
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      int int0 = 68;
      ROI rOI0 = new ROI();
      int int1 = (-1144);
      rOI0.setROI(1605, 4154, (-1137), (-1144));
      rOI0.uy();
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      Integer integer0 = new Integer((-401));
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 15);
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      complexImage1.subtract(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.getReal((-762), 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -762
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      ROI rOI1 = new ROI(759, 1, 0, 6);
      rOI1.uy();
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      ROI rOI2 = new ROI();
      rOI2.X();
      rOI2.Y();
      rOI2.X();
      rOI2.ly();
      rOI1.ux();
      ComplexImage complexImage1 = complexImage0.multiply((-1.0F), 3098.0671F);
      ComplexImage complexImage2 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      int int0 = 335;
      float float0 = 0.0F;
      int int1 = 0;
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(0, 0, (float) 335, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 83;
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.real();
      // Undeclared exception!
      try { 
        complexImage0.multiply(3179, 3179, 1064.1165F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3179
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.setROI(1059, 1059, 1059, (-1));
      rOI0.setROI(420, 759, 685, (-1189));
      rOI0.X();
      rOI0.X();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      complexImage0.max();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(3045, 8, 1, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.setROI(1, 8, 1, 1289);
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 6, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = complexImage0.max();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer((-272));
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.set((-272), (-272), complex0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      complexImage0.clear();
      rOI0.ly();
      rOI0.ux();
      ComplexImage complexImage1 = complexImage0.multiply((-446.4934F), (float) 255);
      ComplexImage complexImage2 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 0, 318.62F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.get(0, (-1059));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      complexImage0.max();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.real();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.X();
      ROI rOI1 = new ROI(759, 1, 0, 6);
      rOI1.uy();
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      // Undeclared exception!
      try { 
        complexImage1.add((float) 0, (float) 760, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1838), (-1838));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex();
      Complex complex2 = new Complex(complex1);
      Complex complex3 = new Complex(complex2);
      complex3.real();
      complex2.magnitude();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      rOI0.lx();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      rOI0.ux();
      complexImage0.setReal(0, 0, 32767.0F, rOI0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1968, 0);
      ComplexImage complexImage1 = complexImage0.clear();
      // Undeclared exception!
      try { 
        complexImage1.get((-999), 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(3028, 3028, 3028, 3028);
      // Undeclared exception!
      try { 
        complexImage0.setReal(3028, 3028, (float) 3028);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(255, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.add(3045, 1059, (float) 1059, (-1230.41F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3045
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 0);
      ROI rOI0 = new ROI();
      int int0 = new Integer(0);
      ComplexImage complexImage2 = complexImage0.multiply((float) 0, (float) 0);
      complexImage1.multiply(complexImage2);
      // Undeclared exception!
      try { 
        complexImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      rOI0.ux();
      ComplexImage complexImage2 = new ComplexImage();
      complexImage2.phaseImage();
      complexImage2.real();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int int0 = 0;
      int int1 = 1810;
      int int2 = (-1429);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.Y();
      int int0 = 959;
      ROI rOI0 = new ROI();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      ComplexImage complexImage2 = new ComplexImage();
      rOI0.setROI((-576), (-576), 1886, 59);
      complexImage2.phaseImage();
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      HashMap<RenderingHints.Key, Complex> hashMap0 = new HashMap<RenderingHints.Key, Complex>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int int0 = new Integer(1070);
      complexImage0.setImag(realGrayImage0);
      rOI0.setROI(1070, 1, (-1600), 1);
      rOI0.X();
      rOI0.Y();
      rOI0.setROI((-1600), 1070, (-1379), 8);
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(2040, 0, (float) (-1379), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      complexImage0.addbuffer(1, 1, (-760.8794F), (-760.8794F));
      complexImage0.copy();
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      ROI rOI0 = new ROI(0, 759, 3, (-3037));
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ux();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      // Undeclared exception!
      try { 
        complexImage1.setImag(3, 1, (-1221.685F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      // Undeclared exception!
      try { 
        complexImage0.multiply(961.9F, (float) 3045);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      complexImage0.divide(complexImage1);
      float float0 = 1265.0F;
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.subtract(1265.0F, (-228.18176F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 95);
      complexImage0.min();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ComplexImage complexImage2 = new ComplexImage(1, 0);
      ComplexImage complexImage3 = new ComplexImage(2, 1);
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      complexImage2.multiply((float) 1, (float) 2);
      complexImage2.setImaginary(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1;
      int int1 = 3238;
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      ComplexImage complexImage1 = complexImage0.subtract(2546.7F, (float) 1);
      complexImage1.Y();
      float float0 = 0.0F;
      ComplexImage complexImage2 = complexImage0.divide(0.0F, (-409.2F));
      // Undeclared exception!
      try { 
        complexImage2.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 3045;
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      int int1 = 1059;
      float float0 = (-1230.41F);
      ROI rOI0 = new ROI();
      int int2 = 420;
      int int3 = 759;
      int int4 = 685;
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 759, (float) 3045, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      Complex complex0 = new Complex();
      complex0.real();
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 66);
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, (float) 0);
      complexImage1.max();
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.unit();
      complexImage0.clear(complex0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      int int0 = new Integer((-549));
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-549), (-549), (-32768.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 8);
      complexImage0.multiply(complexImage0);
      complexImage0.imag();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(560, 2055, 560, (-59));
      rOI0.setROI(560, (-3203), 4330, 1838);
      rOI0.Y();
      rOI0.setROI((-240), (-3203), (-59), 5042);
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      ComplexImage complexImage1 = new ComplexImage(0, 1);
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      ComplexImage complexImage2 = complexImage1.multiply((float) 3238, (float) 0);
      complexImage2.getJavaImage();
      complexImage0.setImaginary(realGrayImage0);
      complexImage0.multiply(complexImage1);
      // Undeclared exception!
      try { 
        complexImage2.subtract(0, 1, (-283.0F), (-601.1009F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      ROI rOI1 = new ROI(759, 1, 0, 6);
      rOI1.uy();
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.setROI(2592, 1, 1651, 1651);
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, (float) 0);
      ComplexImage complexImage3 = new ComplexImage();
      complexImage3.real();
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage2, rOI1, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(3045);
      ComplexImage complexImage1 = complexImage0.multiply((-3560.55F), (-3560.55F));
      // Undeclared exception!
      try { 
        complexImage1.getImag(3045, 3045);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3048, 3048);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 15, (float) 3048, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(128, 128, (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 0);
      assertEquals(3045, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(1.0F, (float) 3045);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(3045, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(3045, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(6, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(3045, 2219, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2220
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.getMagnitudeImage();
      complexImage0.real();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 0;
      complexImage1.imag = null;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      ComplexImage complexImage1 = new ComplexImage(0, 1);
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      complexImage1.multiply((float) 3238, (float) 0);
      complexImage0.setImaginary(realGrayImage0);
      complexImage0.multiply(complexImage1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ROI rOI0 = new ROI(6, (-965), (-1), (-633));
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.setROI((-1), (-1), 1410, (-965));
      rOI0.setROI((-633), (-1), (-1), (-1));
      rOI0.ly();
      rOI0.ux();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 1646;
      complexImage0.min();
      int int1 = (-16777216);
      // Undeclared exception!
      try { 
        complexImage0.setReal(3208, (-633), (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      // Undeclared exception!
      complexImage0.addbuffer(3227, 3227, 0.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-16777216), (-16777216), (-1741.2F), (-1741.2F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      int int2 = (-2545);
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((-2545), (-2545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.imag();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      rOI0.ux();
      ComplexImage complexImage2 = new ComplexImage();
      complexImage2.phaseImage();
      // Undeclared exception!
      try { 
        complexImage2.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      ROI rOI0 = new ROI();
      rOI0.Y();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI(759, 1, 1, 1);
      rOI0.uy();
      ROI rOI1 = new ROI(759, 1, 0, 6);
      rOI1.uy();
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.lx();
      rOI0.uy();
      rOI0.ux();
      rOI1.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 6, 1092.6565F, (float) 6, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-559), (-559));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.magnitudeImage();
      // Undeclared exception!
      try { 
        complexImage1.divide((-1282), (-1282), (float) (-1282), (float) (-1282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      int int1 = (-3643);
      float float0 = 5531.12F;
      float float1 = (-511.69925F);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.subtract((ComplexImage) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      // Undeclared exception!
      try { 
        complexImage0.divide((-25.816658F), (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 3045;
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      int int1 = 68;
      ROI rOI0 = new ROI();
      int int2 = new Integer(3045);
      rOI0.Y();
      rOI0.X();
      rOI0.X();
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      complexImage1.toString();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(2055, 421);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.add((float) 2055, (float) 421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(3175, (-167), 2130, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(3719, 3719, 3171, 3171);
      ComplexImage complexImage1 = complexImage0.multiply((-1161.294F), (float) 6);
      ComplexImage complexImage2 = new ComplexImage();
      complexImage2.real();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, 2097, 8, 2097);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI(759, 1, 0, 6);
      rOI1.uy();
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.uy();
      rOI0.ux();
      rOI0.setROI(0, 400, 847, 0);
      ROI rOI2 = new ROI();
      rOI2.setROI(400, 3230, (-16777216), (-965));
      rOI2.X();
      rOI2.X();
      Complex complex0 = complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.clear(complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.setImag((RealGrayImage) null);
      complexImage0.real();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.subtract(complexImage1);
      complexImage0.add(complexImage1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.real();
      complexImage1.divide(complexImage1);
      // Undeclared exception!
      try { 
        complexImage1.getReal((-1531), 3816);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage1.addbuffer(0, 0, 0.0F, 0.0F);
      ROI rOI0 = new ROI();
      ComplexImage complexImage2 = complexImage0.add((float) 0, (-2301.0066F));
      Complex complex0 = complexImage0.min();
      Complex complex1 = complexImage2.max();
      Complex.mult(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.imag = null;
      complexImage1.multiply(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      rOI0.setROI(1, 1, 430, 430);
      Complex complex0 = complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage1.set((-2539), 1, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1422, 1422);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-1541), (-1541), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1541
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = complexImage0.subtract((float) 2300, (float) 2300);
      // Undeclared exception!
      try { 
        complexImage1.getImag(3231, 2300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 95;
      ComplexImage complexImage0 = new ComplexImage(0, 95);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      RealGrayImage realGrayImage0 = complexImage0.real();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.setImaginary(realGrayImage0);
      complexImage1.real();
      complexImage0.divide(complexImage1);
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.X();
      complexImage1.multiply(complexImage0);
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage1.subtract(1, 1, (float) 1, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      int int0 = (-1014);
      int int1 = 255;
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex();
      Complex complex2 = new Complex(complex1);
      Complex complex3 = new Complex(complex2);
      complex3.real();
      complex2.magnitude();
      ROI rOI0 = null;
      int int2 = 6;
      // Undeclared exception!
      try { 
        complexImage0.set(6, 3045, complex1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.divide(1.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      complexImage0.divide(complexImage1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 123);
      complexImage0.add((float) 123, (float) 123);
      // Undeclared exception!
      try { 
        complexImage0.set(1, 0, (float) 0, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      complexImage0.addbuffer(3045, 1, (-4011), 3045, 1703.85F, 1703.85F);
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.add(3045, 1059, (float) 1059, (float) 1059, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3045
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      complexImage0.min();
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 3048;
      ComplexImage complexImage0 = new ComplexImage(3048, 3048);
      assertEquals(3048, complexImage0.X());
      assertEquals(3048, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = 15;
      int int2 = 540;
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(3048, complexImage0.X());
      assertEquals(3048, complexImage0.Y());
      assertEquals(3048, realGrayImage0.X());
      assertEquals(3048, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      int int3 = (-872);
      int int4 = (-812);
      int int5 = 5042;
      rOI0.setROI(int2, int3, int4, int5);
      ComplexImage complexImage1 = complexImage0.multiply((float) int1, (float) int0, rOI0);
      complexImage1.min();
      complexImage1.getJavaImage();
      complexImage1.max();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 2097, 8, 2097);
      assertEquals(2097, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals(2097, rOI0.uy());
      assertEquals(9, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(2097, int0);
      assertEquals(2097, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals(2097, rOI0.uy());
      assertEquals(9, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2097, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals(2097, rOI0.uy());
      assertEquals(9, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      assertEquals(2097, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals(2097, rOI0.uy());
      assertEquals(9, rOI0.X());
      
      ROI rOI1 = new ROI(759, 1, 0, 6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertNotNull(rOI1);
      
      int int3 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int4 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int5 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(759, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int6 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int7 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertTrue(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int8 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertEquals(6, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int9 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int1);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertEquals(0, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int10 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertTrue(int10 == int3);
      assertFalse(int10 == int1);
      assertFalse(int10 == int5);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertTrue(int10 == int6);
      assertEquals(1, int10);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      int int11 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int11 == int5);
      assertFalse(int11 == int10);
      assertFalse(int11 == int8);
      assertTrue(int11 == int9);
      assertFalse(int11 == int3);
      assertTrue(int11 == int7);
      assertFalse(int11 == int2);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertTrue(int11 == int4);
      assertTrue(int11 == int1);
      assertEquals(0, int11);
      assertNotSame(rOI0, rOI1);
      assertEquals(2097, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals(2097, rOI0.uy());
      assertEquals(9, rOI0.X());
      
      rOI0.setROI(0, 400, 847, 0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(847, rOI0.lx());
      assertEquals(400, rOI0.ly());
      assertEquals(848, rOI0.X());
      assertEquals(401, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertNotNull(rOI2);
      
      int int12 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int12 == int8);
      assertTrue(int12 == int10);
      assertFalse(int12 == int5);
      assertFalse(int12 == int11);
      assertFalse(int12 == int4);
      assertFalse(int12 == int7);
      assertFalse(int12 == int0);
      assertFalse(int12 == int9);
      assertTrue(int12 == int3);
      assertTrue(int12 == int6);
      assertFalse(int12 == int1);
      assertFalse(int12 == int2);
      assertEquals(1, int12);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int13 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int13 == int6);
      assertFalse(int13 == int2);
      assertTrue(int13 == int3);
      assertFalse(int13 == int1);
      assertFalse(int13 == int8);
      assertFalse(int13 == int5);
      assertFalse(int13 == int11);
      assertFalse(int13 == int4);
      assertTrue(int13 == int10);
      assertFalse(int13 == int9);
      assertTrue(int13 == int12);
      assertFalse(int13 == int0);
      assertFalse(int13 == int7);
      assertEquals(1, int13);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int14 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int14 == int11);
      assertFalse(int14 == int5);
      assertTrue(int14 == int13);
      assertFalse(int14 == int4);
      assertFalse(int14 == int2);
      assertTrue(int14 == int12);
      assertFalse(int14 == int0);
      assertFalse(int14 == int7);
      assertTrue(int14 == int10);
      assertFalse(int14 == int9);
      assertFalse(int14 == int1);
      assertTrue(int14 == int3);
      assertTrue(int14 == int6);
      assertFalse(int14 == int8);
      assertEquals(1, int14);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int15 = rOI2.ly();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int15 == int4);
      assertFalse(int15 == int5);
      assertTrue(int15 == int11);
      assertFalse(int15 == int8);
      assertFalse(int15 == int3);
      assertFalse(int15 == int6);
      assertFalse(int15 == int13);
      assertFalse(int15 == int10);
      assertFalse(int15 == int12);
      assertTrue(int15 == int7);
      assertFalse(int15 == int0);
      assertFalse(int15 == int2);
      assertTrue(int15 == int1);
      assertTrue(int15 == int9);
      assertFalse(int15 == int14);
      assertEquals(0, int15);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int16 = rOI1.ux();
      assertFalse(int16 == int3);
      assertFalse(int16 == int6);
      assertFalse(int16 == int2);
      assertTrue(int16 == int11);
      assertFalse(int16 == int0);
      assertTrue(int16 == int15);
      assertFalse(int16 == int8);
      assertFalse(int16 == int10);
      assertFalse(int16 == int12);
      assertFalse(int16 == int13);
      assertTrue(int16 == int1);
      assertTrue(int16 == int4);
      assertTrue(int16 == int7);
      assertFalse(int16 == int5);
      assertTrue(int16 == int9);
      assertFalse(int16 == int14);
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, int16);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 759, 0.0F, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.multiply(2639.3174F, 941.82324F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      
      complexImage0.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(25, 25);
      assertEquals(25, complexImage0.X());
      assertEquals(25, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.Y());
      assertEquals(3045, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(3045);
      assertEquals(3045, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-1209), 0, (float) 68, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1209
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3045);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(3045, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = complexImage0.toString(rOI0);
      assertEquals("3045:3045\nnull \n3045:3045\nnull \n", string0);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(string0);
      
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 3045;
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(3045, 3045);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract((ComplexImage) null, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      rOI0.setROI(0, 759, 1, 540);
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.ly());
      assertEquals(220, rOI0.Y());
      assertEquals(540, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.ly());
      assertEquals(220, rOI0.Y());
      assertEquals(540, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(759, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.ly());
      assertEquals(220, rOI0.Y());
      assertEquals(540, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNull(realGrayImage0);
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.ly());
      assertEquals(220, rOI0.Y());
      assertEquals(540, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 66);
      assertEquals(0, complexImage0.X());
      assertEquals(66, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.add((float) 66, (float) 66);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(66, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(66, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.X();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.X();
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals(1, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.setImaginary((-4831), (-4831), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 56);
      assertEquals(56, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(56, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(56, complexImage1.Y());
      assertNotNull(complexImage1);
      
      complexImage0.divide(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(56, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(56, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(3464.0F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 1, (float) 1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
      
      complexImage1.add(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = new ComplexImage(15, 3048);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(15, complexImage1.X());
      assertEquals(3048, complexImage1.Y());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(3232, (-1434), (float) 3232, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1434
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = new Integer(1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 1, 0.0F, 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotNull(complex0);
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(imageProducer0);
      
      complexImage0.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.get(646, 2760);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(6, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1432), (-970), (-1184.18F), (-853.2603F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(863, (-1), 773.402F, (-1690.37F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3208);
      assertEquals(3208, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage0);
      
      complexImage0.subtract(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(3208, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(3208, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(800, 1, 1, 800, (float) 800, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage0);
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-836), 272, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 15);
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(6, int3);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.Y());
      assertEquals(3045, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 2582, 1410, (-1209));
      assertEquals(1410, rOI0.lx());
      assertEquals(3792, rOI0.Y());
      assertEquals(1410, rOI0.X());
      assertEquals((-1209), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(2582, rOI0.ly());
      
      rOI0.setROI((-1189), (-1693), (-768), (-768));
      assertEquals(422, rOI0.X());
      assertEquals((-1693), rOI0.uy());
      assertEquals(926, rOI0.Y());
      assertEquals((-768), rOI0.lx());
      assertEquals((-768), rOI0.ly());
      assertEquals((-1189), rOI0.ux());
      
      int int3 = rOI0.X();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(422, int3);
      assertEquals(422, rOI0.X());
      assertEquals((-1693), rOI0.uy());
      assertEquals(926, rOI0.Y());
      assertEquals((-768), rOI0.lx());
      assertEquals((-768), rOI0.ly());
      assertEquals((-1189), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, (-1693), 1.0F, (float) 1059);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1693
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1, 1, 0, 6);
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      
      // Undeclared exception!
      complexImage0.addbuffer(0, 2668, 255, (-939), (float) 1, 3364.256F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(6, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, 2730.298F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(2263, 2263, (float) 2263);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 83, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(2, (-474), 2, (-474), (float) (-474), (float) 83);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 3045;
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.Y());
      assertEquals(3045, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int1 = 1059;
      float float0 = (-1230.41F);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int2 = (-631);
      int int3 = 1410;
      int int4 = 2094;
      // Undeclared exception!
      try { 
        complexImage0.getReal((-1088), (-1088), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1088
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI((-88), (-3492), (-16777216), 1706);
      assertEquals(1706, rOI0.ly());
      assertEquals(5199, rOI0.Y());
      assertEquals(16777129, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-88), rOI0.lx());
      assertEquals((-3492), rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(16777129, int0);
      assertEquals(1706, rOI0.ly());
      assertEquals(5199, rOI0.Y());
      assertEquals(16777129, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-88), rOI0.lx());
      assertEquals((-3492), rOI0.uy());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(5199, int1);
      assertEquals(1706, rOI0.ly());
      assertEquals(5199, rOI0.Y());
      assertEquals(16777129, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-88), rOI0.lx());
      assertEquals((-3492), rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((-803.5124F), 428.8476F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      complexImage1.setImaginary(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 255, 0, (-2408), (-1105.7F), (-3101.573F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      
      complexImage2.setImaginary(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage1 = complexImage2.real();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNull(realGrayImage1);
      
      complexImage0.divide(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(1638, 1638, (-34), (-1));
      assertEquals((-34), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1638, rOI0.ly());
      assertEquals(1638, rOI0.lx());
      assertEquals(1640, rOI0.Y());
      assertEquals(1673, rOI0.X());
      
      rOI0.setROI((-395), 1, 759, 3207);
      assertEquals(3207, rOI0.Y());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(1155, rOI0.X());
      assertEquals((-395), rOI0.ux());
      assertEquals(3207, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(3207, int1);
      assertEquals(3207, rOI0.Y());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(1155, rOI0.X());
      assertEquals((-395), rOI0.ux());
      assertEquals(3207, rOI0.ly());
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertNotNull(complexImage0);
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertNotNull(imageProducer0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply(0.0F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      
      complexImage0.imag = realGrayImage1;
      assertEquals(0, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(0, complexImage0.imag.X());
      assertEquals(0, complexImage0.imag.Y());
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = complexImage0.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(15, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      
      ComplexImage complexImage2 = complexImage0.add((-50.12F), (-379.11377F));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(128, 128);
      assertEquals(128, complexImage0.X());
      assertEquals(128, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(128, int0);
      assertEquals(128, complexImage0.X());
      assertEquals(128, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(3799, (-3245), (float) 3799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3245
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = new Integer(1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear(complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = complexImage0.add((float) 128, 1.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      rOI0.setROI((-2229), (-2229), 128, 3048);
      assertEquals((-2229), rOI0.uy());
      assertEquals(2358, rOI0.X());
      assertEquals((-2229), rOI0.ux());
      assertEquals(5278, rOI0.Y());
      assertEquals(128, rOI0.lx());
      assertEquals(3048, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.add(3045, 1059, (float) 1059, (-1230.41F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 1, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 1208, (-378), 1070);
      assertEquals(1208, rOI0.ly());
      assertEquals(139, rOI0.Y());
      assertEquals((-378), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1070, rOI0.uy());
      assertEquals(379, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(379, int0);
      assertEquals(1208, rOI0.ly());
      assertEquals(139, rOI0.Y());
      assertEquals((-378), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1070, rOI0.uy());
      assertEquals(379, rOI0.X());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(139, int1);
      assertEquals(1208, rOI0.ly());
      assertEquals(139, rOI0.Y());
      assertEquals((-378), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1070, rOI0.uy());
      assertEquals(379, rOI0.X());
      
      rOI0.setROI(139, 0, (-549), 0);
      assertEquals(0, rOI0.uy());
      assertEquals(139, rOI0.lx());
      assertEquals(689, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-549), rOI0.ux());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(689, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(139, rOI0.lx());
      assertEquals(689, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-549), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1749), 689, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      complexImage1.setImaginary(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage2 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage2);
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = 6;
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      int int3 = rOI0.lx();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(759, int3);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1, int4);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      complexImage0.imag = null;
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      int int6 = rOI0.ly();
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(6, int6);
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotNull(complex0);
      
      ComplexImage complexImage2 = complexImage0.divide((float) 0, 1941.4F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, 1520.642F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = complexImage0.add((float) 1, (-2301.0066F));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
      
      Complex complex0 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.div((double) 1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertNotNull(complex1);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1, 1, complex0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer((-12));
      assertEquals((-12), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1410);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1410, (int)integer2);
      assertNotNull(integer2);
      
      ROI rOI1 = new ROI(759, 1, 0, 6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      assertNotNull(rOI1);
      
      int int2 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int4 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(759, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int5 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int7 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertEquals(6, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      int int8 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int3);
      assertFalse(int8 == int5);
      assertTrue(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertEquals(0, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(6, rOI1.ly());
      assertEquals(759, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(6, rOI1.Y());
      assertEquals(760, rOI1.X());
      
      // Undeclared exception!
      complexImage0.toString(rOI1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(3886.761F, (-409.2F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.Y());
      assertEquals(3045, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-254), 845, (float) 845, (float) 845);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 845
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3048, 3048);
      assertEquals(3048, complexImage0.X());
      assertEquals(3048, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(3048, 3048, 3048, 3048);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(3048, rOI0.ly());
      assertEquals(3048, rOI0.ux());
      assertEquals(3048, rOI0.uy());
      assertEquals(3048, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 15, (float) 3048, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3048
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage1 = complexImage2.real();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNull(realGrayImage1);
      
      complexImage2.setImaginary((RealGrayImage) null);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage2 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage2);
      
      complexImage1.divide(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(6, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      HashMap<RenderingHints.Key, Complex> hashMap0 = new HashMap<RenderingHints.Key, Complex>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      ColorConvertOp colorConvertOp0 = null;
      try {
        colorConvertOp0 = new ColorConvertOp(renderingHints0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(759, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(6, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(760, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotNull(complex1);
      
      double double0 = complex1.magnitude();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      
      complexImage1.set(0, 0, complex1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(759, 3045, 0, 6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      assertNotNull(rOI1);
      
      int int0 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(6, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int1 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int2 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(759, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int3 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(6, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int4 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int5 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(3045, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertEquals(0, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      int int7 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertEquals(760, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      Integer integer0 = new Integer(6);
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)int6));
      assertFalse(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      complexImage0.setImaginary(2027, 606, (-1.0F), rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertEquals(3045, rOI1.ly());
      assertEquals(3040, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(759, rOI1.lx());
      assertEquals(760, rOI1.X());
      assertEquals(6, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3238);
      assertEquals(0, complexImage0.X());
      assertEquals(3238, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1443.07F, 1443.07F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 845;
      // Undeclared exception!
      try { 
        complexImage0.add((-254), 845, (float) 845, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 845
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      complexImage0.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      int int0 = complexImage0.X();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(789, (-1), 1, 0);
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(789, rOI0.X());
      assertEquals((-1), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(789, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(789, rOI0.X());
      assertEquals((-1), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(789, rOI0.lx());
      
      int int3 = rOI0.X();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(789, int3);
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(789, rOI0.X());
      assertEquals((-1), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(789, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, (-637.0F), (-203.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(6, int5);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(0, int6);
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply((-446.4934F), (float) 255);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      complexImage1.imag = null;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      float float0 = (-747.71375F);
      ComplexImage complexImage2 = complexImage1.subtract((-747.71375F), (-1.0F));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      
      int int0 = complexImage0.Y();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertEquals(0, int0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(759, int3);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(1, int4);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(0, int5);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int6 = rOI0.ly();
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertEquals(6, int6);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      int int7 = rOI0.ux();
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertFalse(int7 == int4);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertEquals(0, int7);
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3048, 3048);
      assertEquals(3048, complexImage0.X());
      assertEquals(3048, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      complexImage0.real();
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI((-283), (-283), (-283), (-283));
      assertEquals((-283), rOI0.lx());
      assertEquals((-283), rOI0.ly());
      assertEquals((-283), rOI0.ux());
      assertEquals((-283), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer((-283));
      assertEquals((-283), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-283));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-283), (int)integer1);
      assertNotNull(integer1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ROI rOI0 = new ROI(6, (-965), (-1), (-633));
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals((-965), int0);
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-965), int3);
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      assertEquals((-1), rOI0.ux());
      assertEquals(6, rOI0.lx());
      assertEquals((-633), rOI0.ly());
      assertEquals(333, rOI0.Y());
      assertEquals((-965), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      rOI0.setROI((-1), (-1), 1410, (-965));
      assertEquals((-1), rOI0.ux());
      assertEquals(1410, rOI0.lx());
      assertEquals(965, rOI0.Y());
      assertEquals(1412, rOI0.X());
      assertEquals((-1), rOI0.ly());
      assertEquals((-965), rOI0.uy());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals((-1), int5);
      assertEquals((-1), rOI0.ux());
      assertEquals(1410, rOI0.lx());
      assertEquals(965, rOI0.Y());
      assertEquals(1412, rOI0.X());
      assertEquals((-1), rOI0.ly());
      assertEquals((-965), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertEquals((-1), int6);
      assertEquals((-1), rOI0.ux());
      assertEquals(1410, rOI0.lx());
      assertEquals(965, rOI0.Y());
      assertEquals(1412, rOI0.X());
      assertEquals((-1), rOI0.ly());
      assertEquals((-965), rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage1.getReal(1646, (-16777216), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 95);
      assertEquals(95, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.X();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = 3045;
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      assertEquals(3045, complexImage0.X());
      assertEquals(3045, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = 1059;
      float float0 = (-1230.41F);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = 420;
      int int3 = 759;
      int int4 = 685;
      rOI0.setROI(3238, 6, 685, 685);
      assertEquals(685, rOI0.ly());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(2554, rOI0.X());
      assertEquals(3238, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 759, (float) 3045, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(3213, 3234, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(imageProducer0);
      
      Complex complex0 = complexImage0.max();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3048, 3048);
      assertEquals(3048, complexImage0.X());
      assertEquals(3048, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(3048, 3048, 3048, 3048);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(3048, rOI0.lx());
      assertEquals(3048, rOI0.ly());
      assertEquals(3048, rOI0.ux());
      assertEquals(3048, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(112, 0, (float) 3165, (-503.7F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3048
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = 1090;
      ComplexImage complexImage0 = new ComplexImage(1090, 1090);
      assertEquals(1090, complexImage0.Y());
      assertEquals(1090, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int1 = 0;
      int int2 = 3202;
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int5 = rOI0.lx();
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals(759, int5);
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(759, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      rOI0.setROI(0, (-1), 759, 5509);
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.lx());
      assertEquals(5511, rOI0.Y());
      assertEquals(5509, rOI0.ly());
      assertEquals(760, rOI0.X());
      
      int int6 = rOI0.uy();
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertEquals((-1), int6);
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.lx());
      assertEquals(5511, rOI0.Y());
      assertEquals(5509, rOI0.ly());
      assertEquals(760, rOI0.X());
      
      int int7 = rOI0.ux();
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertTrue(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertFalse(int7 == int3);
      assertEquals(0, int7);
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.lx());
      assertEquals(5511, rOI0.Y());
      assertEquals(5509, rOI0.ly());
      assertEquals(760, rOI0.X());
      
      int int8 = rOI0.ly();
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertEquals(5509, int8);
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.lx());
      assertEquals(5511, rOI0.Y());
      assertEquals(5509, rOI0.ly());
      assertEquals(760, rOI0.X());
      
      int int9 = rOI0.ux();
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertTrue(int9 == int1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertEquals(0, int9);
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(759, rOI0.lx());
      assertEquals(5511, rOI0.Y());
      assertEquals(5509, rOI0.ly());
      assertEquals(760, rOI0.X());
      
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1755), 6, 6, 685);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(6, int0);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals((-1755), int1);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, int2);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1755), int3);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1755), int4);
      assertEquals(1762, rOI0.X());
      assertEquals(6, rOI0.uy());
      assertEquals(685, rOI0.ly());
      assertEquals((-1755), rOI0.ux());
      assertEquals(680, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI(759, 1, 0, 6);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, int0);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(759, int2);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(6, int5);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      assertEquals(759, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(6, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(6, rOI0.Y());
      assertEquals(760, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-594), (-594), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 95);
      assertEquals(95, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 95, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(95, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(95, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("1:1\nnull \n1:1\nnull \n", string0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, (-3373), (float) 1, (float) (-3373));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3373
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(3165, 3165, (float) 3165, (float) 3165, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 66);
      assertEquals(66, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 66, (-1.0F), (float) 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(66, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.add((float) 66, (float) 66);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(66, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(66, complexImage2.Y());
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotNull(complex0);
      
      Complex complex1 = complexImage0.max();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertNotNull(complex1);
      
      // Undeclared exception!
      try { 
        complexImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add((float) 1, (-2301.0066F));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      
      Complex complex0 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage2.max();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertNotNull(complex1);
      
      Complex complex2 = complexImage1.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((byte) (-1), complex2.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex2.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals((short) (-1), complex2.shortValue());
      assertEquals(Integer.MAX_VALUE, complex2.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex2.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex2.longValue());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(759, 1, 0, 6);
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(0, 3238, 1, 1651);
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, 2730.298F);
      ComplexImage complexImage2 = new ComplexImage();
      complexImage2.real();
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3045, 3045);
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, (-1209), 773.402F, (float) (-1209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1209
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        complexImage0.divide(2058, 2743, 0.0F, 235.03F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(1674, 1674);
      complexImage0.multiply(complexImage1);
      // Undeclared exception!
      try { 
        complexImage1.getImag(1674, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1674
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 66);
      ComplexImage complexImage1 = complexImage0.add((float) 66, (float) 66);
      // Undeclared exception!
      try { 
        complexImage1.divide(66, (-1), (float) 66, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(59, 59);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(1, 0);
      complexImage1.add(2144.46F, 0.0F);
      complexImage1.min();
      Complex complex0 = null;
      Complex complex1 = null;
      try {
        complex1 = new Complex((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.math.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(1, 1, 1, 1);
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ROI rOI0 = new ROI();
      complexImage0.add((float) 1, (-2301.0066F));
      rOI0.setROI(0, 3048, (-1), (-1));
      // Undeclared exception!
      try { 
        complexImage1.add(1, 3048, (float) (-1), (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3047
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      complexImage0.real();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1), 1, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(30, 28);
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 28, (float) 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}
