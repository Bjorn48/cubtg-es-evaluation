* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 20054
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550361231363
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.16055846422338568
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08185538881309687
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.06
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.045112781954887216
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.1889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1732283464566929
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.04638472032742155
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 00:54:27.801 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 269
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19458987783595114
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.10231923601637108
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.088
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.05639097744360902
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2204724409448819
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06412005457025921
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 344
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 422
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.21378708551483422
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11732605729877217
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.10133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12406015037593984
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.28346456692913385
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.08049113233287858
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 501
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 582
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2844677137870855
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16916780354706684
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.15466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.14661654135338345
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12687585266030013
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 649
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 720
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3472949389179756
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22373806275579808
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24266666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16165413533834586
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1664392905866303
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 795
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23601637107776263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17293233082706766
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17189631650750342
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 863
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 941
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37521815008726006
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24010914051841747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25733333333333336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18144611186903137
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1025
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1103
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1174
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4013961605584642
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2578444747612551
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.28
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6535433070866141
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.19918144611186903
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1246
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1322
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4075043630017452
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.26193724420190995
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.28933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23308270676691728
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5826771653543307
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20327421555252387
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1400
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1475
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1555
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4363001745200698
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29058663028649384
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32133333333333336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2781954887218045
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22646657571623466
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1637
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1719
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 00:55:32.352 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.Constr
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1801
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45200698080279234
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3042291950886767
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8661417322834646
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24147339699863574
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1876
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1961
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2043
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2130
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4537521815008726
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30559345156889495
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3373333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3007518796992481
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7637795275590551
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24556616643929058
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2215
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2283
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2355
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2432
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2505
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3069577080491132
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.33866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.30451127819548873
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7716535433070866
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24556616643929058
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2583
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2671
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2754
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2832
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4572425828970332
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3069577080491132
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.34
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9133858267716536
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.25102319236016374
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2920
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2998
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 3078
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 3157
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4598603839441536
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3413333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9212598425196851
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4598603839441536
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3413333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9212598425196851
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Search finished after 124s and 38 generations, 61337 statements, best individual has fitness: 2381.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4598603839441536
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3413333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9212598425196851
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Minimizing test suite
[MASTER] 00:57:06.675 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 47%
* Total number of goals: 1146
* Number of covered goals: 544
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 733
* Number of covered goals: 228
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 35%
* Total number of goals: 750
* Number of covered goals: 263
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 32%
* Total number of goals: 266
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 127
* Number of covered goals: 123
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 127
* Number of covered goals: 102
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 733
* Number of covered goals: 187
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4598603839441536
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3413333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9212598425196851
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Generated 255 tests with total length 5159
* Resulting test suite's coverage: 55% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 00:57:59.641 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6733666666666667% of time used, but only 35/255 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4598603839441536
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31105047748976805
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3413333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9212598425196851
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Compiling and checking tests
[MASTER] 00:58:26.298 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 00:58:26.305 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 00:58:27.844 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<6> but was:<0>
[MASTER] 00:58:27.845 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
ILits iLits0 = clausalDataStructureWL0.getVocabulary();
LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn(iLits0).when(cardinalityDataStructure0).getVocabulary();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
SearchParams searchParams0 = solver0.getSearchParams();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
LightFactory lightFactory0 = new LightFactory();
ISolver iSolver0 = lightFactory0.defaultSolver();
IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
iVecInt0.ensure(43);
solver1.findModel(iVecInt0);
assertEquals(6, solver1.nVars());


[MASTER] 00:58:32.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:32.672 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
MUSLauncher mUSLauncher0 = new MUSLauncher();
activeLearning0.setOrder(levelBasedVarOrderHeap0);
mUSLauncher0.usage();
mUSLauncher0.log("org.sat4j.minisat.core.Solver$1");
Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
solver0.isSatisfiable(true);
assertEquals(1, solver0.nVars());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
boolean boolean0 = solver1.isVerbose();
assertFalse(boolean0);


[MASTER] 00:58:36.946 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 00:58:36.947 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
PureOrder pureOrder0 = new PureOrder();
pureOrder0.updateVarAtDecisionLevel(0);
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.shouldRestart();
glucose21Restarts0.onBackjumpToRootLevel();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, glucose21Restarts0);
ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
ILogAble iLogAble0 = ILogAble.CONSOLE;
iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
VecInt vecInt0 = new VecInt();
IVecInt iVecInt0 = vecInt0.clone();
iVecInt0.toArray();
iVecInt0.clear();
solver1.isSatisfiable(iVecInt0);
solver1.isNeedToReduceDB();
assertEquals(2, solver1.nVars());

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
glucose21Restarts1.shouldRestart();
glucose21Restarts1.onBackjumpToRootLevel();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, pureOrder0, glucose21Restarts1, iLogAble0);
solver2.realNumberOfVariables();
ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning1, mixedDataStructureDanielHT0, randomWalkDecorator0, (RestartStrategy) null);
solver3.sortOnActivity();
assertFalse(solver3.isVerbose());


[MASTER] 00:58:37.680 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 00:58:37.681 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
PureOrder pureOrder0 = new PureOrder();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
LubyRestarts lubyRestarts0 = new LubyRestarts();
lubyRestarts0.onRestart();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sQEa9CMc)[&xS)6b");
SearchParams searchParams0 = new SearchParams(1.0, 147.072343, 0.0, (-1593));
searchParams0.getConflictBoundIncFactor();
ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(cardinalityDataStructureYanMax0).toString();
doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
SearchParams searchParams1 = new SearchParams((-1075.9550203447473), 0);
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 252.5779839478);
Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams1, randomWalkDecorator1, glucose21Restarts1);
SolverStats solverStats0 = solver0.getStats();
solverStats0.incLearnedclauses();
solverStats0.incLearnedbinaryclauses();
solverStats0.incLearnedternaryclauses();
glucose21Restarts0.init(searchParams0, solverStats0);
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, glucose21Restarts0);
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 00:58:40.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:40.559 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
assertNotNull(solver0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());

solver0.setLearner(activeLearning0);

[MASTER] 00:58:40.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:40.947 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(433);
assertNotNull(fixedLengthLearning0);
assertEquals(433, fixedLengthLearning0.getMaxLength());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(433, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());

solver0.model();

[MASTER] 00:58:41.510 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:41.530 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.reset();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Vec<IVecInt> vec0 = new Vec<IVecInt>();
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure1 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructure1).getVocabulary();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
assertNotNull(tabuListDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure1, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertNotNull(solver1);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
doReturn(0).when(iLits0).nVars();
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
assertNotNull(minWatchCard0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard0.size());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertFalse(minWatchCard0.simplify());
assertTrue(minWatchCard0.locked());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertFalse(MinWatchCard.ATMOST);
assertTrue(MinWatchCard.ATLEAST);

MinWatchCard minWatchCard1 = (MinWatchCard)minWatchCard0.toConstraint();
assertNotNull(minWatchCard1);
assertSame(minWatchCard0, minWatchCard1);
assertSame(minWatchCard1, minWatchCard0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard0.size());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertFalse(minWatchCard0.simplify());
assertTrue(minWatchCard0.locked());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
assertFalse(minWatchCard1.learnt());
assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
assertFalse(minWatchCard1.simplify());
assertTrue(minWatchCard1.locked());
assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard1.size());
assertFalse(MinWatchCard.ATMOST);
assertTrue(MinWatchCard.ATLEAST);
assertTrue(MinWatchCard.ATLEAST);
assertFalse(MinWatchCard.ATMOST);

minWatchCard1.calcReason(0, vecInt0);
assertSame(minWatchCard0, minWatchCard1);
assertSame(minWatchCard1, minWatchCard0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard0.size());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertFalse(minWatchCard0.simplify());
assertTrue(minWatchCard0.locked());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
assertFalse(minWatchCard1.learnt());
assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
assertFalse(minWatchCard1.simplify());
assertTrue(minWatchCard1.locked());
assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard1.size());
assertFalse(MinWatchCard.ATMOST);
assertTrue(MinWatchCard.ATLEAST);
assertTrue(MinWatchCard.ATLEAST);
assertFalse(MinWatchCard.ATMOST);

boolean boolean1 = solver1.enqueue(100, (Constr) minWatchCard1);
assertTrue(boolean1);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver0));
assertFalse(boolean1 == boolean0);
assertNotSame(solver1, solver0);
assertSame(minWatchCard0, minWatchCard1);
assertSame(minWatchCard1, minWatchCard0);
assertNotSame(solver0, solver1);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard0.size());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertFalse(minWatchCard0.simplify());
assertTrue(minWatchCard0.locked());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
assertFalse(minWatchCard1.learnt());
assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
assertFalse(minWatchCard1.simplify());
assertTrue(minWatchCard1.locked());
assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
assertEquals(0, minWatchCard1.size());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(MinWatchCard.ATMOST);
assertTrue(MinWatchCard.ATLEAST);
assertTrue(MinWatchCard.ATLEAST);
assertFalse(MinWatchCard.ATMOST);


[MASTER] 00:58:41.968 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:41.978 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.setFactor(128);
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

SearchParams searchParams0 = new SearchParams((-2385.121745932024), 0);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getUpdateLBD());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.expireTimeout();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.setTimeout(2765);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(2765, solver0.getTimeout());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

boolean boolean1 = solver0.assume(32);
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(2765, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(1, solver0.currentDecisionLevel());
assertEquals(1, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
PrintWriter printWriter0 = new PrintWriter(writer0);
assertNotNull(printWriter0);

solver1.printStat(printWriter0, "Caution, you are making solver's internal var id public with uncontrolled consequences with features requiring internal/hidden variables.");
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:58:42.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:42.310 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
ILogAble iLogAble1 = ILogAble.CONSOLE;
assertNotNull(iLogAble1);
assertSame(iLogAble1, iLogAble0);

iLogAble1.log(".beYJhMR?d9HaJ");
assertSame(iLogAble1, iLogAble0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, glucose21Restarts0, iLogAble1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver1);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

vecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertNotSame(vecInt0, iVecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-248));
assertNotNull(fixedLengthLearning0);
assertEquals((-248), fixedLengthLearning0.getMaxLength());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertFalse(solver2.equals((Object)solver1));
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-248), fixedLengthLearning0.getMaxLength());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());

boolean boolean1 = solver2.isSatisfiable(iVecInt0);
assertTrue(boolean1);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(solver2.equals((Object)solver1));
assertFalse(boolean1 == boolean0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(solver2, solver1);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals((-248), fixedLengthLearning0.getMaxLength());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.nVars());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(5, solver2.realNumberOfVariables());

boolean boolean2 = solver2.isNeedToReduceDB();
assertFalse(boolean2);
assertFalse(solver2.equals((Object)solver1));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(solver2, solver1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-248), fixedLengthLearning0.getMaxLength());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(8, solver2.newVar());
assertEquals(7, solver2.nVars());

solver1.discardCurrentModel();

[MASTER] 00:58:42.614 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:42.616 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ms");
assertNotNull(mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(mockPrintWriter0, "|O_OO]mep~ .ev2");
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("|O_OO]mep~ .ev2");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

int[] intArray0 = new int[5];
intArray0[0] = (-248);
intArray0[1] = (-248);
intArray0[2] = (-248);
intArray0[3] = (-248);
intArray0[4] = (-248);
solver0.addClauseOnTheFly(intArray0);

[MASTER] 00:58:42.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:43.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertNotNull(fixedLengthLearning0);
assertEquals(0, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>(0);
assertNotNull(fixedLengthLearning1);
assertEquals(0, fixedLengthLearning1.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(0);
assertNotNull(searchParams0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0, int0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);
assertEquals(32, lubyRestarts1.getFactor());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts1.onRestart();
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(0);
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning1));
assertNotNull(fixedLengthLearning2);
assertEquals(0, fixedLengthLearning2.getMaxLength());

String string0 = fixedLengthLearning2.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 0", string0);
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning1));
assertNotNull(string0);
assertNotSame(fixedLengthLearning2, fixedLengthLearning1);
assertEquals(0, fixedLengthLearning2.getMaxLength());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
pureOrder0.init();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, iLogAble0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotNull(solver1);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = solver1.simplifyDB();
assertTrue(boolean0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotSame(lubyRestarts0, lubyRestarts1);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(solver2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean1 = solver2.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertTrue(boolean1 == boolean0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean2 = solver2.isNeedToReduceDB();
assertFalse(boolean2);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.newVar());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.setTimeout(0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotSame(lubyRestarts0, lubyRestarts1);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:58:43.349 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:43.353 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1246));
assertNotNull(percentLengthLearning0);
assertEquals((-1246), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals((-1246), percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

solver0.setNeedToReduceDB(true);
assertEquals((-1246), percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());


[MASTER] 00:58:43.699 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:43.706 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(875);
assertNotNull(percentLengthLearning0);
assertEquals(875, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(875, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());

Vec<IVecInt> vec0 = new Vec<IVecInt>();
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(875, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

solver1.addAllClauses(vec0);
assertFalse(solver1.equals((Object)solver0));
assertNotSame(solver1, solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(875, percentLengthLearning0.getLimit());
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.nVars());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());

Constr constr0 = solver2.propagate();
assertNull(constr0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());

solver0.getLiteralsPropagatedAt(182);

[MASTER] 00:58:44.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:44.029 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(2.0);
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.addAtMostOnTheFly((int[]) null, (-1966));

[MASTER] 00:58:44.361 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:44.363 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(2.0);
assertNotNull(activeLearning0);
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

PrintWriter printWriter0 = new PrintWriter(stringWriter0);
assertNotNull(printWriter0);
assertEquals("", stringWriter0.toString());

solver0.printInfos(printWriter0, "*xqv ");
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("*xqv constraints type \n*xqv 0 constraints processed.\n", stringWriter0.toString());

solver0.forget((-3128));

[MASTER] 00:58:44.720 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:44.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.shrink(0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams1.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);

double double1 = searchParams1.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertNotSame(searchParams1, searchParams0);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());

LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addClauseOnTheFly(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(learntWLClause0);
assertNotSame(searchParams1, searchParams0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, glucose21Restarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver1);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());

solver1.decayActivities();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());

SearchParams searchParams2 = new SearchParams();
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotNull(searchParams2);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);

double double2 = searchParams2.getVarDecay();
assertEquals(0.95, double2, 0.01);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals(double2, double0, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);

searchParams2.setVarDecay(1.0E-20);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E-20, searchParams2.getVarDecay(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);

double double3 = searchParams2.getClaDecay();
assertEquals(0.999, double3, 0.01);
assertNotEquals(double3, double2, 0.01);
assertEquals(double3, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E-20, searchParams2.getVarDecay(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams2, randomWalkDecorator0, glucose21Restarts0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotNull(solver2);
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E-20, searchParams2.getVarDecay(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);

int int0 = solver2.getPropagationLevel();
assertEquals(0, int0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertFalse(solver2.isVerbose());
assertEquals(4, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E-20, searchParams2.getVarDecay(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);


[MASTER] 00:58:45.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:45.043 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertNotNull(fixedLengthLearning0);
assertEquals(0, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:58:45.341 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:45.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());

boolean boolean1 = solver0.simplifyDB();
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());


[MASTER] 00:58:45.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:45.596 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

solver0.decayActivities();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());


[MASTER] 00:58:45.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:45.981 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

miniSATRestarts0.onBackjumpToRootLevel();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
assertNotNull(miniSATRestarts1);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?K)l,}>x'@T^");
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

long long0 = solver1.getTimeoutMs();
assertEquals(2147483647L, long0);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(128);
assertNotNull(activeLearning1);
assertEquals(128.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log((String) null);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, miniSATRestarts1, mUSLauncher0);
assertNotNull(solver3);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(128.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.nVars());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Lbool lbool0 = solver3.truthValue(128);
assertNotNull(lbool0);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(7, solver0.nVars());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(8, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(128.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver3.nConstraints());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals("U", lbool0.toString());

solver2.isSatisfiable((IVecInt) null);

[MASTER] 00:58:46.312 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:46.326 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertNotNull(fixedLengthLearning0);
assertEquals(0, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

pureOrder0.updateVarAtDecisionLevel(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

boolean boolean1 = solver1.isSatisfiable(iVecInt0);
assertTrue(boolean1);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(boolean1 == boolean0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

boolean boolean2 = solver1.isNeedToReduceDB();
assertFalse(boolean2);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(5, solver1.nVars());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

Set<Integer> set0 = solver1.fromLastDecisionLevel(iVecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(set0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(set0.contains(0));


[MASTER] 00:58:46.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:46.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
assertNotNull(miniSATLearning1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams1 = new SearchParams(2258.1390158, (-289.8808), (-39.7034), 5000);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(5000, searchParams1.getInitConflictBound());
assertEquals(2258.1390158, searchParams1.getVarDecay(), 0.01);
assertEquals((-39.7034), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-289.8808), searchParams1.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder(5000);
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts(4283);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4283, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams2 = new SearchParams();
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertNotNull(searchParams2);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams2, pureOrder0, lubyRestarts0);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4283, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.printInfos((PrintWriter) mockPrintWriter0, "c ");
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertNotSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4283, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 00:58:46.951 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:46.972 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
assertNotNull(miniSATRestarts1);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?K)l,}>x'@T^");
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());

long long0 = solver1.getTimeoutMs();
assertEquals(2147483647L, long0);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

VecInt vecInt0 = (VecInt)solver2.getOutLearnt();
assertNotNull(vecInt0);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);


[MASTER] 00:58:47.341 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:47.350 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts((-119));
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.setFactor((-119));
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = new SearchParams((-2385.21955519782), (-119));
assertNotNull(searchParams0);
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.21955519782), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("Dg1s7-/Z{ve12R=,q+");
ILogAble iLogAble1 = ILogAble.CONSOLE;
assertNotNull(iLogAble1);
assertSame(iLogAble1, iLogAble0);

iLogAble1.log(".beYJhMR?d9HaJ");
assertSame(iLogAble1, iLogAble0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.21955519782), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
iVecInt0.sort(comparator0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(32);
assertNotNull(fixedLengthLearning0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean0);
assertFalse(solver0.equals((Object)solver1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertSame(iLogAble0, iLogAble1);
assertNotSame(solver0, solver1);
assertNotSame(vecInt0, iVecInt0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-119L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.21955519782), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>((-119));
assertNotNull(fixedLengthLearning1);
assertEquals((-119), fixedLengthLearning1.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver2);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-119L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-119), fixedLengthLearning1.getMaxLength());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.addAtMostOnTheFly(intArray0, (-2325));

[MASTER] 00:58:48.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:48.463 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

miniSATRestarts0.onBackjumpToRootLevel();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);

int int0 = searchParams1.getInitConflictBound();
assertEquals(100, int0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver1.setSimplifier(simplificationType0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

solver1.reset();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

int int1 = solver1.nConstraints();
assertEquals(0, int1);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(int1 == int0);
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(100);
assertNotNull(fixedLengthLearning0);
assertEquals(100, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver2);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(100, fixedLengthLearning0.getMaxLength());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());

boolean boolean0 = solver2.isSatisfiable(true);
assertTrue(boolean0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(100, fixedLengthLearning0.getMaxLength());
assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());

int[] intArray0 = new int[8];
intArray0[0] = 100;
intArray0[1] = 0;
intArray0[2] = 0;
intArray0[3] = 823;
intArray0[4] = 0;
intArray0[5] = 100;
intArray0[6] = 100;
intArray0[7] = 100;
solver2.backtrack(intArray0);

[MASTER] 00:58:49.175 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:49.247 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.shrink(0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

double double0 = searchParams1.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

double double1 = searchParams1.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addClauseOnTheFly(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(learntWLClause0);
assertNotSame(searchParams1, searchParams0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertEquals(0, learntWLClause0.size());
assertTrue(learntWLClause0.learnt());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver1);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

solver1.claBumpActivity(learntWLClause0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams0, searchParams1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
assertEquals(0, learntWLClause0.size());
assertTrue(learntWLClause0.learnt());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());

boolean boolean1 = solver0.isSolverKeptHot();
assertFalse(boolean1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(boolean1 == boolean0);
assertNotSame(searchParams1, searchParams0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver2);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());

int[] intArray1 = solver2.findModel();
assertArrayEquals(new int[] {}, intArray1);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(intArray1.equals((Object)intArray0));
assertNotNull(intArray1);
assertNotSame(searchParams0, searchParams1);
assertNotSame(intArray1, intArray0);
assertEquals(0, intArray1.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());

IVecInt iVecInt1 = solver2.unsatExplanation();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNull(iVecInt1);
assertNotSame(searchParams0, searchParams1);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>(3);
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, pureOrder0, glucose21Restarts0);
assertNotNull(solver3);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

solver3.analyzeFinalConflictInTermsOfAssumptions(learntWLClause0, (IVecInt) null, 3);

[MASTER] 00:58:49.622 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:49.625 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-2478.85));
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2478.85), activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2478.85), activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

int int0 = solver0.newVar((-1381));
assertEquals((-1381), int0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2478.85), activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals((-1381), solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());


[MASTER] 00:58:50.036 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:50.038 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

mockPrintWriter0.println();
assertSame(mockPrintWriter0, printWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

levelBasedVarOrderHeap0.updateVarAtDecisionLevel(20);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());

boolean boolean1 = solver0.enqueue(37);
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics1);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics1, (CardinalityDataStructure) null, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);

[MASTER] 00:58:50.389 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:50.392 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(2.0);
assertNotNull(activeLearning0);
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

PrintWriter printWriter0 = new PrintWriter(stringWriter0);
assertNotNull(printWriter0);
assertEquals("", stringWriter0.toString());

solver0.printInfos(printWriter0, "pWLYB:Ac2{D7(oE ");
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals("pWLYB:Ac2{D7(oE constraints type \npWLYB:Ac2{D7(oE 0 constraints processed.\n", stringWriter0.toString());


[MASTER] 00:58:50.699 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:50.700 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
assertNotNull(activeLearning0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("P>]{)6>Jmh");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

boolean boolean0 = solver0.isSatisfiable(false);
assertTrue(boolean0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());


[MASTER] 00:58:51.078 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:51.079 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

SearchParams searchParams0 = new SearchParams(243);
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(243, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Lits lits0 = new Lits();
assertNotNull(lits0);
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(243, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

solver0.unset(980);

[MASTER] 00:58:51.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:51.502 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

solver0.sortOnActivity();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());

solver0.modelWithInternalVariables();

[MASTER] 00:58:51.891 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:51.896 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertNotNull(miniSATLearning1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning1, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

long long0 = solver0.getTimeoutMs();
assertEquals(2147483647L, long0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(solver1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());

IConstr iConstr0 = FakeConstr.instance();
assertNotNull(iConstr0);

IVecInt iVecInt0 = VecInt.EMPTY;
assertNotNull(iVecInt0);
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.sort();
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

IteratorInt iteratorInt0 = iVecInt0.iterator();
assertNotNull(iteratorInt0);
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

solver1.addParity(iVecInt0, false);

[MASTER] 00:58:52.247 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:52.262 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintStream mockPrintStream1 = new MockPrintStream("ms");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintStream1);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintWriter0);

mockPrintWriter0.println('\\');
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotSame(mockPrintStream1, mockPrintStream0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(printWriter0);
assertNotSame(mockPrintStream1, mockPrintStream0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("ms");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin1, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

solver1.reset();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertEquals(0, iLits0.realnVars());
assertEquals(2, iLits0.nVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertFalse(solver2.equals((Object)solver0));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(solver2);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-248));
assertNotNull(percentLengthLearning0);
assertEquals((-248), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-2275.9));
assertNotNull(activeLearning1);
assertEquals((-2275.9), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertNotNull(solver3);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals((-2275.9), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());

solver3.printStat((PrintWriter) mockPrintWriter0, "c ");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotSame(mockPrintStream1, mockPrintStream0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals((-2275.9), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(4, solver3.newVar());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());

solver1.model((-248));

[MASTER] 00:58:52.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:52.496 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

String string0 = searchParams0.toString();
assertNotNull(string0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(percentLengthLearning0);
assertEquals(1590, percentLengthLearning0.getLimit());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(1590);
assertNotNull(fixedLengthLearning1);
assertEquals(1590, fixedLengthLearning1.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1590, fixedLengthLearning1.getMaxLength());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());

solver1.assume((-869));

[MASTER] 00:58:52.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:52.779 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.sat4j.minisat.constraints.cnf.UnitClauses");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.sat4j.minisat.constraints.cnf.UnitClauses");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(mockPrintWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

solver0.registerLiteral(7);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(8, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(9, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(8, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());


[MASTER] 00:58:53.107 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:53.112 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructure0).getVocabulary();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
assertNotNull(tabuListDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

solver1.toString("org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy");

[MASTER] 00:58:53.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:53.981 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(percentLengthLearning0);
assertEquals(1590, percentLengthLearning0.getLimit());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(1590);
assertNotNull(fixedLengthLearning1);
assertEquals(1590, fixedLengthLearning1.getMaxLength());

Constr constr0 = solver0.propagate();
assertNull(constr0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());


[MASTER] 00:58:54.242 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:54.244 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

noRestarts0.onBackjumpToRootLevel();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

String[] stringArray0 = new String[7];
stringArray0[0] = "ms";
stringArray0[1] = "";
stringArray0[2] = "|O_OO]mep~ .ev2";
stringArray0[3] = "ms";
stringArray0[4] = "ms";
stringArray0[5] = "|O_OO]mep~ .ev2";
Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 1);
NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics1, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

solverArray0[0] = solver0;
ManyCore<Solver<MixedDataStructureSingleWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureSingleWL>>(stringArray0, solverArray0);

[MASTER] 00:58:54.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:54.449 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(740);
assertNotNull(percentLengthLearning0);
assertEquals(740, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(740, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

solver0.fromLastDecisionLevel((IVecInt) null);

[MASTER] 00:58:54.668 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:54.669 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.modelWithInternalVariables();

[MASTER] 00:58:54.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:54.867 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(1.0, 147.072343, 0.0, (-1593));
assertNotNull(searchParams0);
assertEquals(147.072343, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1593), searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(147.072343, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1593), searchParams0.getInitConflictBound());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

miniSATRestarts0.onBackjumpToRootLevel();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(147.072343, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1593), searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

ISimplifier iSimplifier0 = solver0.getSimplifier();
assertNotNull(iSimplifier0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(147.072343, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1593), searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());


[MASTER] 00:58:55.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:55.156 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

int int0 = searchParams1.getInitConflictBound();
assertEquals(100, int0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver1.setSimplifier(simplificationType0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());

solver1.reset();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics1 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log((String) null);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics1, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, miniSATRestarts0, mUSLauncher0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver2);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());

IVecInt iVecInt0 = solver2.createBlockingClauseForCurrentModel();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(iVecInt0);
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

solver1.setLogPrefix("c ");
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, (CardinalityDataStructureYanMax) null, randomWalkDecorator0, miniSATRestarts0);

[MASTER] 00:58:55.406 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:55.408 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertNotNull(fixedLengthLearning0);
assertEquals(0, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.cancelUntilTrailLevel(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:58:55.637 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:55.639 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log((String) null);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

IVecInt iVecInt0 = VecInt.EMPTY;
assertNotNull(iVecInt0);
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

iVecInt0.sort();
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

IteratorInt iteratorInt0 = iVecInt0.iterator();
assertNotNull(iteratorInt0);
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

solver0.findModel(iVecInt0);

[MASTER] 00:58:55.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:55.915 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertEquals(0L, fileChannel0.position());
assertEquals(0L, fileChannel0.size());
assertTrue(fileChannel0.isOpen());

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(1986.0117764413417);
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1986.0117764413417, activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1986.0117764413417, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, noRestarts0);
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

solver2.setKeepSolverHot(true);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertTrue(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 00:58:56.178 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:56.189 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams1 = new SearchParams(5000, 5000, (-240.58133610461283), 5000);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(5000.0, searchParams1.getClaDecay(), 0.01);
assertEquals(5000, searchParams1.getInitConflictBound());
assertEquals((-240.58133610461283), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(5000.0, searchParams1.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder(5000);
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5000, pureOrder0.getPeriod());

LubyRestarts lubyRestarts0 = new LubyRestarts((-980));
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-980), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-980), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SolverStats solverStats0 = solver0.stats;
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());

solverStats0.incStarts();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-980), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solverStats0.incRootSimplifications();
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5000, pureOrder0.getPeriod());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-980), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.printStat((PrintWriter) null);

[MASTER] 00:58:56.422 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:58:56.425 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(percentLengthLearning0);
assertEquals(1590, percentLengthLearning0.getLimit());

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(activeLearning0);
assertEquals(1590.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("dD$IOg");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

SearchParams searchParams0 = new SearchParams(1590);
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1590, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1590.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1590, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());

mUSLauncher0.usage();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Lbool lbool0 = solver0.truthValue(11);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertNotNull(lbool0);
assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1590.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1590, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("U", lbool0.toString());

solver0.getIthConstr(1590);

[MASTER] 00:58:56.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:56.666 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

fixedLengthLearning0.setMaxLength(6);
assertEquals(6, fixedLengthLearning0.getMaxLength());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(6);
assertNotNull(fixedLengthLearning1);
assertEquals(6, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(6, fixedLengthLearning1.getMaxLength());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VecInt vecInt0 = new VecInt(291, 291);
assertNotNull(vecInt0);
assertEquals(291, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(291, vecInt0.last());

Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(vecInt0, 291);
assertNotNull(constr0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constr0.learnt());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(291, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.locked());
assertFalse(constr0.simplify());
assertEquals(291, constr0.size());

constr0.incActivity((-997.3962618527918));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constr0.learnt());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(291, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.locked());
assertFalse(constr0.simplify());
assertEquals(291, constr0.size());

solver0.enqueue(351, constr0);

[MASTER] 00:58:56.886 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:56.888 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());

solver0.varBumpActivity((-163));

[MASTER] 00:58:57.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 00:58:57.299 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn(iLits0).when(cardinalityDataStructure0).getVocabulary();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
assertNotNull(tabuListDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0, iLits0.realnVars());
assertEquals(2, iLits0.nVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals(4, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(6, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals(0, iLits0.realnVars());
assertEquals(8, iLits0.nVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, iLits0.realnVars());
assertEquals(12, iLits0.nVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(12, solver0.newVar());
assertEquals(11, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(10, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(10, solver1.realNumberOfVariables());
assertEquals(11, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());

LightFactory lightFactory0 = new LightFactory();
assertNotNull(lightFactory0);

Solver solver2 = (Solver)lightFactory0.defaultSolver();
assertNotNull(solver2);
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());

VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver2);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertEquals((-2), vecInt0.last());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());

vecInt0.ensure(43);
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertEquals((-2), vecInt0.last());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(5, solver2.nVars());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());

vecInt0.unsafePush(43);
assertFalse(vecInt0.isEmpty());
assertEquals(43, vecInt0.last());
assertEquals(3, vecInt0.size());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(7, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals(8, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());

VecInt vecInt1 = (VecInt)solver1.dimacs2internal(vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(vecInt1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, iLits0.realnVars());
assertEquals(47, iLits0.nVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(46, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(47, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(46, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(45, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(46, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(45, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(9, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(9, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(10, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(vecInt0.isEmpty());
assertEquals(43, vecInt0.last());
assertEquals(3, vecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals(86, vecInt1.last());
assertEquals(3, vecInt1.size());

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver3);
assertEquals(3, iLits0.realnVars());
assertEquals(49, iLits0.nVars());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(49, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(48, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(48, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

AtLeast atLeast0 = (AtLeast)solver3.addAtLeast(vecInt1, (-895));
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(atLeast0);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, iLits0.realnVars());
assertEquals(53, iLits0.nVars());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(52, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(53, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(52, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(52, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(51, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(51, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(11, solver2.realNumberOfVariables());
assertEquals(11, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(12, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(vecInt0.isEmpty());
assertEquals(43, vecInt0.last());
assertEquals(3, vecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals(86, vecInt1.last());
assertEquals(3, vecInt1.size());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(87, solver3.nVars());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(87, solver3.realNumberOfVariables());
assertEquals(88, solver3.newVar());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals((-895), atLeast0.requiredNumberOfSatisfiedLiterals());
assertFalse(atLeast0.simplify());
assertEquals(3, atLeast0.size());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertTrue(atLeast0.locked());
assertFalse(atLeast0.learnt());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertFalse(atLeast0.isSatisfied());
assertEquals(0.0, atLeast0.getActivity(), 0.01);


[MASTER] 00:58:57.567 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:57.571 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?K)l,}>x'@T^");
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());

IVecInt iVecInt0 = solver0.getOutLearnt();
assertNotNull(iVecInt0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

int[] intArray0 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertNotNull(intArray0);
assertEquals(0, intArray0.length);
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());


[MASTER] 00:58:57.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:57.825 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
assertNotNull(tabuListDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
assertNotNull(activeLearning0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

solver0.primeImplicant(4);

[MASTER] 00:58:58.180 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:58.181 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

solver0.findModel();

[MASTER] 00:58:58.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:58.472 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

mockPrintStream0.print(true);
printWriter0.println('/');
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log((String) null);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());

solver0.undoOne();

[MASTER] 00:58:58.731 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:58.732 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean1 = glucose21Restarts0.shouldRestart();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());

solver0.toString("(xLVuZ8Y^8#n*%#kh8W");

[MASTER] 00:58:58.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:59.000 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log((String) null);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int int0 = 1908;
FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1908);
assertNotNull(fixedLengthLearning0);
assertEquals(1908, fixedLengthLearning0.getMaxLength());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver1);
assertEquals(1908, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

solver1.reset();
assertEquals(1908, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertFalse(solver2.equals((Object)solver0));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(1908);
assertNotNull(percentLengthLearning0);
assertEquals(1908, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

solver1.model(1908);

[MASTER] 00:58:59.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:59.253 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

Vec<IVecInt> vec0 = new Vec<IVecInt>();
assertNotNull(vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());

solver0.addAllClauses(vec0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());

NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

solver1.cancel();

[MASTER] 00:58:59.581 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:59.588 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructure0).getVocabulary();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
assertNotNull(tabuListDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

solver0.cancelUntil(16384);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

int int0 = searchParams0.getInitConflictBound();
assertEquals(100, int0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());

solver1.addExactly((IVecInt) null, 100);

[MASTER] 00:58:59.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:58:59.912 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log(".beYJhMR?d9HaJ");
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

iVecInt0.shrink(0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

int[] intArray0 = iVecInt0.toArray();
assertArrayEquals(new int[] {}, intArray0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(intArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

iVecInt0.clear();
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

double double0 = searchParams1.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

double double1 = searchParams1.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addClauseOnTheFly(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(learntWLClause0);
assertNotSame(searchParams1, searchParams0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(learntWLClause0.isSatisfied());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.simplify());
assertEquals(0, learntWLClause0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver1);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

solver1.claBumpActivity(learntWLClause0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams0, searchParams1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(learntWLClause0.isSatisfied());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.simplify());
assertEquals(0, learntWLClause0.size());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());

boolean boolean1 = solver0.isSolverKeptHot();
assertFalse(boolean1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(boolean1 == boolean0);
assertNotSame(searchParams1, searchParams0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

solver0.learn(learntWLClause0);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotSame(searchParams1, searchParams0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(learntWLClause0.isSatisfied());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.simplify());
assertEquals(0, learntWLClause0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());


[MASTER] 00:59:00.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:59:00.201 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(128);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.setFactor(128);
assertEquals(128, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int0 = 47;
SearchParams searchParams0 = new SearchParams((-2385.121745932024), 47);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(47, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(47, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.expireTimeout();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2385.121745932024), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(47, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.setLearnedConstraintsDeletionStrategy(solver0.activity_based);

[MASTER] 00:59:00.461 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:59:00.473 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintStream mockPrintStream1 = new MockPrintStream("ms");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintStream1);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(printWriter0);
assertNotSame(mockPrintStream1, mockPrintStream0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append('=');
assertNotNull(stringWriter1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertEquals("=", stringWriter0.toString());
assertEquals("=", stringWriter1.toString());

PrintWriter printWriter1 = new PrintWriter(stringWriter1);
assertNotNull(printWriter1);
assertEquals("=", stringWriter0.toString());
assertEquals("=", stringWriter1.toString());

levelBasedVarOrderHeap0.printStat(printWriter1, "|O_OO]mep~ .ev2");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("=|O_OO]mep~ .ev2non guided choices\t: 0\n", stringWriter0.toString());
assertEquals("=|O_OO]mep~ .ev2non guided choices\t: 0\n", stringWriter1.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("ms");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin1, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());

solver1.reset();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ILits iLits1 = clausalDataStructureWL0.getVocabulary();
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(iLits1);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertSame(iLits1, iLits0);
assertEquals(0, iLits1.realnVars());
assertEquals(2, iLits1.nVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(solver2.equals((Object)solver0));
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver2.fixedSize((-248));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(solver2.equals((Object)solver0));
assertNotNull(learnedConstraintsDeletionStrategy0);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(solver2, solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.nVars());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-248));
assertNotNull(percentLengthLearning0);
assertEquals((-248), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
assertNotNull(solver3);
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-248), percentLengthLearning0.getLimit());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

solver3.addAllClauses((IVec<IVecInt>) null);

[MASTER] 00:59:00.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:59:00.914 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

searchParams0.setInitConflictBound(1989);
assertEquals(1989, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1989, int0);
assertEquals(1989, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintStream mockPrintStream1 = new MockPrintStream("ms");
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintStream1);

boolean boolean0 = mockPrintStream1.checkError();
assertFalse(boolean0);
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotSame(mockPrintStream1, mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
assertNotNull(mockPrintWriter0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning2 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning2);
assertEquals(3, fixedLengthLearning2.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

boolean boolean1 = noRestarts0.shouldRestart();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning2, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertNotNull(solver0);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1989, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

solver0.setOrder(levelBasedVarOrderHeap0);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1989, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());


[MASTER] 00:59:01.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:59:01.475 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.setFactor((-119));
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = new SearchParams((-2389.7245526453416), (-119));
assertNotNull(searchParams0);
assertEquals((-2389.7245526453416), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2389.7245526453416), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int0 = solver0.newVar((-583));
assertEquals((-583), int0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-119), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2389.7245526453416), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-119), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals((-583), solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:59:01.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 00:59:01.763 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

RestartStrategy restartStrategy0 = null;
int int0 = 1590;
PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(percentLengthLearning0);
assertEquals(1590, percentLengthLearning0.getLimit());

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1590);
assertNotNull(activeLearning0);
assertEquals(1590.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("dD$IOg");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

String[] stringArray0 = new String[6];
stringArray0[0] = "dD$IOg";
stringArray0[1] = "e.TxC_(";
stringArray0[2] = "c ";
stringArray0[3] = "dD$IOg";
stringArray0[4] = "c ";
stringArray0[5] = "c ";
mUSLauncher0.run(stringArray0);

[MASTER] 00:59:02.104 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:59:02.109 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, pureOrder0, noRestarts0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

SearchParams searchParams1 = new SearchParams();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotSame(searchParams0, searchParams1);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

IVecInt iVecInt0 = solver0.unsatExplanation();
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNull(iVecInt0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());


[MASTER] 00:59:03.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:59:03.493 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, (ILogAble) null);
assertNotNull(solver0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());

solver0.record((Constr) null);

[MASTER] 00:59:03.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:59:03.904 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

solver0.cancelUntil(4283);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());


[MASTER] 00:59:04.312 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:59:04.320 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams((-248));
assertNotNull(searchParams0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-248), int0);
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ms");
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ms");
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

printWriter0.println('/');
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

levelBasedVarOrderHeap0.printStat(printWriter0, "|O_OO]mep~ .ev2");
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

LightFactory lightFactory0 = LightFactory.instance();
assertNotNull(lightFactory0);

Solver solver0 = (Solver)lightFactory0.defaultSolver();
assertNotNull(solver0);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());

VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver0);
assertNotNull(vecInt0);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals((-2), vecInt0.last());
assertEquals(2, vecInt0.size());
assertFalse(vecInt0.isEmpty());

vecInt0.ensure(7);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals((-2), vecInt0.last());
assertEquals(2, vecInt0.size());
assertFalse(vecInt0.isEmpty());

vecInt0.unsafePush((-248));
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals((-248), vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3, vecInt0.size());

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver1);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

VecInt vecInt1 = (VecInt)solver1.dimacs2internal(vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(vecInt1);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt0, vecInt1);
assertEquals(249, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(249, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(250, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(vecInt1.isEmpty());
assertEquals(497, vecInt1.last());
assertEquals(3, vecInt1.size());
assertEquals((-248), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals((-248), vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3, vecInt0.size());


* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
