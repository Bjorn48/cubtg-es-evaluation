/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:03:30 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!', 'z').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), 882, 74).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74, 112).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 121, 25).when(javaCharStream0).getEndColumn();
      doReturn(882, 147, 2108).when(javaCharStream0).getEndLine();
      doReturn('m', 'z', '!').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('$', '-', 'Y').when(javaCharStream0).BeginToken();
      doReturn("}aXQtXlX:(1Jc", (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 89).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, (-3339)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 89).when(javaCharStream0).getEndLine();
      doReturn('m', '-', '-', 'k', ':').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.beginColumn);
      assertEquals((-1924), token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("Qb|L2GGYv!)#:C3W@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 882, (-636));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(882, token2.beginLine);
      assertEquals((-636), token2.beginColumn);
      assertEquals((-635), token2.endColumn);
      assertEquals(882, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(882, javaCharStream1.getBeginLine());
      assertEquals((-636), javaCharStream1.getBeginColumn());
      assertEquals(882, javaCharStream1.getLine());
      assertEquals((-635), javaCharStream1.getColumn());
      assertEquals(882, javaCharStream1.getEndLine());
      assertEquals((-635), javaCharStream1.getEndColumn());
      assertEquals("Qb", token2.toString());
      
      Token token3 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals((-635), token3.endColumn);
      assertEquals((-636), token3.beginColumn);
      assertEquals(882, token3.endLine);
      assertEquals(882, token3.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(882, javaCharStream1.getBeginLine());
      assertEquals((-636), javaCharStream1.getBeginColumn());
      assertEquals(882, javaCharStream1.getLine());
      assertEquals((-635), javaCharStream1.getColumn());
      assertEquals(882, javaCharStream1.getEndLine());
      assertEquals((-635), javaCharStream1.getEndColumn());
      assertEquals("Qb", token3.toString());
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(787, token4.endColumn);
      assertEquals(89, token4.kind);
      assertEquals((-1924), token4.beginColumn);
      assertEquals(882, token4.beginLine);
      assertEquals((-1924), token4.endLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token4);
      assertEquals("!", token4.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-1));
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '!').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      int int0 = (-224);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      token1.next = null;
      token1.endColumn = 0;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      JavaCharStream javaCharStream1 = null;
      int int1 = 3679;
      int int2 = 88;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-224));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -224. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-424)).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\n\"");
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      Token token2 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token.newToken((-1924));
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '+', '+').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 882).when(javaCharStream0).getBeginColumn();
      doReturn(882, 23, (-1924)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 27, 27).when(javaCharStream0).getEndColumn();
      doReturn(882, 1723, 23).when(javaCharStream0).getEndLine();
      doReturn('6', '!', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream1.readChar();
      javaCharStream1.backup((byte)111);
      javaCharStream1.backup((byte)0);
      javaCharStream1.BeginToken();
      javaCharStream1.backup((-2147483647));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn((int)'!', (int)'!').when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn((int)'!', (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'J', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token.newToken((-1924));
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      StringReader stringReader0 = new StringReader("<INTEGER_LITERAL>");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.input_stream = javaCharStream1;
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'C', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '|').when(javaCharStream0).BeginToken();
      doReturn((-1919), 50).when(javaCharStream0).getBeginColumn();
      doReturn((-1919), 4781).when(javaCharStream0).getBeginLine();
      doReturn((-1919), (-1964)).when(javaCharStream0).getEndColumn();
      doReturn((-1919), 50).when(javaCharStream0).getEndLine();
      doReturn('|', '|').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      token0.beginColumn = 0;
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Token.newToken((-565));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jFhQ;\u0002,y{]b!w)[`");
      token0.endColumn = (-1919);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"//\"");
      int int0 = 5143;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5143, 5143);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token token0 = javaParserTokenManager0.getNextToken();
      stringReader0.ready();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 5146);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5146. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '5').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 799).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('!', '>', 'F', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '/').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 22, (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 1079, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-1924), (-1283), 22).when(javaCharStream0).getEndColumn();
      doReturn(882, 22, (-239), (-1283)).when(javaCharStream0).getEndLine();
      doReturn('`', '`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      token0.endColumn = 1079;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!').when(javaCharStream0).BeginToken();
      doReturn((-1924), 3382, 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, (-285), 0, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 358, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, 10, 0, 0).when(javaCharStream0).getEndLine();
      doReturn('B', '%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R'5 B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', ')').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 1).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 1).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Token token1 = javaParserTokenManager0.getNextToken();
      token1.specialToken = token0;
      Token token2 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.lengthOfMatch = 787;
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'beO83");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5143, 5143);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5143, column 5145.  Encountered: \"e\" (101), after : \"\\'b\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('!', '>', ';').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'e', 'c').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), (-1924), 18).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 18, (-1924)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (int)'m', 31, 882).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 33, 2657).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'p', 'p', '!').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.backup((byte)111);
      javaCharStream0.backup((byte)0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"//\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 496;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2210);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2210. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(325);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      pipedInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 325, 246, 325);
      int[] intArray0 = new int[5];
      intArray0[0] = (-507);
      intArray0[1] = 246;
      intArray0[2] = 246;
      intArray0[3] = 246;
      intArray0[4] = 325;
      javaCharStream0.bufline = intArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 22).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 1079).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-1924), 1079).when(javaCharStream0).getEndColumn();
      doReturn(882, 22, (int)'/').when(javaCharStream0).getEndLine();
      doReturn('`').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken(882);
      token0.endColumn = 1079;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (int) '/';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', '}', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 1).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 1).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      token0.kind = 787;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('2', '{').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), (-1924), 1550).when(javaCharStream0).getBeginColumn();
      doReturn(882, (-988), (-1924), 34).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-940), (-940), (-940)).when(javaCharStream0).getEndColumn();
      doReturn(882, 1550, 34, (-940)).when(javaCharStream0).getEndLine();
      doReturn('6', '#').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'v', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 77).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 18).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 41).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 1190).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'L', '<', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'p').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      int int0 = (-224);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(924, 924).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(924, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'N').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1928), 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1928), 0).when(javaCharStream0).getEndColumn();
      doReturn(882, 0).when(javaCharStream0).getEndLine();
      doReturn('\\').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 121;
      Token.newToken(121);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token1 = new Token();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.lengthOfMatch = 23;
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 52);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 52. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'E').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '+', '+', 'K').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 882, (-1924), 23).when(javaCharStream0).getBeginColumn();
      doReturn(882, 23, (-1924), 23, (-1924)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 27, 27, (-78), (-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882, 1723, 23, (-78), (-3086)).when(javaCharStream0).getEndLine();
      doReturn('6', '!', '@', '+').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup((-380));
      javaCharStream0.backup((-380));
      javaCharStream0.backup(53);
      javaCharStream0.BeginToken();
      javaCharStream0.backup((-2783));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('#').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      token0.beginColumn = 0;
      javaParserTokenManager0.jjmatchedKind = (-224);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 882, column -1924.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('~').when(javaCharStream0).BeginToken();
      doReturn((-1)).when(javaCharStream0).getBeginColumn();
      doReturn((-34)).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.backup((-380));
      javaCharStream0.backup((-380));
      javaCharStream0.backup(53);
      javaCharStream0.BeginToken();
      javaCharStream0.backup((-2783));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!').when(javaCharStream0).BeginToken();
      doReturn((-1924), 779).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 121).when(javaCharStream0).getEndColumn();
      doReturn(882, 147).when(javaCharStream0).getEndLine();
      doReturn('m', 'z').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', '!', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token1 = Token.newToken(0);
      javaParserTokenManager0.TokenLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken(48);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', '9').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(855, 855, 93).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 1148).when(javaCharStream0).getEndColumn();
      doReturn(855, (-1924), 12).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'k', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 0).when(javaCharStream0).getEndColumn();
      doReturn(882, 0).when(javaCharStream0).getEndLine();
      doReturn('B', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      int int0 = (-224);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R5 B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      token1.next = null;
      token1.endColumn = 0;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      JavaCharStream javaCharStream1 = null;
      javaParserTokenManager0.getNextToken();
      int int1 = 3679;
      int int2 = 88;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-224));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -224. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1928)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1928)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('\\').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken(121);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Token.newToken(11);
      Token token0 = Token.newToken(111);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'J').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('6', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn((-1924), (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'C', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      Token token1 = Token.newToken(629);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.backup((byte)111);
      javaCharStream0.backup((byte)0);
      javaCharStream0.BeginToken();
      javaCharStream0.backup((-2147483647));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('6').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      int int0 = (-224);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      token1.next = null;
      token1.endColumn = 0;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      JavaCharStream javaCharStream1 = null;
      int int1 = 3679;
      int int2 = 88;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-224));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -224. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'v', 'O').when(javaCharStream0).BeginToken();
      doReturn((String) null, ">>", ">>", (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 77, 18, 112).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 18, 123, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 41, 123, 84).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 1190, 882, 41).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'L', '<', '.').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      StringReader stringReader0 = new StringReader("<INTEGER_LITERAL>");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.input_stream = javaCharStream1;
      javaParserTokenManager0.SwitchTo(0);
      token0.kind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"//\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken1 = new Token.GTToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 1).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 1).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_', 'Q').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 0).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('1', '1').when(javaCharStream0).BeginToken();
      doReturn("0rUfh/'4^ZYn", "0rUfh/'4^ZYn", (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), 3382, 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, (-285), 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 358, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, 10, 0).when(javaCharStream0).getEndLine();
      doReturn('1', '%', 'q').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-224));
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      Token.newToken((-3176));
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(182);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 182. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken(1443);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 0).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '@').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.backup((byte)0);
      javaCharStream0.backup((-2147483647));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('#').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = 36;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 882, column -1924.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '/').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882, 23).when(javaCharStream0).getEndLine();
      doReturn('m', 'm').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'Y').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 89).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, (-3339)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 89).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'k', ':').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-1885));
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!', '!').when(javaCharStream0).BeginToken();
      doReturn((-1924), 882, 74).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74, 112).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 121, 25).when(javaCharStream0).getEndColumn();
      doReturn(882, 147, 2108).when(javaCharStream0).getEndLine();
      doReturn('m', 'z', 'G').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token0 = javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 659);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 659, 5, 659);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 659);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 659. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'k').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 40).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 2).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), (-541)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'k', '>').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'N').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), 882).when(javaCharStream0).getBeginColumn();
      doReturn(882, 31).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-3285)).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('6', '>', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.backup(2103);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', ';').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!', ':').when(javaCharStream0).BeginToken();
      doReturn((-1924), 882, 74).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74, 112).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 121, 61).when(javaCharStream0).getEndColumn();
      doReturn(882, 147, 2108).when(javaCharStream0).getEndLine();
      doReturn('m', 't').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 0, 0).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'J').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'k', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(84);
      javaParserTokenManager0.SwitchTo(0);
      Token token0 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager1.SwitchTo(1);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!', ':').when(javaCharStream0).BeginToken();
      doReturn((-1924), 882, 74).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 882, 61).when(javaCharStream0).getEndColumn();
      doReturn(882, 147, 2108).when(javaCharStream0).getEndLine();
      doReturn('m', 't').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = (int) '!';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(84);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = new Token();
      javaCharStream0.backup(89);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (int)'m').when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'p').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(84);
      javaParserTokenManager0.SwitchTo(0);
      Token token0 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R,j>_^");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token1 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token token2 = Token.newToken(84);
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"new\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(98);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"new\"");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 0, 0).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'E').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup((-380));
      javaCharStream0.backup((-380));
      javaCharStream0.backup(53);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 799).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('!', '>', 'F').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",P,->Vy*#s<Q");
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(84);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      Token token2 = new Token();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'm').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('\u001A').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.newToken((-224));
      StringReader stringReader0 = new StringReader("e\"'co<zbizAW}naMKx");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.backup(0);
      javaCharStream1.BeginToken();
      javaCharStream1.backup(61);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 882, column -1924.  Encountered: \"\\u001a\" (26), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'beO83");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 78);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      int int0 = 102;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 102, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.backup((byte)0);
      javaCharStream0.backup((-751));
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 102, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((int)'!', (int)'!').when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((int)'!', 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (int)'!').when(javaCharStream0).getEndLine();
      doReturn('P', '>', '_').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = 1;
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      javaParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream1.readChar();
      javaCharStream1.backup((byte)111);
      javaCharStream1.backup((byte)0);
      javaCharStream1.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-3675));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3675. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'L', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token token2 = Token.newToken((-2711));
      javaParserTokenManager0.SkipLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.backup((byte)111);
      javaCharStream0.backup((byte)0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'e').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'p').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924), 882, 2958).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, (-1924), 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (int)'m', 12, 13).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 2958, 534).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'p', '>').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endLine = (-1924);
      token0.kind = 12;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">>");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (int)'m').when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'p', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-1));
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken(1443);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals('o', char0);
      
      javaCharStream0.backup((byte)111);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3985, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.backup((byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3985, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertEquals(3986, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals('\u0000', char1);
      
      javaCharStream0.backup((-2147483647));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147475567), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147475567), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-534));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -534. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '_').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.beginLine);
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.beginColumn);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token2.kind);
      assertEquals(787, token2.endColumn);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.endLine);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'L').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token2.kind);
      assertEquals((-1924), token2.beginColumn);
      assertEquals((-1924), token2.endLine);
      assertEquals(787, token2.endColumn);
      assertEquals(882, token2.beginLine);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924), 0).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'C').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.beginLine);
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.beginColumn);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals((-1924), token2.endLine);
      assertEquals(882, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(787, token2.endColumn);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(123, token3.kind);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals(">>", token3.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('o', char0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      javaCharStream0.backup((byte)111);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3985, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup((byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3985, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3986, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('\u0000', char1);
      
      int int0 = bufferedInputStream0.available();
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, int0);
      
      javaCharStream0.backup((-2147483647));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147475567), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertTrue(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-934));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -934. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', 'm').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-424)).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '&').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      token0.endColumn = 882;
      assertNull(token0.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals((-1924), token2.endLine);
      assertEquals((-424), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertNull(token2.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = Token.newToken((-1));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaCharStream0.backup(523);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3572, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3572, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', ';', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token2.kind);
      assertEquals(787, token2.endColumn);
      assertEquals((-1924), token2.endLine);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.beginColumn);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)102, (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)95, (byte)102, (byte)1}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)95, (byte)102, (byte)1}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((byte)1);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)95, (byte)102, (byte)1}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)102, (byte)1}, byteArray0);
      assertNotNull(token1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("_f", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'v', 'E', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.beginLine);
      assertEquals(89, token1.kind);
      assertEquals((-1924), token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals((-1924), token2.endLine);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(124, token2.kind);
      assertEquals(787, token2.endColumn);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'beO83");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5143, 5143);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = 0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 5143;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5143, column 5145.  Encountered: \"e\" (101), after : \"\\'b\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '>', 'k').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(882, token1.endLine);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.backup(882);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3213, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(3213, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-1924), token2.beginColumn);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.endLine);
      assertEquals(787, token2.endColumn);
      assertEquals(124, token2.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('~').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      int int0 = (-224);
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginLine);
      assertEquals(90, token1.kind);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("~", token1.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertFalse(boolean0);
      
      token0.endColumn = 882;
      assertNull(token0.toString());
      
      token1.next = null;
      assertEquals("~", token1.toString());
      
      token1.endColumn = 0;
      assertEquals("~", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      JavaCharStream javaCharStream1 = null;
      int int1 = 3679;
      int int2 = 88;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-224));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -224. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'E').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(787, token2.endColumn);
      assertEquals((-1924), token2.endLine);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(124, token2.kind);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      StringReader stringReader0 = new StringReader("YshP@rF{cC|Pv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 799, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 799);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 799. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(javaCharStream0).BeginToken();
      doReturn((-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882).when(javaCharStream0).getBeginLine();
      doReturn((-1924)).when(javaCharStream0).getEndColumn();
      doReturn(882).when(javaCharStream0).getEndLine();
      doReturn('m').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(882, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals((-1924), token1.beginColumn);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertFalse(boolean0);
      
      token0.endColumn = 882;
      assertNull(token0.toString());
      
      token1.next = null;
      assertEquals("!", token1.toString());
      
      token1.endColumn = 0;
      assertEquals("!", token1.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertNotNull(sequenceInputStream1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        sequenceInputStream1.read(byteArray0, (-1549), (int) (byte)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('r', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("wE", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("(", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(8, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Uwqc", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(8, token3.beginColumn);
      assertEquals(8, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(8, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(8, token4.endColumn);
      assertEquals(0, token4.kind);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"new\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken(98);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(73, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("\"new\"", token1.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R'5 B");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token4.endColumn);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', '!', 'j', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      token0.endLine = 882;
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(882, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1924), token1.beginColumn);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.beginLine);
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(882, token2.beginLine);
      assertEquals(787, token2.endColumn);
      assertEquals((-1924), token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals((-1924), token2.beginColumn);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 659);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 659, 5, 659);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) bufferedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      pipedOutputStream0.flush();
      pipedOutputStream0.write(0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1413);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1413. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 1185, 1185);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)38;
      int int0 = sequenceInputStream0.read(byteArray0, (int) (byte)38, 0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)15, (byte)36, (byte)74, (byte) (-34), (byte) (-67), (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjnewStateCnt = 67;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1184, token0.endColumn);
      assertEquals(1184, token0.beginColumn);
      assertEquals(1185, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1185, token0.endLine);
      assertNotNull(token0);
      assertEquals(1184, javaCharStream0.getColumn());
      assertEquals(1184, javaCharStream0.getEndColumn());
      assertEquals(1185, javaCharStream0.getLine());
      assertEquals(1184, javaCharStream0.getBeginColumn());
      assertEquals(1185, javaCharStream0.getBeginLine());
      assertEquals(1185, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, (-759)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-759)).when(javaCharStream0).getEndColumn();
      doReturn(882, (-712)).when(javaCharStream0).getEndLine();
      doReturn('6', '>').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotSame(token0, token1);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(89, token2.kind);
      assertEquals(882, token2.endLine);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals("!", token2.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup(2103);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1992, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1993, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals('\u0000', char0);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(89, token2.kind);
      assertEquals(882, token2.endLine);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals("!", token2.toString());
      
      javaCharStream1.backup((-1924));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3917, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3917, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-712), token3.endLine);
      assertEquals(89, token3.kind);
      assertEquals((-759), token3.beginLine);
      assertEquals((-1924), token3.beginColumn);
      assertEquals((-759), token3.endColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals("!", token3.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '+', '+', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 882).when(javaCharStream0).getBeginColumn();
      doReturn(882, 23, (-1924)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 27, 27).when(javaCharStream0).getEndColumn();
      doReturn(882, 1723, 23).when(javaCharStream0).getEndLine();
      doReturn('6', '!', '@', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(89, token0.kind);
      assertEquals((-1924), token0.endColumn);
      assertEquals(882, token0.endLine);
      assertEquals((-1924), token0.beginColumn);
      assertEquals(882, token0.beginLine);
      assertNotNull(token0);
      assertEquals("!", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(23, token1.beginLine);
      assertEquals(1723, token1.endLine);
      assertEquals(101, token1.kind);
      assertEquals(27, token1.endColumn);
      assertEquals((-1924), token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("+", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1924), token2.beginLine);
      assertEquals(23, token2.endLine);
      assertEquals(27, token2.endColumn);
      assertEquals(101, token2.kind);
      assertEquals(882, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("+", token2.toString());
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '+', 'a').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 23).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 27).when(javaCharStream0).getEndColumn();
      doReturn(882, 1723).when(javaCharStream0).getEndLine();
      doReturn('6', '!', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals((-1924), token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1924), token2.beginColumn);
      assertEquals(27, token2.endColumn);
      assertEquals(1723, token2.endLine);
      assertEquals(101, token2.kind);
      assertEquals(23, token2.beginLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("+", token2.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)111);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, (byte)0, (byte)0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals('o', char0);
      
      javaCharStream1.backup((byte)111);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3985, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      javaCharStream1.backup((byte)0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3985, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      char char1 = javaCharStream1.BeginToken();
      assertFalse(char1 == char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3986, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals('\u0000', char1);
      
      javaCharStream1.backup((-2147483647));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147475567), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147475567), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)111, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '>').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924)).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 787).when(javaCharStream0).getEndColumn();
      doReturn(882, (-1924)).when(javaCharStream0).getEndLine();
      doReturn('m', '>', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.beginColumn);
      assertEquals((-1924), token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token2.kind);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(882, token2.beginLine);
      assertEquals(787, token2.endColumn);
      assertEquals((-1924), token2.endLine);
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '/').when(javaCharStream0).BeginToken();
      doReturn((-1924), (-1924), 0, 0).when(javaCharStream0).getBeginColumn();
      doReturn(882, 882, 0, 0).when(javaCharStream0).getBeginLine();
      doReturn((-1924), (-1924), 0, 0).when(javaCharStream0).getEndColumn();
      doReturn(882, 23, 0, 0).when(javaCharStream0).getEndLine();
      doReturn('m', 'm').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(104, token2.kind);
      assertEquals(882, token2.beginLine);
      assertEquals((-1924), token2.endColumn);
      assertEquals((-1924), token2.beginColumn);
      assertEquals(23, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals("/", token2.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(104, token3.kind);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals("/", token3.toString());
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertEquals(104, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.beginColumn);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertEquals("/", token4.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('1', '1').when(javaCharStream0).BeginToken();
      doReturn((String) null, (String) null, (String) null).when(javaCharStream0).GetImage();
      doReturn((-1924), 3382, 46).when(javaCharStream0).getBeginColumn();
      doReturn(882, (-285), (-3176)).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 358, (-285)).when(javaCharStream0).getEndColumn();
      doReturn(882, 10, 20).when(javaCharStream0).getEndLine();
      doReturn('B', '%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-224));
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(66, token1.kind);
      assertEquals(882, token1.endLine);
      assertEquals((-1924), token1.endColumn);
      assertEquals(882, token1.beginLine);
      assertEquals((-1924), token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R'5 B");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      token0.endColumn = 882;
      assertNull(token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(10, token2.endLine);
      assertEquals(3382, token2.beginColumn);
      assertEquals(358, token2.endColumn);
      assertEquals(66, token2.kind);
      assertEquals((-285), token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertNull(token2.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(66, token3.kind);
      assertEquals(46, token3.beginColumn);
      assertEquals(20, token3.endLine);
      assertEquals((-3176), token3.beginLine);
      assertEquals((-285), token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertNull(token3.toString());
      
      Token token4 = new Token();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertNotNull(token4);
      assertNull(token4.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', '!').when(javaCharStream0).BeginToken();
      doReturn((-1924), 882).when(javaCharStream0).getBeginColumn();
      doReturn(882, 74).when(javaCharStream0).getBeginLine();
      doReturn((-1924), 121).when(javaCharStream0).getEndColumn();
      doReturn(882, 147).when(javaCharStream0).getEndLine();
      doReturn('m', 'z').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1924), token0.endColumn);
      assertEquals(882, token0.endLine);
      assertEquals(89, token0.kind);
      assertEquals(882, token0.beginLine);
      assertEquals((-1924), token0.beginColumn);
      assertNotNull(token0);
      assertEquals("!", token0.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.beginColumn);
      assertEquals(121, token1.endColumn);
      assertEquals(147, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      
      Token token2 = Token.newToken(44);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertNull(token2.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, token1.kind);
      assertEquals(882, token1.beginColumn);
      assertEquals(121, token1.endColumn);
      assertEquals(147, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertEquals("!", token1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 14, 3179, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = Token.newToken(3179);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-5216));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -5216. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'beO83");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5143, 5143);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.lengthOfMatch = (-1148);
      Token token0 = Token.newToken(34);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream1, 0);
      assertEquals(0, javaCharStream1.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/w9`WpoI{W/}");
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 't';
      charArray0[2] = 'h';
      charArray0[3] = 'g';
      charArray0[4] = '/';
      charArray0[5] = 'z';
      charArray0[6] = '!';
      charArray0[7] = 's';
      charArray0[8] = '}';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 357, 546, 905);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(547, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rwE(Uwqc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.backup((-380));
      javaCharStream0.backup((-380));
      javaCharStream0.BeginToken();
      javaCharStream0.backup(53);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 22, 22, 106);
      char[] charArray0 = new char[0];
      javaCharStream0.nextCharBuf = charArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('!', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = Token.newToken((-224));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(0);
      token0.beginColumn = 0;
      javaParserTokenManager0.jjmatchedKind = (-224);
      javaParserTokenManager0.getNextToken();
      Token.newToken((-565));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Geh;;\u0002,y.b!w)[C`");
      token0.endColumn = 882;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }
}
