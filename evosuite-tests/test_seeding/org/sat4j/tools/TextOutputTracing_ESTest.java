/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:40:32 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolverService;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.TextOutputTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextOutputTracing_ESTest extends TextOutputTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      Integer integer0 = Integer.valueOf(1);
      hashMap0.put(integer0, "481");
      textOutputTracing0.propagating((-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating((-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 1000, "serial");
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating(1000);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "325");
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.propagating(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielHT> hashMap0 = new HashMap<Integer, MixedDataStructureDanielHT>();
      TextOutputTracing<MixedDataStructureDanielHT> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielHT>(hashMap0);
      textOutputTracing0.learnUnit(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      textOutputTracing0.delete(originalBinaryClause0);
      assertFalse(originalBinaryClause0.locked());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielHT> hashMap0 = new HashMap<Integer, MixedDataStructureDanielHT>();
      TextOutputTracing<MixedDataStructureDanielHT> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielHT>(hashMap0);
      textOutputTracing0.restarting();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Solver<MixedDataStructureDanielHT>> hashMap0 = new HashMap<Integer, Solver<MixedDataStructureDanielHT>>();
      TextOutputTracing<Solver<MixedDataStructureDanielHT>> textOutputTracing0 = new TextOutputTracing<Solver<MixedDataStructureDanielHT>>(hashMap0);
      Lbool lbool0 = Lbool.UNDEFINED;
      textOutputTracing0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.backtracking(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      int[] intArray0 = new int[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      textOutputTracing0.solutionFound(intArray0, dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(43, 0);
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      textOutputTracing0.enqueueing(0, learntBinaryClause0);
      assertFalse(learntBinaryClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielHT> hashMap0 = new HashMap<Integer, MixedDataStructureDanielHT>();
      TextOutputTracing<MixedDataStructureDanielHT> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielHT>(hashMap0);
      textOutputTracing0.init((ISolverService) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.conflictFound((-1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.start();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PureOrder pureOrder0 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, lubyRestarts0);
      GroupClauseSelectorSolver<Solver<MixedDataStructureDanielHT>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<MixedDataStructureDanielHT>>(solver0);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(map0);
      textOutputTracing0.conflictFound((IConstr) null, 0, (-62));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Solver<MixedDataStructureDanielHT>> hashMap0 = new HashMap<Integer, Solver<MixedDataStructureDanielHT>>();
      TextOutputTracing<Solver<MixedDataStructureDanielHT>> textOutputTracing0 = new TextOutputTracing<Solver<MixedDataStructureDanielHT>>(hashMap0);
      textOutputTracing0.learn((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.cleaning();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(1);
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.adding(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.assuming(2326);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.backjump(2541);
  }
}
